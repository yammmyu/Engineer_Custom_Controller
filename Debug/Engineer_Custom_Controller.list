
Engineer_Custom_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005948  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005ad0  08005ad0  00006ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b00  08005b00  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005b00  08005b00  00006b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b08  08005b08  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b08  08005b08  00006b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b0c  08005b0c  00006b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005b10  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000c44  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c50  20000c50  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000137bc  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f55  00000000  00000000  0001a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  0001d750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c30  00000000  00000000  0001e740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022981  00000000  00000000  0001f370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000147c6  00000000  00000000  00041cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce9f0  00000000  00000000  000564b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124ea7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040cc  00000000  00000000  00124eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00128fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ab8 	.word	0x08005ab8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005ab8 	.word	0x08005ab8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <pid_init>:
              float Kp, float Ki, float Kd, float Kf,
              float i_max, float out_max,
              float dt, float dead_zone,
              float i_var_a, float i_var_b,
              float i_sep_threshold, pid_d_mode_t d_mode)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b08f      	sub	sp, #60	@ 0x3c
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80004fc:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8000500:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 8000504:	ed87 1a0a 	vstr	s2, [r7, #40]	@ 0x28
 8000508:	edc7 1a09 	vstr	s3, [r7, #36]	@ 0x24
 800050c:	ed87 2a08 	vstr	s4, [r7, #32]
 8000510:	edc7 2a07 	vstr	s5, [r7, #28]
 8000514:	ed87 3a06 	vstr	s6, [r7, #24]
 8000518:	edc7 3a05 	vstr	s7, [r7, #20]
 800051c:	ed87 4a04 	vstr	s8, [r7, #16]
 8000520:	edc7 4a03 	vstr	s9, [r7, #12]
 8000524:	ed87 5a02 	vstr	s10, [r7, #8]
 8000528:	460b      	mov	r3, r1
 800052a:	71fb      	strb	r3, [r7, #7]
    pid->Kp = Kp;
 800052c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800052e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000530:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8000532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000536:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8000538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800053a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800053c:	609a      	str	r2, [r3, #8]
    pid->Kf = Kf;
 800053e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000542:	60da      	str	r2, [r3, #12]
    pid->dt = dt;
 8000544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000546:	69ba      	ldr	r2, [r7, #24]
 8000548:	611a      	str	r2, [r3, #16]
    pid->dead_zone = dead_zone;
 800054a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	615a      	str	r2, [r3, #20]
    pid->d_mode = d_mode;
 8000550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000552:	79fa      	ldrb	r2, [r7, #7]
 8000554:	761a      	strb	r2, [r3, #24]

    pid->i_out_max = i_max;
 8000556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000558:	6a3a      	ldr	r2, [r7, #32]
 800055a:	61da      	str	r2, [r3, #28]
    pid->out_max = out_max;
 800055c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800055e:	69fa      	ldr	r2, [r7, #28]
 8000560:	621a      	str	r2, [r3, #32]
    pid->i_var_a = i_var_a;
 8000562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000564:	693a      	ldr	r2, [r7, #16]
 8000566:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->i_var_b = i_var_b;
 8000568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->i_sep_threshold = i_sep_threshold;
 800056e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000570:	68ba      	ldr	r2, [r7, #8]
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c

    pid->target = 0.0f;
 8000574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000576:	f04f 0200 	mov.w	r2, #0
 800057a:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->now = 0.0f;
 800057c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800057e:	f04f 0200 	mov.w	r2, #0
 8000582:	635a      	str	r2, [r3, #52]	@ 0x34
    pid->integral_error = 0.0f;
 8000584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000586:	f04f 0200 	mov.w	r2, #0
 800058a:	639a      	str	r2, [r3, #56]	@ 0x38
    pid->prev_error = 0.0f;
 800058c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800058e:	f04f 0200 	mov.w	r2, #0
 8000592:	63da      	str	r2, [r3, #60]	@ 0x3c
    pid->prev_now = 0.0f;
 8000594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000596:	f04f 0200 	mov.w	r2, #0
 800059a:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->prev_target = 0.0f;
 800059c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800059e:	f04f 0200 	mov.w	r2, #0
 80005a2:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->prev_out = 0.0f;
 80005a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005a6:	f04f 0200 	mov.w	r2, #0
 80005aa:	649a      	str	r2, [r3, #72]	@ 0x48
    pid->out = 0.0f;
 80005ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005ae:	f04f 0200 	mov.w	r2, #0
 80005b2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80005b4:	bf00      	nop
 80005b6:	373c      	adds	r7, #60	@ 0x3c
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <pid_set_target>:

void pid_set_target(pid_t *pid, float target) {
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	ed87 0a00 	vstr	s0, [r7]
    pid->target = target;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <pid_set_now>:

void pid_set_now(pid_t *pid, float now) {
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	ed87 0a00 	vstr	s0, [r7]
    pid->now = now;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <pid_tick>:
 * @brief Run one PID update Calculation
 * 
 * @return PID output
 */
void pid_tick(pid_t *pid)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    float P = 0.0f, I = 0.0f, D = 0.0f, F = 0.0f;
 8000604:	f04f 0300 	mov.w	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
 800060a:	f04f 0300 	mov.w	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000610:	f04f 0300 	mov.w	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
 8000616:	f04f 0300 	mov.w	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
    
    float error = pid->target - pid->now;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8000628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800062c:	edc7 7a07 	vstr	s15, [r7, #28]

    float abs_error = error > 0 ? error : -error;
 8000630:	edd7 7a07 	vldr	s15, [r7, #28]
 8000634:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063c:	dd02      	ble.n	8000644 <pid_tick+0x48>
 800063e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000642:	e003      	b.n	800064c <pid_tick+0x50>
 8000644:	edd7 7a07 	vldr	s15, [r7, #28]
 8000648:	eef1 7a67 	vneg.f32	s15, s15
 800064c:	edc7 7a06 	vstr	s15, [r7, #24]

    float speed_ratio;

    /* Dead zone */
    if (abs_error < pid->dead_zone)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	edd3 7a05 	vldr	s15, [r3, #20]
 8000656:	ed97 7a06 	vldr	s14, [r7, #24]
 800065a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800065e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000662:	d505      	bpl.n	8000670 <pid_tick+0x74>
    {
        error = 0.0f;
 8000664:	f04f 0300 	mov.w	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
        abs_error = 0.0f;
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
    }

    /* Proportional */
    P = pid->Kp * error;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	edd3 7a00 	vldr	s15, [r3]
 8000676:	ed97 7a07 	vldr	s14, [r7, #28]
 800067a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800067e:	edc7 7a04 	vstr	s15, [r7, #16]

    // Integral with separation and variable speed
    if (pid->i_var_a == 0.0f && pid->i_var_b == 0.0f)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000688:	eef5 7a40 	vcmp.f32	s15, #0.0
 800068c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000690:	d10b      	bne.n	80006aa <pid_tick+0xae>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000698:	eef5 7a40 	vcmp.f32	s15, #0.0
 800069c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a0:	d103      	bne.n	80006aa <pid_tick+0xae>
    {
        // Not Variable Speed Integral
        speed_ratio = 1.0f;
 80006a2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	e02e      	b.n	8000708 <pid_tick+0x10c>
    }
    else
    {
        if (abs_error <= pid->i_var_a)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80006b0:	ed97 7a06 	vldr	s14, [r7, #24]
 80006b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006bc:	d803      	bhi.n	80006c6 <pid_tick+0xca>
        {
            // Full gain zone
            speed_ratio = 1.0f;
 80006be:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	e020      	b.n	8000708 <pid_tick+0x10c>
        }
        else if (abs_error < pid->i_var_b)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80006cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80006d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d8:	d513      	bpl.n	8000702 <pid_tick+0x106>
        {
            // Fade-out zone (linear)
            speed_ratio = (pid->i_var_b - abs_error) / (pid->i_var_b - pid->i_var_a);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80006e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80006e4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80006f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006fc:	edc7 7a05 	vstr	s15, [r7, #20]
 8000700:	e002      	b.n	8000708 <pid_tick+0x10c>
        }
        else
        {
            // No gain zone
            speed_ratio = 0.0f;
 8000702:	f04f 0300 	mov.w	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
        }
    }


    // No Integral Separation or Within Separation Threshold
    if (pid->i_sep_threshold == 0.0f || (abs_error < pid->i_sep_threshold))
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800070e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000716:	d009      	beq.n	800072c <pid_tick+0x130>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800071e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072a:	d548      	bpl.n	80007be <pid_tick+0x1c2>
    {
        pid->integral_error += speed_ratio * error * pid->dt;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8000732:	edd7 6a05 	vldr	s13, [r7, #20]
 8000736:	edd7 7a07 	vldr	s15, [r7, #28]
 800073a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	edd3 7a04 	vldr	s15, [r3, #16]
 8000744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        /* Integral clamp */
        if (pid->i_out_max != 0.0f) 
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	edd3 7a07 	vldr	s15, [r3, #28]
 8000758:	eef5 7a40 	vcmp.f32	s15, #0.0
 800075c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000760:	d023      	beq.n	80007aa <pid_tick+0x1ae>
        {
            if (pid->integral_error > pid->i_out_max) pid->integral_error = pid->i_out_max;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	edd3 7a07 	vldr	s15, [r3, #28]
 800076e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000776:	dd03      	ble.n	8000780 <pid_tick+0x184>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	69da      	ldr	r2, [r3, #28]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	639a      	str	r2, [r3, #56]	@ 0x38
            if (pid->integral_error < -pid->i_out_max) pid->integral_error = -pid->i_out_max;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	edd3 7a07 	vldr	s15, [r3, #28]
 800078c:	eef1 7a67 	vneg.f32	s15, s15
 8000790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000798:	d507      	bpl.n	80007aa <pid_tick+0x1ae>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	edd3 7a07 	vldr	s15, [r3, #28]
 80007a0:	eef1 7a67 	vneg.f32	s15, s15
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        }

        I = pid->Ki * pid->integral_error;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80007b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ba:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }


    /* Derivative */
    if (pid->d_mode == PID_D_FIRST_ENABLE) 
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7e1b      	ldrb	r3, [r3, #24]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d114      	bne.n	80007f0 <pid_tick+0x1f4>
    {
        // Derivative First
        D = pid->Kd * (pid->now - pid->prev_now) / pid->dt;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80007d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80007dc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80007e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007ea:	edc7 7a08 	vstr	s15, [r7, #32]
 80007ee:	e012      	b.n	8000816 <pid_tick+0x21a>
    } else 
    {
        // No Derivative First
        D = pid->Kd * (error - pid->prev_error) / pid->dt;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80007fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8000800:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000804:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	ed93 7a04 	vldr	s14, [r3, #16]
 800080e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000812:	edc7 7a08 	vstr	s15, [r7, #32]
    }


    /* Feedforward */
    F = pid->Kf * (pid->target - pid->prev_target);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	ed93 7a03 	vldr	s14, [r3, #12]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000828:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800082c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000830:	edc7 7a03 	vstr	s15, [r7, #12]


    /* Output sum */
    pid->out = P + I - D + F;
 8000834:	ed97 7a04 	vldr	s14, [r7, #16]
 8000838:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800083c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000840:	edd7 7a08 	vldr	s15, [r7, #32]
 8000844:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000848:	edd7 7a03 	vldr	s15, [r7, #12]
 800084c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c


    /* Output clamp */
    if (pid->out_max != 0.0f) 
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	edd3 7a08 	vldr	s15, [r3, #32]
 800085c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000864:	d023      	beq.n	80008ae <pid_tick+0x2b2>
    {
        if (pid->out > pid->out_max) pid->out = pid->out_max;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	edd3 7a08 	vldr	s15, [r3, #32]
 8000872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800087a:	dd03      	ble.n	8000884 <pid_tick+0x288>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6a1a      	ldr	r2, [r3, #32]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (pid->out < -pid->out_max) pid->out = -pid->out_max;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	edd3 7a08 	vldr	s15, [r3, #32]
 8000890:	eef1 7a67 	vneg.f32	s15, s15
 8000894:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089c:	d507      	bpl.n	80008ae <pid_tick+0x2b2>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	edd3 7a08 	vldr	s15, [r3, #32]
 80008a4:	eef1 7a67 	vneg.f32	s15, s15
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
    }


    /* Save state */
    pid->prev_error = error;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	69fa      	ldr	r2, [r7, #28]
 80008b2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pid->prev_now = pid->now;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->prev_target = pid->target;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->prev_out = pid->out;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80008cc:	bf00      	nop
 80008ce:	372c      	adds	r7, #44	@ 0x2c
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <pid_get_out>:

float pid_get_out(const pid_t *pid) 
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
    return pid->out;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e4:	ee07 3a90 	vmov	s15, r3
}
 80008e8:	eeb0 0a67 	vmov.f32	s0, s15
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008fc:	4b17      	ldr	r3, [pc, #92]	@ (800095c <MX_CAN1_Init+0x64>)
 80008fe:	4a18      	ldr	r2, [pc, #96]	@ (8000960 <MX_CAN1_Init+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000902:	4b16      	ldr	r3, [pc, #88]	@ (800095c <MX_CAN1_Init+0x64>)
 8000904:	2203      	movs	r2, #3
 8000906:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000908:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_CAN1_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800090e:	4b13      	ldr	r3, [pc, #76]	@ (800095c <MX_CAN1_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000914:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_CAN1_Init+0x64>)
 8000916:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 800091a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_CAN1_Init+0x64>)
 800091e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000922:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000924:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <MX_CAN1_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800092a:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <MX_CAN1_Init+0x64>)
 800092c:	2201      	movs	r2, #1
 800092e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000930:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <MX_CAN1_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000936:	4b09      	ldr	r3, [pc, #36]	@ (800095c <MX_CAN1_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800093c:	4b07      	ldr	r3, [pc, #28]	@ (800095c <MX_CAN1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <MX_CAN1_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	@ (800095c <MX_CAN1_Init+0x64>)
 800094a:	f001 fa83 	bl	8001e54 <HAL_CAN_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000954:	f000 ffb2 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000028 	.word	0x20000028
 8000960:	40006400 	.word	0x40006400

08000964 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <MX_CAN2_Init+0x64>)
 800096a:	4a18      	ldr	r2, [pc, #96]	@ (80009cc <MX_CAN2_Init+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <MX_CAN2_Init+0x64>)
 8000970:	2203      	movs	r2, #3
 8000972:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_CAN2_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_CAN2_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_CAN2_Init+0x64>)
 8000982:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000986:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <MX_CAN2_Init+0x64>)
 800098a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800098e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000990:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <MX_CAN2_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8000996:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_CAN2_Init+0x64>)
 8000998:	2201      	movs	r2, #1
 800099a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800099c:	4b0a      	ldr	r3, [pc, #40]	@ (80009c8 <MX_CAN2_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_CAN2_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80009a8:	4b07      	ldr	r3, [pc, #28]	@ (80009c8 <MX_CAN2_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_CAN2_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <MX_CAN2_Init+0x64>)
 80009b6:	f001 fa4d 	bl	8001e54 <HAL_CAN_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80009c0:	f000 ff7c 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000050 	.word	0x20000050
 80009cc:	40006800 	.word	0x40006800

080009d0 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	@ 0x30
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a52      	ldr	r2, [pc, #328]	@ (8000b38 <HAL_CAN_MspInit+0x168>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d145      	bne.n	8000a7e <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80009f2:	4b52      	ldr	r3, [pc, #328]	@ (8000b3c <HAL_CAN_MspInit+0x16c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	3301      	adds	r3, #1
 80009f8:	4a50      	ldr	r2, [pc, #320]	@ (8000b3c <HAL_CAN_MspInit+0x16c>)
 80009fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80009fc:	4b4f      	ldr	r3, [pc, #316]	@ (8000b3c <HAL_CAN_MspInit+0x16c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d10d      	bne.n	8000a20 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
 8000a08:	4b4d      	ldr	r3, [pc, #308]	@ (8000b40 <HAL_CAN_MspInit+0x170>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	4a4c      	ldr	r2, [pc, #304]	@ (8000b40 <HAL_CAN_MspInit+0x170>)
 8000a0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a14:	4b4a      	ldr	r3, [pc, #296]	@ (8000b40 <HAL_CAN_MspInit+0x170>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a1c:	61bb      	str	r3, [r7, #24]
 8000a1e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	4b46      	ldr	r3, [pc, #280]	@ (8000b40 <HAL_CAN_MspInit+0x170>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a28:	4a45      	ldr	r2, [pc, #276]	@ (8000b40 <HAL_CAN_MspInit+0x170>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a30:	4b43      	ldr	r3, [pc, #268]	@ (8000b40 <HAL_CAN_MspInit+0x170>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a34:	f003 0308 	and.w	r3, r3, #8
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a4c:	2309      	movs	r3, #9
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	483b      	ldr	r0, [pc, #236]	@ (8000b44 <HAL_CAN_MspInit+0x174>)
 8000a58:	f002 fd76 	bl	8003548 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2014      	movs	r0, #20
 8000a62:	f002 f938 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a66:	2014      	movs	r0, #20
 8000a68:	f002 f951 	bl	8002d0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2015      	movs	r0, #21
 8000a72:	f002 f930 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000a76:	2015      	movs	r0, #21
 8000a78:	f002 f949 	bl	8002d0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000a7c:	e057      	b.n	8000b2e <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a31      	ldr	r2, [pc, #196]	@ (8000b48 <HAL_CAN_MspInit+0x178>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d152      	bne.n	8000b2e <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b40 <HAL_CAN_MspInit+0x170>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a90:	4a2b      	ldr	r2, [pc, #172]	@ (8000b40 <HAL_CAN_MspInit+0x170>)
 8000a92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a98:	4b29      	ldr	r3, [pc, #164]	@ (8000b40 <HAL_CAN_MspInit+0x170>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000aa4:	4b25      	ldr	r3, [pc, #148]	@ (8000b3c <HAL_CAN_MspInit+0x16c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a24      	ldr	r2, [pc, #144]	@ (8000b3c <HAL_CAN_MspInit+0x16c>)
 8000aac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000aae:	4b23      	ldr	r3, [pc, #140]	@ (8000b3c <HAL_CAN_MspInit+0x16c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d10d      	bne.n	8000ad2 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b21      	ldr	r3, [pc, #132]	@ (8000b40 <HAL_CAN_MspInit+0x170>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	4a20      	ldr	r2, [pc, #128]	@ (8000b40 <HAL_CAN_MspInit+0x170>)
 8000ac0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <HAL_CAN_MspInit+0x170>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <HAL_CAN_MspInit+0x170>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a19      	ldr	r2, [pc, #100]	@ (8000b40 <HAL_CAN_MspInit+0x170>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <HAL_CAN_MspInit+0x170>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000aee:	2360      	movs	r3, #96	@ 0x60
 8000af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000afe:	2309      	movs	r3, #9
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4810      	ldr	r0, [pc, #64]	@ (8000b4c <HAL_CAN_MspInit+0x17c>)
 8000b0a:	f002 fd1d 	bl	8003548 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	2040      	movs	r0, #64	@ 0x40
 8000b14:	f002 f8df 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000b18:	2040      	movs	r0, #64	@ 0x40
 8000b1a:	f002 f8f8 	bl	8002d0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2041      	movs	r0, #65	@ 0x41
 8000b24:	f002 f8d7 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000b28:	2041      	movs	r0, #65	@ 0x41
 8000b2a:	f002 f8f0 	bl	8002d0e <HAL_NVIC_EnableIRQ>
}
 8000b2e:	bf00      	nop
 8000b30:	3730      	adds	r7, #48	@ 0x30
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40006400 	.word	0x40006400
 8000b3c:	20000078 	.word	0x20000078
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020c00 	.word	0x40020c00
 8000b48:	40006800 	.word	0x40006800
 8000b4c:	40020400 	.word	0x40020400

08000b50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <MX_DMA_Init+0x4c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b9c <MX_DMA_Init+0x4c>)
 8000b60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <MX_DMA_Init+0x4c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2010      	movs	r0, #16
 8000b78:	f002 f8ad 	bl	8002cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b7c:	2010      	movs	r0, #16
 8000b7e:	f002 f8c6 	bl	8002d0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	2011      	movs	r0, #17
 8000b88:	f002 f8a5 	bl	8002cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b8c:	2011      	movs	r0, #17
 8000b8e:	f002 f8be 	bl	8002d0e <HAL_NVIC_EnableIRQ>

}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <Enable_CAN2>:
        ptr ->given_current		= (uint16_t)((data)[4] << 8 | (data)[5]);
        ptr ->temperature 		= (data)[6];
    }
/* ------------------------------ Initialization of CAN, filter Setup）------------------------------ */
void Enable_CAN2(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	@ 0x28
 8000ba4:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef CAN_Filter;

    CAN_Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
    CAN_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61fb      	str	r3, [r7, #28]
    CAN_Filter.FilterBank = 14;             // start filters for CAN2 here
 8000bae:	230e      	movs	r3, #14
 8000bb0:	617b      	str	r3, [r7, #20]
    CAN_Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
    CAN_Filter.SlaveStartFilterBank = 14;   // 0–13 for CAN1, 14–27 for CAN2
 8000bb6:	230e      	movs	r3, #14
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    CAN_Filter.FilterActivation = CAN_FILTER_ENABLE;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	623b      	str	r3, [r7, #32]
    CAN_Filter.FilterIdHigh = 0x0000;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
    CAN_Filter.FilterIdLow = 0x0000;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
    CAN_Filter.FilterMaskIdHigh = 0x0000;   // accept all IDs
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
    CAN_Filter.FilterMaskIdLow = 0x0000;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]

    if (HAL_CAN_ConfigFilter(&hcan2, &CAN_Filter) != HAL_OK){
 8000bce:	463b      	mov	r3, r7
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4812      	ldr	r0, [pc, #72]	@ (8000c1c <Enable_CAN2+0x7c>)
 8000bd4:	f001 fa3a 	bl	800204c <HAL_CAN_ConfigFilter>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <Enable_CAN2+0x42>
        Error_Handler();
 8000bde:	f000 fe6d 	bl	80018bc <Error_Handler>
    }
    // 👇 Add this check here
    if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 8000be2:	480e      	ldr	r0, [pc, #56]	@ (8000c1c <Enable_CAN2+0x7c>)
 8000be4:	f001 fb10 	bl	8002208 <HAL_CAN_Start>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <Enable_CAN2+0x52>
    	Error_Handler();
 8000bee:	f000 fe65 	bl	80018bc <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	4809      	ldr	r0, [pc, #36]	@ (8000c1c <Enable_CAN2+0x7c>)
 8000bf6:	f001 fd3d 	bl	8002674 <HAL_CAN_ActivateNotification>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <Enable_CAN2+0x64>
    	Error_Handler();
 8000c00:	f000 fe5c 	bl	80018bc <Error_Handler>
    }

    HAL_CAN_Start(&hcan2);
 8000c04:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <Enable_CAN2+0x7c>)
 8000c06:	f001 faff 	bl	8002208 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <Enable_CAN2+0x7c>)
 8000c0e:	f001 fd31 	bl	8002674 <HAL_CAN_ActivateNotification>
}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	@ 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000050 	.word	0x20000050

08000c20 <Set_GM6020_Voltage>:


/* ------------------------------ 发送函数 ------------------------------ */
void Set_GM6020_Voltage(int16_t q1, int16_t q2, int16_t q3)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	@ 0x30
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	80bb      	strh	r3, [r7, #4]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	807b      	strh	r3, [r7, #2]
    uint8_t TxData[8];
    TxData[0] = (uint8_t)(q1>>8);
 8000c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c36:	121b      	asrs	r3, r3, #8
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    TxData[1] = (uint8_t)q1;
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    TxData[2] = (uint8_t)(q2>>8);
 8000c48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c4c:	121b      	asrs	r3, r3, #8
 8000c4e:	b21b      	sxth	r3, r3
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    TxData[3] = (uint8_t)q2;
 8000c56:	88bb      	ldrh	r3, [r7, #4]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    TxData[4] = (uint8_t)(q3>>8);
 8000c5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c62:	121b      	asrs	r3, r3, #8
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    TxData[5] = (uint8_t)q3;
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    TxData[6] = (uint8_t)0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    TxData[7] = (uint8_t)0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    CAN_TxHeaderTypeDef TxHeader = {
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	615a      	str	r2, [r3, #20]
 8000c92:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	2308      	movs	r3, #8
 8000c9a:	623b      	str	r3, [r7, #32]
            .DLC = 8,
            .IDE = CAN_ID_STD,    // 标准帧
            .RTR = CAN_RTR_DATA,  // 数据帧
            .StdId = 0x2ff
    };
    uint32_t TxBox = CAN_TX_MAILBOX0;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
    if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxBox) != HAL_OK){
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000ca8:	f107 0110 	add.w	r1, r7, #16
 8000cac:	4807      	ldr	r0, [pc, #28]	@ (8000ccc <Set_GM6020_Voltage+0xac>)
 8000cae:	f001 faef 	bl	8002290 <HAL_CAN_AddTxMessage>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <Set_GM6020_Voltage+0xa4>
        HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);//错误处理
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cbe:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <Set_GM6020_Voltage+0xb0>)
 8000cc0:	f002 fdde 	bl	8003880 <HAL_GPIO_WritePin>
    }
}
 8000cc4:	bf00      	nop
 8000cc6:	3730      	adds	r7, #48	@ 0x30
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000050 	.word	0x20000050
 8000cd0:	40021c00 	.word	0x40021c00

08000cd4 <Set_C620_Current>:


void Set_C620_Current(int16_t q1, int16_t q2, int16_t q3)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08c      	sub	sp, #48	@ 0x30
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	80bb      	strh	r3, [r7, #4]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	807b      	strh	r3, [r7, #2]
    uint8_t TxData[8];
    TxData[0] = (uint8_t)(q1>>8);
 8000ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cea:	121b      	asrs	r3, r3, #8
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    TxData[1] = (uint8_t)q1;
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    TxData[2] = (uint8_t)(q2>>8);
 8000cfc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d00:	121b      	asrs	r3, r3, #8
 8000d02:	b21b      	sxth	r3, r3
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    TxData[3] = (uint8_t)q2;
 8000d0a:	88bb      	ldrh	r3, [r7, #4]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    TxData[4] = (uint8_t)(q3>>8);
 8000d12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d16:	121b      	asrs	r3, r3, #8
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    TxData[5] = (uint8_t)q3;
 8000d20:	887b      	ldrh	r3, [r7, #2]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    TxData[6] = (uint8_t)0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    TxData[7] = (uint8_t)0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    CAN_TxHeaderTypeDef TxHeader = {
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
 8000d44:	615a      	str	r2, [r3, #20]
 8000d46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	623b      	str	r3, [r7, #32]
            .DLC = 8,
            .IDE = CAN_ID_STD,    //standard frame
            .RTR = CAN_RTR_DATA,  //data frame
            .StdId = 0x200
    };
    uint32_t TxBox = CAN_TX_MAILBOX0;
 8000d50:	2301      	movs	r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
    if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxBox) != HAL_OK){
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000d5c:	f107 0110 	add.w	r1, r7, #16
 8000d60:	4807      	ldr	r0, [pc, #28]	@ (8000d80 <Set_C620_Current+0xac>)
 8000d62:	f001 fa95 	bl	8002290 <HAL_CAN_AddTxMessage>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d005      	beq.n	8000d78 <Set_C620_Current+0xa4>
        HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);//错误处理
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d72:	4804      	ldr	r0, [pc, #16]	@ (8000d84 <Set_C620_Current+0xb0>)
 8000d74:	f002 fd84 	bl	8003880 <HAL_GPIO_WritePin>
    }
}
 8000d78:	bf00      	nop
 8000d7a:	3730      	adds	r7, #48	@ 0x30
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000050 	.word	0x20000050
 8000d84:	40021c00 	.word	0x40021c00

08000d88 <motor_index_from_id>:
 * 0x205 --> 4
 * 0x206 --> 5
 * 0x207 --> 6
 * */
static int8_t motor_index_from_id(uint16_t id)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80fb      	strh	r3, [r7, #6]
	switch (id)
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000d98:	2b0a      	cmp	r3, #10
 8000d9a:	d825      	bhi.n	8000de8 <motor_index_from_id+0x60>
 8000d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8000da4 <motor_index_from_id+0x1c>)
 8000d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da2:	bf00      	nop
 8000da4:	08000dd1 	.word	0x08000dd1
 8000da8:	08000dd5 	.word	0x08000dd5
 8000dac:	08000dd9 	.word	0x08000dd9
 8000db0:	08000de9 	.word	0x08000de9
 8000db4:	08000de9 	.word	0x08000de9
 8000db8:	08000de9 	.word	0x08000de9
 8000dbc:	08000de9 	.word	0x08000de9
 8000dc0:	08000de9 	.word	0x08000de9
 8000dc4:	08000ddd 	.word	0x08000ddd
 8000dc8:	08000de1 	.word	0x08000de1
 8000dcc:	08000de5 	.word	0x08000de5
	{
		case CAN_M2006_M1_ID: return 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e00b      	b.n	8000dec <motor_index_from_id+0x64>
		case CAN_M2006_M2_ID: return 1;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e009      	b.n	8000dec <motor_index_from_id+0x64>
		case CAN_M2006_M3_ID: return 2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	e007      	b.n	8000dec <motor_index_from_id+0x64>
		case CAN_GM6020_M5_ID: return 3;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e005      	b.n	8000dec <motor_index_from_id+0x64>
		case CAN_GM6020_M6_ID: return 4;
 8000de0:	2304      	movs	r3, #4
 8000de2:	e003      	b.n	8000dec <motor_index_from_id+0x64>
		case CAN_GM6020_M7_ID: return 5;
 8000de4:	2305      	movs	r3, #5
 8000de6:	e001      	b.n	8000dec <motor_index_from_id+0x64>

		default: return -1; //safety, filters any noise
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08c      	sub	sp, #48	@ 0x30
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	f107 0210 	add.w	r2, r7, #16
 8000e08:	2100      	movs	r1, #0
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f001 fb10 	bl	8002430 <HAL_CAN_GetRxMessage>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d119      	bne.n	8000e4a <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
    {
        int idx = motor_index_from_id(rxHeader.StdId);
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ffb4 	bl	8000d88 <motor_index_from_id>
 8000e20:	4603      	mov	r3, r0
 8000e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (idx >= 0 && idx < MOTOR_COUNT)
 8000e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	db0f      	blt.n	8000e4a <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 8000e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e2c:	2b05      	cmp	r3, #5
 8000e2e:	dc0c      	bgt.n	8000e4a <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
        {
            Motor_CAN_RxCpltCallback(&motors[idx], rxData);
 8000e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e32:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8000e36:	fb02 f303 	mul.w	r3, r2, r3
 8000e3a:	4a06      	ldr	r2, [pc, #24]	@ (8000e54 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000e3c:	4413      	add	r3, r2
 8000e3e:	f107 0208 	add.w	r2, r7, #8
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f905 	bl	8001054 <Motor_CAN_RxCpltCallback>
        }
    }
}
 8000e4a:	bf00      	nop
 8000e4c:	3730      	adds	r7, #48	@ 0x30
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2000034c 	.word	0x2000034c

08000e58 <HAL_UARTEx_RxEventCallback>:
 *
 * @param huart UART编号
 * @param Size 长度
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]
    //选择回调函数
    if (huart->Instance == USART1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a3f      	ldr	r2, [pc, #252]	@ (8000f68 <HAL_UARTEx_RxEventCallback+0x110>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10f      	bne.n	8000e8e <HAL_UARTEx_RxEventCallback+0x36>
    {
        UART1_Manage_Object.Callback_Function(UART1_Manage_Object.Rx_Buffer, Size);
 8000e6e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f6c <HAL_UARTEx_RxEventCallback+0x114>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	4a3e      	ldr	r2, [pc, #248]	@ (8000f6c <HAL_UARTEx_RxEventCallback+0x114>)
 8000e74:	6892      	ldr	r2, [r2, #8]
 8000e76:	8879      	ldrh	r1, [r7, #2]
 8000e78:	4610      	mov	r0, r2
 8000e7a:	4798      	blx	r3
        HAL_UARTEx_ReceiveToIdle_DMA(huart, UART1_Manage_Object.Rx_Buffer, UART1_Manage_Object.Rx_Buffer_Length);
 8000e7c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f6c <HAL_UARTEx_RxEventCallback+0x114>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	4a3a      	ldr	r2, [pc, #232]	@ (8000f6c <HAL_UARTEx_RxEventCallback+0x114>)
 8000e82:	8992      	ldrh	r2, [r2, #12]
 8000e84:	4619      	mov	r1, r3
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f003 fce4 	bl	8004854 <HAL_UARTEx_ReceiveToIdle_DMA>
    else if (huart->Instance == USART6)
    {
        UART6_Manage_Object.Callback_Function(UART6_Manage_Object.Rx_Buffer, Size);
        HAL_UARTEx_ReceiveToIdle_DMA(huart, UART6_Manage_Object.Rx_Buffer, UART6_Manage_Object.Rx_Buffer_Length);
    }
}
 8000e8c:	e067      	b.n	8000f5e <HAL_UARTEx_RxEventCallback+0x106>
    else if (huart->Instance == USART2)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a37      	ldr	r2, [pc, #220]	@ (8000f70 <HAL_UARTEx_RxEventCallback+0x118>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d10f      	bne.n	8000eb8 <HAL_UARTEx_RxEventCallback+0x60>
        UART2_Manage_Object.Callback_Function(UART2_Manage_Object.Rx_Buffer, Size);
 8000e98:	4b36      	ldr	r3, [pc, #216]	@ (8000f74 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	4a35      	ldr	r2, [pc, #212]	@ (8000f74 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000e9e:	6892      	ldr	r2, [r2, #8]
 8000ea0:	8879      	ldrh	r1, [r7, #2]
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4798      	blx	r3
        HAL_UARTEx_ReceiveToIdle_DMA(huart, UART2_Manage_Object.Rx_Buffer, UART2_Manage_Object.Rx_Buffer_Length);
 8000ea6:	4b33      	ldr	r3, [pc, #204]	@ (8000f74 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	4a32      	ldr	r2, [pc, #200]	@ (8000f74 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000eac:	8992      	ldrh	r2, [r2, #12]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f003 fccf 	bl	8004854 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000eb6:	e052      	b.n	8000f5e <HAL_UARTEx_RxEventCallback+0x106>
    else if (huart->Instance == USART3)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a2e      	ldr	r2, [pc, #184]	@ (8000f78 <HAL_UARTEx_RxEventCallback+0x120>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d10f      	bne.n	8000ee2 <HAL_UARTEx_RxEventCallback+0x8a>
        UART3_Manage_Object.Callback_Function(UART3_Manage_Object.Rx_Buffer, Size);
 8000ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f7c <HAL_UARTEx_RxEventCallback+0x124>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4a2d      	ldr	r2, [pc, #180]	@ (8000f7c <HAL_UARTEx_RxEventCallback+0x124>)
 8000ec8:	6892      	ldr	r2, [r2, #8]
 8000eca:	8879      	ldrh	r1, [r7, #2]
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4798      	blx	r3
        HAL_UARTEx_ReceiveToIdle_DMA(huart, UART3_Manage_Object.Rx_Buffer, UART3_Manage_Object.Rx_Buffer_Length);
 8000ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f7c <HAL_UARTEx_RxEventCallback+0x124>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	4a29      	ldr	r2, [pc, #164]	@ (8000f7c <HAL_UARTEx_RxEventCallback+0x124>)
 8000ed6:	8992      	ldrh	r2, [r2, #12]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f003 fcba 	bl	8004854 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000ee0:	e03d      	b.n	8000f5e <HAL_UARTEx_RxEventCallback+0x106>
    else if (huart->Instance == UART4)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a26      	ldr	r2, [pc, #152]	@ (8000f80 <HAL_UARTEx_RxEventCallback+0x128>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d10f      	bne.n	8000f0c <HAL_UARTEx_RxEventCallback+0xb4>
        UART4_Manage_Object.Callback_Function(UART4_Manage_Object.Rx_Buffer, Size);
 8000eec:	4b25      	ldr	r3, [pc, #148]	@ (8000f84 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	4a24      	ldr	r2, [pc, #144]	@ (8000f84 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000ef2:	6892      	ldr	r2, [r2, #8]
 8000ef4:	8879      	ldrh	r1, [r7, #2]
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4798      	blx	r3
        HAL_UARTEx_ReceiveToIdle_DMA(huart, UART4_Manage_Object.Rx_Buffer, UART4_Manage_Object.Rx_Buffer_Length);
 8000efa:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	4a21      	ldr	r2, [pc, #132]	@ (8000f84 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000f00:	8992      	ldrh	r2, [r2, #12]
 8000f02:	4619      	mov	r1, r3
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f003 fca5 	bl	8004854 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000f0a:	e028      	b.n	8000f5e <HAL_UARTEx_RxEventCallback+0x106>
    else if (huart->Instance == UART5)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a1d      	ldr	r2, [pc, #116]	@ (8000f88 <HAL_UARTEx_RxEventCallback+0x130>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d10f      	bne.n	8000f36 <HAL_UARTEx_RxEventCallback+0xde>
        UART5_Manage_Object.Callback_Function(UART5_Manage_Object.Rx_Buffer, Size);
 8000f16:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <HAL_UARTEx_RxEventCallback+0x134>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f8c <HAL_UARTEx_RxEventCallback+0x134>)
 8000f1c:	6892      	ldr	r2, [r2, #8]
 8000f1e:	8879      	ldrh	r1, [r7, #2]
 8000f20:	4610      	mov	r0, r2
 8000f22:	4798      	blx	r3
        HAL_UARTEx_ReceiveToIdle_DMA(huart, UART5_Manage_Object.Rx_Buffer, UART5_Manage_Object.Rx_Buffer_Length);
 8000f24:	4b19      	ldr	r3, [pc, #100]	@ (8000f8c <HAL_UARTEx_RxEventCallback+0x134>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	4a18      	ldr	r2, [pc, #96]	@ (8000f8c <HAL_UARTEx_RxEventCallback+0x134>)
 8000f2a:	8992      	ldrh	r2, [r2, #12]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f003 fc90 	bl	8004854 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000f34:	e013      	b.n	8000f5e <HAL_UARTEx_RxEventCallback+0x106>
    else if (huart->Instance == USART6)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a15      	ldr	r2, [pc, #84]	@ (8000f90 <HAL_UARTEx_RxEventCallback+0x138>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d10e      	bne.n	8000f5e <HAL_UARTEx_RxEventCallback+0x106>
        UART6_Manage_Object.Callback_Function(UART6_Manage_Object.Rx_Buffer, Size);
 8000f40:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	4a13      	ldr	r2, [pc, #76]	@ (8000f94 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000f46:	6892      	ldr	r2, [r2, #8]
 8000f48:	8879      	ldrh	r1, [r7, #2]
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4798      	blx	r3
        HAL_UARTEx_ReceiveToIdle_DMA(huart, UART6_Manage_Object.Rx_Buffer, UART6_Manage_Object.Rx_Buffer_Length);
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	4a10      	ldr	r2, [pc, #64]	@ (8000f94 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000f54:	8992      	ldrh	r2, [r2, #12]
 8000f56:	4619      	mov	r1, r3
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f003 fc7b 	bl	8004854 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40011000 	.word	0x40011000
 8000f6c:	200002bc 	.word	0x200002bc
 8000f70:	40004400 	.word	0x40004400
 8000f74:	200002d4 	.word	0x200002d4
 8000f78:	40004800 	.word	0x40004800
 8000f7c:	200002ec 	.word	0x200002ec
 8000f80:	40004c00 	.word	0x40004c00
 8000f84:	20000304 	.word	0x20000304
 8000f88:	40005000 	.word	0x40005000
 8000f8c:	2000031c 	.word	0x2000031c
 8000f90:	40011400 	.word	0x40011400
 8000f94:	20000334 	.word	0x20000334

08000f98 <allocate_tx_data>:
/**
 * @brief Allocate CAN Tx data pointer based on CAN ID.
 * @note Requires global buffers (e.g., CAN1_0x200_Tx_Data[]) defined elsewhere.
 */
static uint8_t* allocate_tx_data(CAN_HandleTypeDef *hcan, Enum_CAN_Motor_ID id)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
    // TODO: Map to actual global Tx buffers depending on hcan and id.
    // For now, return NULL as placeholder.
    return NULL;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <Motor_Init>:
                Enum_Control_Method method,
                float gearbox_rate,
                float torque_max,
                float omega_max,
                int32_t encoder_offset)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6178      	str	r0, [r7, #20]
 8000fba:	6139      	str	r1, [r7, #16]
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fc4:	edc7 0a01 	vstr	s1, [r7, #4]
 8000fc8:	ed87 1a00 	vstr	s2, [r7]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	73bb      	strb	r3, [r7, #14]
    memset(motor, 0, sizeof(Motor_t));
 8000fd4:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8000fd8:	2100      	movs	r1, #0
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f004 fd40 	bl	8005a60 <memset>

    motor->hcan = hcan;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	601a      	str	r2, [r3, #0]
    motor->CAN_ID = id;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	721a      	strb	r2, [r3, #8]
    motor->Control_Method = method;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	7bba      	ldrb	r2, [r7, #14]
 8000ff0:	725a      	strb	r2, [r3, #9]
    motor->Gearbox_Rate = gearbox_rate;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
    motor->Torque_Max = torque_max;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	611a      	str	r2, [r3, #16]
    motor->Omega_Max = omega_max;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	615a      	str	r2, [r3, #20]
    motor->Encoder_Offset = encoder_offset;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	6a3a      	ldr	r2, [r7, #32]
 8001008:	619a      	str	r2, [r3, #24]

    motor->CAN_Tx_Data = allocate_tx_data(hcan, id);
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	4619      	mov	r1, r3
 800100e:	6938      	ldr	r0, [r7, #16]
 8001010:	f7ff ffc2 	bl	8000f98 <allocate_tx_data>
 8001014:	4602      	mov	r2, r0
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	605a      	str	r2, [r3, #4]

    motor->Output_Max = 16384;   // example limit
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001020:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    motor->Encoder_Num_Per_Round = 8192; // depends on motor
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800102a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <Motor_Set_Target_Angle>:
float Motor_Get_Out(Motor_t *motor) { return motor->Out; }

/* ---------------- Setters ---------------- */

void Motor_Set_Control_Method(Motor_t *motor, Enum_Control_Method method) { motor->Control_Method = method; }
void Motor_Set_Target_Angle(Motor_t *motor, float angle) { motor->Target_Angle = angle; }
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	ed87 0a00 	vstr	s0, [r7]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <Motor_CAN_RxCpltCallback>:
void Motor_Set_Out(Motor_t *motor, float out) { motor->Out = out; }

/* ---------------- Callbacks ---------------- */

void Motor_CAN_RxCpltCallback(Motor_t *motor, uint8_t *rx_data)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
    int16_t delta_encoder;
    motor->Flag++;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	649a      	str	r2, [r3, #72]	@ 0x48

    motor->Pre_Encoder = motor->Rx_Encoder;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	87da      	strh	r2, [r3, #62]	@ 0x3e

    motor->Rx_Encoder   = (rx_data[0] << 8) | rx_data[1];
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b21b      	sxth	r3, r3
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21b      	sxth	r3, r3
 8001086:	b29a      	uxth	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	879a      	strh	r2, [r3, #60]	@ 0x3c
    int16_t rx_omega    = (rx_data[2] << 8) | rx_data[3];
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	3302      	adds	r3, #2
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b21b      	sxth	r3, r3
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	3303      	adds	r3, #3
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	81fb      	strh	r3, [r7, #14]
    int16_t rx_torque   = (rx_data[4] << 8) | rx_data[5];
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3304      	adds	r3, #4
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	3305      	adds	r3, #5
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	81bb      	strh	r3, [r7, #12]
    uint8_t rx_temp     = rx_data[6];
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	799b      	ldrb	r3, [r3, #6]
 80010c0:	72fb      	strb	r3, [r7, #11]

    delta_encoder = motor->Rx_Encoder - motor->Pre_Encoder;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	813b      	strh	r3, [r7, #8]
    if (delta_encoder < -4096) {
 80010d0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80010d4:	f513 5f80 	cmn.w	r3, #4096	@ 0x1000
 80010d8:	da05      	bge.n	80010e6 <Motor_CAN_RxCpltCallback+0x92>
        motor->Total_Round++;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80010e4:	e009      	b.n	80010fa <Motor_CAN_RxCpltCallback+0xa6>
    } else if (delta_encoder > 4096) {
 80010e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80010ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010ee:	dd04      	ble.n	80010fa <Motor_CAN_RxCpltCallback+0xa6>
        motor->Total_Round--;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f4:	1e5a      	subs	r2, r3, #1
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    motor->Total_Encoder = motor->Total_Round * motor->Encoder_Num_Per_Round
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8001104:	fb02 f303 	mul.w	r3, r2, r3
                         + motor->Rx_Encoder + motor->Encoder_Offset;
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	8f92      	ldrh	r2, [r2, #60]	@ 0x3c
 800110c:	441a      	add	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	441a      	add	r2, r3
    motor->Total_Encoder = motor->Total_Round * motor->Encoder_Num_Per_Round
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	645a      	str	r2, [r3, #68]	@ 0x44

    motor->Now_Angle = (float)motor->Total_Encoder / (float)motor->Encoder_Num_Per_Round
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001132:	eec6 7a87 	vdiv.f32	s15, s13, s14
                     * 2.0f * PI / motor->Gearbox_Rate;
 8001136:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800113a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800119c <Motor_CAN_RxCpltCallback+0x148>
 800113e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	ed93 7a03 	vldr	s14, [r3, #12]
 8001148:	eec6 7a87 	vdiv.f32	s15, s13, s14
    motor->Now_Angle = (float)motor->Total_Encoder / (float)motor->Encoder_Num_Per_Round
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	edc3 7a07 	vstr	s15, [r3, #28]
    motor->Now_Omega = (float)rx_omega * RPM_TO_RADPS / motor->Gearbox_Rate;
 8001152:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80011a0 <Motor_CAN_RxCpltCallback+0x14c>
 8001162:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	ed93 7a03 	vldr	s14, [r3, #12]
 800116c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	edc3 7a08 	vstr	s15, [r3, #32]
    motor->Now_Torque = rx_torque;
 8001176:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    motor->Now_Temperature = rx_temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7afa      	ldrb	r2, [r7, #11]
 800118c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	40490fdb 	.word	0x40490fdb
 80011a0:	3dd67750 	.word	0x3dd67750

080011a4 <Motor_TIM_PID_PeriodElapsedCallback>:
    }
    motor->Pre_Flag = motor->Flag;
}

void Motor_TIM_PID_PeriodElapsedCallback(Motor_t *motor)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
    switch (motor->Control_Method) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7a5b      	ldrb	r3, [r3, #9]
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	f200 80b1 	bhi.w	8001318 <Motor_TIM_PID_PeriodElapsedCallback+0x174>
 80011b6:	a201      	add	r2, pc, #4	@ (adr r2, 80011bc <Motor_TIM_PID_PeriodElapsedCallback+0x18>)
 80011b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011bc:	080011cd 	.word	0x080011cd
 80011c0:	080011f7 	.word	0x080011f7
 80011c4:	08001243 	.word	0x08001243
 80011c8:	0800128f 	.word	0x0800128f
    case Control_Method_OPENLOOP:
        motor->Out = motor->Target_Torque / motor->Torque_Max * motor->Output_Max;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80011d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        break;
 80011f4:	e095      	b.n	8001322 <Motor_TIM_PID_PeriodElapsedCallback+0x17e>

    case Control_Method_TORQUE:
        pid_set_target(&motor->PID_Torque, motor->Target_Torque);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	4610      	mov	r0, r2
 8001208:	f7ff f9da 	bl	80005c0 <pid_set_target>
        pid_set_now(&motor->PID_Torque, motor->Now_Torque);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001218:	eeb0 0a67 	vmov.f32	s0, s15
 800121c:	4610      	mov	r0, r2
 800121e:	f7ff f9de 	bl	80005de <pid_set_now>
        pid_tick(&motor->PID_Torque);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	33f8      	adds	r3, #248	@ 0xf8
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f9e8 	bl	80005fc <pid_tick>
        motor->Out = pid_get_out(&motor->PID_Torque);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	33f8      	adds	r3, #248	@ 0xf8
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fb51 	bl	80008d8 <pid_get_out>
 8001236:	eef0 7a40 	vmov.f32	s15, s0
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        break;
 8001240:	e06f      	b.n	8001322 <Motor_TIM_PID_PeriodElapsedCallback+0x17e>

    case Control_Method_OMEGA:
        pid_set_target(&motor->PID_Omega, motor->Target_Omega);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800124e:	eeb0 0a67 	vmov.f32	s0, s15
 8001252:	4610      	mov	r0, r2
 8001254:	f7ff f9b4 	bl	80005c0 <pid_set_target>
        pid_set_now(&motor->PID_Omega, motor->Now_Omega);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	edd3 7a08 	vldr	s15, [r3, #32]
 8001264:	eeb0 0a67 	vmov.f32	s0, s15
 8001268:	4610      	mov	r0, r2
 800126a:	f7ff f9b8 	bl	80005de <pid_set_now>
        pid_tick(&motor->PID_Omega);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	33a8      	adds	r3, #168	@ 0xa8
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f9c2 	bl	80005fc <pid_tick>
        motor->Out = pid_get_out(&motor->PID_Omega);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	33a8      	adds	r3, #168	@ 0xa8
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fb2b 	bl	80008d8 <pid_get_out>
 8001282:	eef0 7a40 	vmov.f32	s15, s0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        break;
 800128c:	e049      	b.n	8001322 <Motor_TIM_PID_PeriodElapsedCallback+0x17e>

    case Control_Method_ANGLE:
        pid_set_target(&motor->PID_Angle, motor->Target_Angle);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800129a:	eeb0 0a67 	vmov.f32	s0, s15
 800129e:	4610      	mov	r0, r2
 80012a0:	f7ff f98e 	bl	80005c0 <pid_set_target>
        pid_set_now(&motor->PID_Angle, motor->Now_Angle);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edd3 7a07 	vldr	s15, [r3, #28]
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	4610      	mov	r0, r2
 80012b6:	f7ff f992 	bl	80005de <pid_set_now>
        pid_tick(&motor->PID_Angle);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3358      	adds	r3, #88	@ 0x58
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f99c 	bl	80005fc <pid_tick>

        pid_set_target(&motor->PID_Omega, pid_get_out(&motor->PID_Angle));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f103 04a8 	add.w	r4, r3, #168	@ 0xa8
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3358      	adds	r3, #88	@ 0x58
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fb02 	bl	80008d8 <pid_get_out>
 80012d4:	eef0 7a40 	vmov.f32	s15, s0
 80012d8:	eeb0 0a67 	vmov.f32	s0, s15
 80012dc:	4620      	mov	r0, r4
 80012de:	f7ff f96f 	bl	80005c0 <pid_set_target>
        pid_set_now(&motor->PID_Omega, motor->Now_Omega);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80012ee:	eeb0 0a67 	vmov.f32	s0, s15
 80012f2:	4610      	mov	r0, r2
 80012f4:	f7ff f973 	bl	80005de <pid_set_now>
        pid_tick(&motor->PID_Omega);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	33a8      	adds	r3, #168	@ 0xa8
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f97d 	bl	80005fc <pid_tick>

        motor->Out = pid_get_out(&motor->PID_Omega);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	33a8      	adds	r3, #168	@ 0xa8
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fae6 	bl	80008d8 <pid_get_out>
 800130c:	eef0 7a40 	vmov.f32	s15, s0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        break;
 8001316:	e004      	b.n	8001322 <Motor_TIM_PID_PeriodElapsedCallback+0x17e>

    default:
        motor->Out = 0.0f;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8001320:	bf00      	nop
    }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bd90      	pop	{r4, r7, pc}
 800132a:	bf00      	nop

0800132c <Motors_Init>:


Motor_t motors[MOTOR_COUNT];

void Motors_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	@ 0x38
 8001330:	af02      	add	r7, sp, #8
    // Example CAN IDs and methods per motor
    Enum_CAN_Motor_ID motor_ids[MOTOR_COUNT] = {
 8001332:	4ab4      	ldr	r2, [pc, #720]	@ (8001604 <Motors_Init+0x2d8>)
 8001334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001338:	e892 0003 	ldmia.w	r2, {r0, r1}
 800133c:	6018      	str	r0, [r3, #0]
 800133e:	3304      	adds	r3, #4
 8001340:	8019      	strh	r1, [r3, #0]
        CAN_Motor_ID_0x205, // motor3
        CAN_Motor_ID_0x206, // motor4
        CAN_Motor_ID_0x207  // motor5
    };

    Enum_Control_Method methods[MOTOR_COUNT] = {
 8001342:	4ab1      	ldr	r2, [pc, #708]	@ (8001608 <Motors_Init+0x2dc>)
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	e892 0003 	ldmia.w	r2, {r0, r1}
 800134c:	6018      	str	r0, [r3, #0]
 800134e:	3304      	adds	r3, #4
 8001350:	8019      	strh	r1, [r3, #0]
        Control_Method_ANGLE,  // motor3
        Control_Method_ANGLE,  // motor4
        Control_Method_ANGLE   // motor5
    };

	float encoder_offsets[MOTOR_COUNT] = {
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	615a      	str	r2, [r3, #20]
		0.0f, // motor3
		0.0f, // motor4
		0.0f  // motor5
	};

    for (int i = 0; i < MOTOR_COUNT; i++) {
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001366:	e143      	b.n	80015f0 <Motors_Init+0x2c4>
        // Init motor struct
        Motor_Init(&motors[i],
 8001368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800136a:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	4aa6      	ldr	r2, [pc, #664]	@ (800160c <Motors_Init+0x2e0>)
 8001374:	1898      	adds	r0, r3, r2
 8001376:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800137a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800137c:	4413      	add	r3, r2
 800137e:	7819      	ldrb	r1, [r3, #0]
 8001380:	f107 021c 	add.w	r2, r7, #28
 8001384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001386:	4413      	add	r3, r2
 8001388:	781a      	ldrb	r2, [r3, #0]
                   motor_ids[i],
                   methods[i],
                   1.0f,                 // gearbox ratio (adjust per motor)
                   1.0f,                 // torque_max
                   400.0f,               // omega_max
                   encoder_offsets[i]);                   // encoder offset
 800138a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	3330      	adds	r3, #48	@ 0x30
 8001390:	443b      	add	r3, r7
 8001392:	3b2c      	subs	r3, #44	@ 0x2c
 8001394:	edd3 7a00 	vldr	s15, [r3]
        Motor_Init(&motors[i],
 8001398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139c:	ee17 3a90 	vmov	r3, s15
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	ed9f 1a9b 	vldr	s2, [pc, #620]	@ 8001610 <Motors_Init+0x2e4>
 80013a6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80013aa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80013ae:	4613      	mov	r3, r2
 80013b0:	460a      	mov	r2, r1
 80013b2:	4998      	ldr	r1, [pc, #608]	@ (8001614 <Motors_Init+0x2e8>)
 80013b4:	f7ff fdfd 	bl	8000fb2 <Motor_Init>

        // Angle PID
        pid_init(&motors[i].PID_Angle,
 80013b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ba:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 80013be:	fb02 f303 	mul.w	r3, r2, r3
 80013c2:	3358      	adds	r3, #88	@ 0x58
 80013c4:	4a91      	ldr	r2, [pc, #580]	@ (800160c <Motors_Init+0x2e0>)
 80013c6:	1898      	adds	r0, r3, r2
 80013c8:	4993      	ldr	r1, [pc, #588]	@ (8001618 <Motors_Init+0x2ec>)
 80013ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	015b      	lsls	r3, r3, #5
 80013d4:	440b      	add	r3, r1
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	498f      	ldr	r1, [pc, #572]	@ (8001618 <Motors_Init+0x2ec>)
 80013dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	015b      	lsls	r3, r3, #5
 80013e6:	440b      	add	r3, r1
 80013e8:	3304      	adds	r3, #4
 80013ea:	ed93 7a00 	vldr	s14, [r3]
 80013ee:	498a      	ldr	r1, [pc, #552]	@ (8001618 <Motors_Init+0x2ec>)
 80013f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	015b      	lsls	r3, r3, #5
 80013fa:	440b      	add	r3, r1
 80013fc:	3308      	adds	r3, #8
 80013fe:	edd3 6a00 	vldr	s13, [r3]
 8001402:	4985      	ldr	r1, [pc, #532]	@ (8001618 <Motors_Init+0x2ec>)
 8001404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	015b      	lsls	r3, r3, #5
 800140e:	440b      	add	r3, r1
 8001410:	330c      	adds	r3, #12
 8001412:	ed93 6a00 	vldr	s12, [r3]
 8001416:	4980      	ldr	r1, [pc, #512]	@ (8001618 <Motors_Init+0x2ec>)
 8001418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	015b      	lsls	r3, r3, #5
 8001422:	440b      	add	r3, r1
 8001424:	3310      	adds	r3, #16
 8001426:	edd3 5a00 	vldr	s11, [r3]
 800142a:	497b      	ldr	r1, [pc, #492]	@ (8001618 <Motors_Init+0x2ec>)
 800142c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	015b      	lsls	r3, r3, #5
 8001436:	440b      	add	r3, r1
 8001438:	3314      	adds	r3, #20
 800143a:	edd3 2a00 	vldr	s5, [r3]
 800143e:	4976      	ldr	r1, [pc, #472]	@ (8001618 <Motors_Init+0x2ec>)
 8001440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	015b      	lsls	r3, r3, #5
 800144a:	440b      	add	r3, r1
 800144c:	3318      	adds	r3, #24
 800144e:	ed93 3a00 	vldr	s6, [r3]
 8001452:	4971      	ldr	r1, [pc, #452]	@ (8001618 <Motors_Init+0x2ec>)
 8001454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	015b      	lsls	r3, r3, #5
 800145e:	440b      	add	r3, r1
 8001460:	331c      	adds	r3, #28
 8001462:	edd3 3a00 	vldr	s7, [r3]
 8001466:	496c      	ldr	r1, [pc, #432]	@ (8001618 <Motors_Init+0x2ec>)
 8001468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	015b      	lsls	r3, r3, #5
 8001472:	440b      	add	r3, r1
 8001474:	3320      	adds	r3, #32
 8001476:	ed93 4a00 	vldr	s8, [r3]
 800147a:	4967      	ldr	r1, [pc, #412]	@ (8001618 <Motors_Init+0x2ec>)
 800147c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	015b      	lsls	r3, r3, #5
 8001486:	440b      	add	r3, r1
 8001488:	3324      	adds	r3, #36	@ 0x24
 800148a:	edd3 4a00 	vldr	s9, [r3]
 800148e:	4962      	ldr	r1, [pc, #392]	@ (8001618 <Motors_Init+0x2ec>)
 8001490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	015b      	lsls	r3, r3, #5
 800149a:	440b      	add	r3, r1
 800149c:	3328      	adds	r3, #40	@ 0x28
 800149e:	ed93 5a00 	vldr	s10, [r3]
                 motor_pid_cfg[i].angle.dt,
                 motor_pid_cfg[i].angle.dead_zone,
                 motor_pid_cfg[i].angle.i_var_a,
                 motor_pid_cfg[i].angle.i_var_b,
                 motor_pid_cfg[i].angle.i_sep_threshold,
                 motor_pid_cfg[i].angle.d_first);
 80014a2:	495d      	ldr	r1, [pc, #372]	@ (8001618 <Motors_Init+0x2ec>)
 80014a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	015b      	lsls	r3, r3, #5
 80014ae:	440b      	add	r3, r1
 80014b0:	332c      	adds	r3, #44	@ 0x2c
 80014b2:	681b      	ldr	r3, [r3, #0]
        pid_init(&motors[i].PID_Angle,
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4619      	mov	r1, r3
 80014b8:	eeb0 2a65 	vmov.f32	s4, s11
 80014bc:	eef0 1a46 	vmov.f32	s3, s12
 80014c0:	eeb0 1a66 	vmov.f32	s2, s13
 80014c4:	eef0 0a47 	vmov.f32	s1, s14
 80014c8:	eeb0 0a67 	vmov.f32	s0, s15
 80014cc:	f7ff f812 	bl	80004f4 <pid_init>

        // Torque PID
        pid_init(&motors[i].PID_Torque,
 80014d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d2:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 80014d6:	fb02 f303 	mul.w	r3, r2, r3
 80014da:	33f8      	adds	r3, #248	@ 0xf8
 80014dc:	4a4b      	ldr	r2, [pc, #300]	@ (800160c <Motors_Init+0x2e0>)
 80014de:	1898      	adds	r0, r3, r2
 80014e0:	494d      	ldr	r1, [pc, #308]	@ (8001618 <Motors_Init+0x2ec>)
 80014e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	015b      	lsls	r3, r3, #5
 80014ec:	440b      	add	r3, r1
 80014ee:	3330      	adds	r3, #48	@ 0x30
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	4948      	ldr	r1, [pc, #288]	@ (8001618 <Motors_Init+0x2ec>)
 80014f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	015b      	lsls	r3, r3, #5
 8001500:	440b      	add	r3, r1
 8001502:	3334      	adds	r3, #52	@ 0x34
 8001504:	ed93 7a00 	vldr	s14, [r3]
 8001508:	4943      	ldr	r1, [pc, #268]	@ (8001618 <Motors_Init+0x2ec>)
 800150a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800150c:	4613      	mov	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	015b      	lsls	r3, r3, #5
 8001514:	440b      	add	r3, r1
 8001516:	3338      	adds	r3, #56	@ 0x38
 8001518:	edd3 6a00 	vldr	s13, [r3]
 800151c:	493e      	ldr	r1, [pc, #248]	@ (8001618 <Motors_Init+0x2ec>)
 800151e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	015b      	lsls	r3, r3, #5
 8001528:	440b      	add	r3, r1
 800152a:	333c      	adds	r3, #60	@ 0x3c
 800152c:	ed93 6a00 	vldr	s12, [r3]
 8001530:	4939      	ldr	r1, [pc, #228]	@ (8001618 <Motors_Init+0x2ec>)
 8001532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	015b      	lsls	r3, r3, #5
 800153c:	440b      	add	r3, r1
 800153e:	3340      	adds	r3, #64	@ 0x40
 8001540:	edd3 5a00 	vldr	s11, [r3]
 8001544:	4934      	ldr	r1, [pc, #208]	@ (8001618 <Motors_Init+0x2ec>)
 8001546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	015b      	lsls	r3, r3, #5
 8001550:	440b      	add	r3, r1
 8001552:	3344      	adds	r3, #68	@ 0x44
 8001554:	edd3 2a00 	vldr	s5, [r3]
 8001558:	492f      	ldr	r1, [pc, #188]	@ (8001618 <Motors_Init+0x2ec>)
 800155a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	015b      	lsls	r3, r3, #5
 8001564:	440b      	add	r3, r1
 8001566:	3348      	adds	r3, #72	@ 0x48
 8001568:	ed93 3a00 	vldr	s6, [r3]
 800156c:	492a      	ldr	r1, [pc, #168]	@ (8001618 <Motors_Init+0x2ec>)
 800156e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	015b      	lsls	r3, r3, #5
 8001578:	440b      	add	r3, r1
 800157a:	334c      	adds	r3, #76	@ 0x4c
 800157c:	edd3 3a00 	vldr	s7, [r3]
 8001580:	4925      	ldr	r1, [pc, #148]	@ (8001618 <Motors_Init+0x2ec>)
 8001582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	015b      	lsls	r3, r3, #5
 800158c:	440b      	add	r3, r1
 800158e:	3350      	adds	r3, #80	@ 0x50
 8001590:	ed93 4a00 	vldr	s8, [r3]
 8001594:	4920      	ldr	r1, [pc, #128]	@ (8001618 <Motors_Init+0x2ec>)
 8001596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	015b      	lsls	r3, r3, #5
 80015a0:	440b      	add	r3, r1
 80015a2:	3354      	adds	r3, #84	@ 0x54
 80015a4:	edd3 4a00 	vldr	s9, [r3]
 80015a8:	491b      	ldr	r1, [pc, #108]	@ (8001618 <Motors_Init+0x2ec>)
 80015aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	015b      	lsls	r3, r3, #5
 80015b4:	440b      	add	r3, r1
 80015b6:	3358      	adds	r3, #88	@ 0x58
 80015b8:	ed93 5a00 	vldr	s10, [r3]
                 motor_pid_cfg[i].torque.dt,
                 motor_pid_cfg[i].torque.dead_zone,
                 motor_pid_cfg[i].torque.i_var_a,
                 motor_pid_cfg[i].torque.i_var_b,
                 motor_pid_cfg[i].torque.i_sep_threshold,
                 motor_pid_cfg[i].torque.d_first);
 80015bc:	4916      	ldr	r1, [pc, #88]	@ (8001618 <Motors_Init+0x2ec>)
 80015be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	015b      	lsls	r3, r3, #5
 80015c8:	440b      	add	r3, r1
 80015ca:	335c      	adds	r3, #92	@ 0x5c
 80015cc:	681b      	ldr	r3, [r3, #0]
        pid_init(&motors[i].PID_Torque,
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	4619      	mov	r1, r3
 80015d2:	eeb0 2a65 	vmov.f32	s4, s11
 80015d6:	eef0 1a46 	vmov.f32	s3, s12
 80015da:	eeb0 1a66 	vmov.f32	s2, s13
 80015de:	eef0 0a47 	vmov.f32	s1, s14
 80015e2:	eeb0 0a67 	vmov.f32	s0, s15
 80015e6:	f7fe ff85 	bl	80004f4 <pid_init>
    for (int i = 0; i < MOTOR_COUNT; i++) {
 80015ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ec:	3301      	adds	r3, #1
 80015ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	f77f aeb8 	ble.w	8001368 <Motors_Init+0x3c>
    }
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	3730      	adds	r7, #48	@ 0x30
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	08005ad0 	.word	0x08005ad0
 8001608:	08005ad8 	.word	0x08005ad8
 800160c:	2000034c 	.word	0x2000034c
 8001610:	43c80000 	.word	0x43c80000
 8001614:	20000050 	.word	0x20000050
 8001618:	2000007c 	.word	0x2000007c

0800161c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	@ 0x28
 8001620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <MX_GPIO_Init+0xb8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a26      	ldr	r2, [pc, #152]	@ (80016d4 <MX_GPIO_Init+0xb8>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b24      	ldr	r3, [pc, #144]	@ (80016d4 <MX_GPIO_Init+0xb8>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b20      	ldr	r3, [pc, #128]	@ (80016d4 <MX_GPIO_Init+0xb8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a1f      	ldr	r2, [pc, #124]	@ (80016d4 <MX_GPIO_Init+0xb8>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <MX_GPIO_Init+0xb8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <MX_GPIO_Init+0xb8>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a18      	ldr	r2, [pc, #96]	@ (80016d4 <MX_GPIO_Init+0xb8>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <MX_GPIO_Init+0xb8>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <MX_GPIO_Init+0xb8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a11      	ldr	r2, [pc, #68]	@ (80016d4 <MX_GPIO_Init+0xb8>)
 8001690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <MX_GPIO_Init+0xb8>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80016a2:	2200      	movs	r2, #0
 80016a4:	f641 413c 	movw	r1, #7228	@ 0x1c3c
 80016a8:	480b      	ldr	r0, [pc, #44]	@ (80016d8 <MX_GPIO_Init+0xbc>)
 80016aa:	f002 f8e9 	bl	8003880 <HAL_GPIO_WritePin>
                          |LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PH2 PH3 PH4 PH5
                           LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80016ae:	f641 433c 	movw	r3, #7228	@ 0x1c3c
 80016b2:	617b      	str	r3, [r7, #20]
                          |LED_R_Pin|LED_G_Pin|LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4804      	ldr	r0, [pc, #16]	@ (80016d8 <MX_GPIO_Init+0xbc>)
 80016c8:	f001 ff3e 	bl	8003548 <HAL_GPIO_Init>

}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	@ 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40021c00 	.word	0x40021c00

080016dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e0:	f000 fb22 	bl	8001d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e4:	f000 f880 	bl	80017e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e8:	f7ff ff98 	bl	800161c <MX_GPIO_Init>
  MX_DMA_Init();
 80016ec:	f7ff fa30 	bl	8000b50 <MX_DMA_Init>
  MX_CAN1_Init();
 80016f0:	f7ff f902 	bl	80008f8 <MX_CAN1_Init>
  MX_CAN2_Init();
 80016f4:	f7ff f936 	bl	8000964 <MX_CAN2_Init>
  MX_USART2_UART_Init();
 80016f8:	f000 fa0e 	bl	8001b18 <MX_USART2_UART_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 80016fc:	4807      	ldr	r0, [pc, #28]	@ (800171c <main+0x40>)
 80016fe:	f002 fd9b 	bl	8004238 <HAL_TIM_Base_Start_IT>
  MX_TIM6_Init();
 8001702:	f000 f9ab 	bl	8001a5c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  Enable_CAN2();
 8001706:	f7ff fa4b 	bl	8000ba0 <Enable_CAN2>
  Motors_Init();
 800170a:	f7ff fe0f 	bl	800132c <Motors_Init>
  Motor_Set_Target_Angle(&motors[3], M_PI/2.0f);
 800170e:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001720 <main+0x44>
 8001712:	4804      	ldr	r0, [pc, #16]	@ (8001724 <main+0x48>)
 8001714:	f7ff fc8f 	bl	8001036 <Motor_Set_Target_Angle>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <main+0x3c>
 800171c:	20000afc 	.word	0x20000afc
 8001720:	3fc90fdb 	.word	0x3fc90fdb
 8001724:	20000724 	.word	0x20000724

08001728 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a2a      	ldr	r2, [pc, #168]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d14e      	bne.n	80017d8 <HAL_TIM_PeriodElapsedCallback+0xb0>
    {
        for (int i = 0; i < MOTOR_COUNT; i++) {
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	e00c      	b.n	800175a <HAL_TIM_PeriodElapsedCallback+0x32>
            Motor_TIM_PID_PeriodElapsedCallback(&motors[i]);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	4a26      	ldr	r2, [pc, #152]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800174c:	4413      	add	r3, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fd28 	bl	80011a4 <Motor_TIM_PID_PeriodElapsedCallback>
        for (int i = 0; i < MOTOR_COUNT; i++) {
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	3301      	adds	r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b05      	cmp	r3, #5
 800175e:	ddef      	ble.n	8001740 <HAL_TIM_PeriodElapsedCallback+0x18>
        }

        Set_C620_Current((int16_t)motors[0].Out,
 8001760:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001762:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800176a:	ee17 3a90 	vmov	r3, s15
 800176e:	b21b      	sxth	r3, r3
                         (int16_t)motors[1].Out,
 8001770:	4a1c      	ldr	r2, [pc, #112]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001772:	edd2 7a60 	vldr	s15, [r2, #384]	@ 0x180
        Set_C620_Current((int16_t)motors[0].Out,
 8001776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800177a:	ee17 2a90 	vmov	r2, s15
 800177e:	b211      	sxth	r1, r2
                         (int16_t)motors[2].Out);
 8001780:	4a18      	ldr	r2, [pc, #96]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001782:	edd2 7ab2 	vldr	s15, [r2, #712]	@ 0x2c8
        Set_C620_Current((int16_t)motors[0].Out,
 8001786:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800178a:	ee17 2a90 	vmov	r2, s15
 800178e:	b212      	sxth	r2, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fa9f 	bl	8000cd4 <Set_C620_Current>

        Set_GM6020_Voltage((int16_t)motors[3].Out,
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001798:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a4:	ee17 3a90 	vmov	r3, s15
 80017a8:	b218      	sxth	r0, r3
                           (int16_t)motors[4].Out,
 80017aa:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017ac:	f503 63ab 	add.w	r3, r3, #1368	@ 0x558
 80017b0:	edd3 7a00 	vldr	s15, [r3]
        Set_GM6020_Voltage((int16_t)motors[3].Out,
 80017b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b8:	ee17 3a90 	vmov	r3, s15
 80017bc:	b219      	sxth	r1, r3
                           (int16_t)motors[5].Out);
 80017be:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017c0:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80017c4:	edd3 7a00 	vldr	s15, [r3]
        Set_GM6020_Voltage((int16_t)motors[3].Out,
 80017c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017cc:	ee17 3a90 	vmov	r3, s15
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	f7ff fa24 	bl	8000c20 <Set_GM6020_Voltage>
    }
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40001000 	.word	0x40001000
 80017e4:	2000034c 	.word	0x2000034c

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b094      	sub	sp, #80	@ 0x50
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	2230      	movs	r2, #48	@ 0x30
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 f932 	bl	8005a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	4b28      	ldr	r3, [pc, #160]	@ (80018b4 <SystemClock_Config+0xcc>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	4a27      	ldr	r2, [pc, #156]	@ (80018b4 <SystemClock_Config+0xcc>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181a:	6413      	str	r3, [r2, #64]	@ 0x40
 800181c:	4b25      	ldr	r3, [pc, #148]	@ (80018b4 <SystemClock_Config+0xcc>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001828:	2300      	movs	r3, #0
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <SystemClock_Config+0xd0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a21      	ldr	r2, [pc, #132]	@ (80018b8 <SystemClock_Config+0xd0>)
 8001832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b1f      	ldr	r3, [pc, #124]	@ (80018b8 <SystemClock_Config+0xd0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001844:	2301      	movs	r3, #1
 8001846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001848:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184e:	2302      	movs	r3, #2
 8001850:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001852:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001858:	230c      	movs	r3, #12
 800185a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800185c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001860:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001862:	2302      	movs	r3, #2
 8001864:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001866:	2304      	movs	r3, #4
 8001868:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186a:	f107 0320 	add.w	r3, r7, #32
 800186e:	4618      	mov	r0, r3
 8001870:	f002 f83a 	bl	80038e8 <HAL_RCC_OscConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800187a:	f000 f81f 	bl	80018bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187e:	230f      	movs	r3, #15
 8001880:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001882:	2302      	movs	r3, #2
 8001884:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800188a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800188e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001894:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001896:	f107 030c 	add.w	r3, r7, #12
 800189a:	2105      	movs	r1, #5
 800189c:	4618      	mov	r0, r3
 800189e:	f002 fa9b 	bl	8003dd8 <HAL_RCC_ClockConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80018a8:	f000 f808 	bl	80018bc <Error_Handler>
  }
}
 80018ac:	bf00      	nop
 80018ae:	3750      	adds	r7, #80	@ 0x50
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40007000 	.word	0x40007000

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018c6:	4807      	ldr	r0, [pc, #28]	@ (80018e4 <Error_Handler+0x28>)
 80018c8:	f001 ffda 	bl	8003880 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80018d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018d4:	4803      	ldr	r0, [pc, #12]	@ (80018e4 <Error_Handler+0x28>)
 80018d6:	f001 ffec 	bl	80038b2 <HAL_GPIO_TogglePin>
      HAL_Delay(250); // blink every 250ms
 80018da:	20fa      	movs	r0, #250	@ 0xfa
 80018dc:	f000 fa96 	bl	8001e0c <HAL_Delay>
      HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80018e0:	bf00      	nop
 80018e2:	e7f5      	b.n	80018d0 <Error_Handler+0x14>
 80018e4:	40021c00 	.word	0x40021c00

080018e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <HAL_MspInit+0x4c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001934 <HAL_MspInit+0x4c>)
 80018f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <HAL_MspInit+0x4c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_MspInit+0x4c>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	4a08      	ldr	r2, [pc, #32]	@ (8001934 <HAL_MspInit+0x4c>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001918:	6413      	str	r3, [r2, #64]	@ 0x40
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_MspInit+0x4c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <NMI_Handler+0x4>

08001940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <MemManage_Handler+0x4>

08001950 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <UsageFault_Handler+0x4>

08001960 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198e:	f000 fa1d 	bl	8001dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <DMA1_Stream5_IRQHandler+0x10>)
 800199e:	f001 fb69 	bl	8003074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000b8c 	.word	0x20000b8c

080019ac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <DMA1_Stream6_IRQHandler+0x10>)
 80019b2:	f001 fb5f 	bl	8003074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000bec 	.word	0x20000bec

080019c0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <CAN1_RX0_IRQHandler+0x10>)
 80019c6:	f000 fe7b 	bl	80026c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000028 	.word	0x20000028

080019d4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019d8:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <CAN1_RX1_IRQHandler+0x10>)
 80019da:	f000 fe71 	bl	80026c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000028 	.word	0x20000028

080019e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019ec:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <USART2_IRQHandler+0x10>)
 80019ee:	f002 ff8b 	bl	8004908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000b44 	.word	0x20000b44

080019fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <TIM6_DAC_IRQHandler+0x10>)
 8001a02:	f002 fc89 	bl	8004318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000afc 	.word	0x20000afc

08001a10 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <CAN2_RX0_IRQHandler+0x10>)
 8001a16:	f000 fe53 	bl	80026c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000050 	.word	0x20000050

08001a24 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <CAN2_RX1_IRQHandler+0x10>)
 8001a2a:	f000 fe49 	bl	80026c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000050 	.word	0x20000050

08001a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <SystemInit+0x20>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a42:	4a05      	ldr	r2, [pc, #20]	@ (8001a58 <SystemInit+0x20>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a62:	463b      	mov	r3, r7
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <MX_TIM6_Init+0x64>)
 8001a6c:	4a15      	ldr	r2, [pc, #84]	@ (8001ac4 <MX_TIM6_Init+0x68>)
 8001a6e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <MX_TIM6_Init+0x64>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <MX_TIM6_Init+0x64>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001a7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <MX_TIM6_Init+0x64>)
 8001a7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a82:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a84:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <MX_TIM6_Init+0x64>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a8a:	480d      	ldr	r0, [pc, #52]	@ (8001ac0 <MX_TIM6_Init+0x64>)
 8001a8c:	f002 fb84 	bl	8004198 <HAL_TIM_Base_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001a96:	f7ff ff11 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	@ (8001ac0 <MX_TIM6_Init+0x64>)
 8001aa8:	f002 fdf4 	bl	8004694 <HAL_TIMEx_MasterConfigSynchronization>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001ab2:	f7ff ff03 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000afc 	.word	0x20000afc
 8001ac4:	40001000 	.word	0x40001000

08001ac8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0e      	ldr	r2, [pc, #56]	@ (8001b10 <HAL_TIM_Base_MspInit+0x48>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d115      	bne.n	8001b06 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b0d      	ldr	r3, [pc, #52]	@ (8001b14 <HAL_TIM_Base_MspInit+0x4c>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8001b14 <HAL_TIM_Base_MspInit+0x4c>)
 8001ae4:	f043 0310 	orr.w	r3, r3, #16
 8001ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <HAL_TIM_Base_MspInit+0x4c>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	2036      	movs	r0, #54	@ 0x36
 8001afc:	f001 f8eb 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b00:	2036      	movs	r0, #54	@ 0x36
 8001b02:	f001 f904 	bl	8002d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40001000 	.word	0x40001000
 8001b14:	40023800 	.word	0x40023800

08001b18 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <MX_USART2_UART_Init+0x50>)
 8001b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b3e:	220c      	movs	r2, #12
 8001b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b4e:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b50:	f002 fe30 	bl	80047b4 <HAL_UART_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b5a:	f7ff feaf 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000b44 	.word	0x20000b44
 8001b68:	40004400 	.word	0x40004400

08001b6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a4b      	ldr	r2, [pc, #300]	@ (8001cb8 <HAL_UART_MspInit+0x14c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	f040 8090 	bne.w	8001cb0 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	4b49      	ldr	r3, [pc, #292]	@ (8001cbc <HAL_UART_MspInit+0x150>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	4a48      	ldr	r2, [pc, #288]	@ (8001cbc <HAL_UART_MspInit+0x150>)
 8001b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba0:	4b46      	ldr	r3, [pc, #280]	@ (8001cbc <HAL_UART_MspInit+0x150>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	4b42      	ldr	r3, [pc, #264]	@ (8001cbc <HAL_UART_MspInit+0x150>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb4:	4a41      	ldr	r2, [pc, #260]	@ (8001cbc <HAL_UART_MspInit+0x150>)
 8001bb6:	f043 0308 	orr.w	r3, r3, #8
 8001bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8001cbc <HAL_UART_MspInit+0x150>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001bc8:	2360      	movs	r3, #96	@ 0x60
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bd8:	2307      	movs	r3, #7
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	4837      	ldr	r0, [pc, #220]	@ (8001cc0 <HAL_UART_MspInit+0x154>)
 8001be4:	f001 fcb0 	bl	8003548 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001be8:	4b36      	ldr	r3, [pc, #216]	@ (8001cc4 <HAL_UART_MspInit+0x158>)
 8001bea:	4a37      	ldr	r2, [pc, #220]	@ (8001cc8 <HAL_UART_MspInit+0x15c>)
 8001bec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001bee:	4b35      	ldr	r3, [pc, #212]	@ (8001cc4 <HAL_UART_MspInit+0x158>)
 8001bf0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bf4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf6:	4b33      	ldr	r3, [pc, #204]	@ (8001cc4 <HAL_UART_MspInit+0x158>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfc:	4b31      	ldr	r3, [pc, #196]	@ (8001cc4 <HAL_UART_MspInit+0x158>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c02:	4b30      	ldr	r3, [pc, #192]	@ (8001cc4 <HAL_UART_MspInit+0x158>)
 8001c04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c08:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc4 <HAL_UART_MspInit+0x158>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c10:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc4 <HAL_UART_MspInit+0x158>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c16:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc4 <HAL_UART_MspInit+0x158>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c1c:	4b29      	ldr	r3, [pc, #164]	@ (8001cc4 <HAL_UART_MspInit+0x158>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c22:	4b28      	ldr	r3, [pc, #160]	@ (8001cc4 <HAL_UART_MspInit+0x158>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c28:	4826      	ldr	r0, [pc, #152]	@ (8001cc4 <HAL_UART_MspInit+0x158>)
 8001c2a:	f001 f88b 	bl	8002d44 <HAL_DMA_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001c34:	f7ff fe42 	bl	80018bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a22      	ldr	r2, [pc, #136]	@ (8001cc4 <HAL_UART_MspInit+0x158>)
 8001c3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c3e:	4a21      	ldr	r2, [pc, #132]	@ (8001cc4 <HAL_UART_MspInit+0x158>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001c44:	4b21      	ldr	r3, [pc, #132]	@ (8001ccc <HAL_UART_MspInit+0x160>)
 8001c46:	4a22      	ldr	r2, [pc, #136]	@ (8001cd0 <HAL_UART_MspInit+0x164>)
 8001c48:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001c4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <HAL_UART_MspInit+0x160>)
 8001c4c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c50:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c52:	4b1e      	ldr	r3, [pc, #120]	@ (8001ccc <HAL_UART_MspInit+0x160>)
 8001c54:	2240      	movs	r2, #64	@ 0x40
 8001c56:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c58:	4b1c      	ldr	r3, [pc, #112]	@ (8001ccc <HAL_UART_MspInit+0x160>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <HAL_UART_MspInit+0x160>)
 8001c60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c64:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c66:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <HAL_UART_MspInit+0x160>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <HAL_UART_MspInit+0x160>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c72:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <HAL_UART_MspInit+0x160>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c78:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <HAL_UART_MspInit+0x160>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c7e:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <HAL_UART_MspInit+0x160>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c84:	4811      	ldr	r0, [pc, #68]	@ (8001ccc <HAL_UART_MspInit+0x160>)
 8001c86:	f001 f85d 	bl	8002d44 <HAL_DMA_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001c90:	f7ff fe14 	bl	80018bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a0d      	ldr	r2, [pc, #52]	@ (8001ccc <HAL_UART_MspInit+0x160>)
 8001c98:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001ccc <HAL_UART_MspInit+0x160>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2026      	movs	r0, #38	@ 0x26
 8001ca6:	f001 f816 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001caa:	2026      	movs	r0, #38	@ 0x26
 8001cac:	f001 f82f 	bl	8002d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	@ 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40004400 	.word	0x40004400
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	20000b8c 	.word	0x20000b8c
 8001cc8:	40026088 	.word	0x40026088
 8001ccc:	20000bec 	.word	0x20000bec
 8001cd0:	400260a0 	.word	0x400260a0

08001cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cd8:	f7ff feae 	bl	8001a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cdc:	480c      	ldr	r0, [pc, #48]	@ (8001d10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cde:	490d      	ldr	r1, [pc, #52]	@ (8001d14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce4:	e002      	b.n	8001cec <LoopCopyDataInit>

08001ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cea:	3304      	adds	r3, #4

08001cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf0:	d3f9      	bcc.n	8001ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cf4:	4c0a      	ldr	r4, [pc, #40]	@ (8001d20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf8:	e001      	b.n	8001cfe <LoopFillZerobss>

08001cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cfc:	3204      	adds	r2, #4

08001cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d00:	d3fb      	bcc.n	8001cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d02:	f003 feb5 	bl	8005a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d06:	f7ff fce9 	bl	80016dc <main>
  bx  lr    
 8001d0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d18:	08005b10 	.word	0x08005b10
  ldr r2, =_sbss
 8001d1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d20:	20000c50 	.word	0x20000c50

08001d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC_IRQHandler>
	...

08001d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0d      	ldr	r2, [pc, #52]	@ (8001d68 <HAL_Init+0x40>)
 8001d32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d68 <HAL_Init+0x40>)
 8001d3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d44:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <HAL_Init+0x40>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a07      	ldr	r2, [pc, #28]	@ (8001d68 <HAL_Init+0x40>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d50:	2003      	movs	r0, #3
 8001d52:	f000 ffb5 	bl	8002cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d56:	200f      	movs	r0, #15
 8001d58:	f000 f808 	bl	8001d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d5c:	f7ff fdc4 	bl	80018e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023c00 	.word	0x40023c00

08001d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d74:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <HAL_InitTick+0x54>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_InitTick+0x58>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 ffcd 	bl	8002d2a <HAL_SYSTICK_Config>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00e      	b.n	8001db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b0f      	cmp	r3, #15
 8001d9e:	d80a      	bhi.n	8001db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da0:	2200      	movs	r2, #0
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295
 8001da8:	f000 ff95 	bl	8002cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dac:	4a06      	ldr	r2, [pc, #24]	@ (8001dc8 <HAL_InitTick+0x5c>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e000      	b.n	8001db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	20000004 	.word	0x20000004

08001dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <HAL_IncTick+0x20>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_IncTick+0x24>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a04      	ldr	r2, [pc, #16]	@ (8001df0 <HAL_IncTick+0x24>)
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000008 	.word	0x20000008
 8001df0:	20000c4c 	.word	0x20000c4c

08001df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return uwTick;
 8001df8:	4b03      	ldr	r3, [pc, #12]	@ (8001e08 <HAL_GetTick+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000c4c 	.word	0x20000c4c

08001e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff ffee 	bl	8001df4 <HAL_GetTick>
 8001e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d005      	beq.n	8001e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e26:	4b0a      	ldr	r3, [pc, #40]	@ (8001e50 <HAL_Delay+0x44>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e32:	bf00      	nop
 8001e34:	f7ff ffde 	bl	8001df4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d8f7      	bhi.n	8001e34 <HAL_Delay+0x28>
  {
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000008 	.word	0x20000008

08001e54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0ed      	b.n	8002042 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe fdac 	bl	80009d0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e88:	f7ff ffb4 	bl	8001df4 <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e8e:	e012      	b.n	8001eb6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e90:	f7ff ffb0 	bl	8001df4 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b0a      	cmp	r3, #10
 8001e9c:	d90b      	bls.n	8001eb6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2205      	movs	r2, #5
 8001eae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e0c5      	b.n	8002042 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0e5      	beq.n	8001e90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0202 	bic.w	r2, r2, #2
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ed4:	f7ff ff8e 	bl	8001df4 <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001eda:	e012      	b.n	8001f02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001edc:	f7ff ff8a 	bl	8001df4 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b0a      	cmp	r3, #10
 8001ee8:	d90b      	bls.n	8001f02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2205      	movs	r2, #5
 8001efa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e09f      	b.n	8002042 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1e5      	bne.n	8001edc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7e1b      	ldrb	r3, [r3, #24]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d108      	bne.n	8001f2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e007      	b.n	8001f3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7e5b      	ldrb	r3, [r3, #25]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d108      	bne.n	8001f54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	e007      	b.n	8001f64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7e9b      	ldrb	r3, [r3, #26]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d108      	bne.n	8001f7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0220 	orr.w	r2, r2, #32
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	e007      	b.n	8001f8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0220 	bic.w	r2, r2, #32
 8001f8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7edb      	ldrb	r3, [r3, #27]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d108      	bne.n	8001fa8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0210 	bic.w	r2, r2, #16
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	e007      	b.n	8001fb8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0210 	orr.w	r2, r2, #16
 8001fb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7f1b      	ldrb	r3, [r3, #28]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d108      	bne.n	8001fd2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0208 	orr.w	r2, r2, #8
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	e007      	b.n	8001fe2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0208 	bic.w	r2, r2, #8
 8001fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	7f5b      	ldrb	r3, [r3, #29]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d108      	bne.n	8001ffc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0204 	orr.w	r2, r2, #4
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e007      	b.n	800200c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0204 	bic.w	r2, r2, #4
 800200a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	ea42 0103 	orr.w	r1, r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	1e5a      	subs	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800205c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 800205e:	7dfb      	ldrb	r3, [r7, #23]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d003      	beq.n	800206c <HAL_CAN_ConfigFilter+0x20>
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b02      	cmp	r3, #2
 8002068:	f040 80be 	bne.w	80021e8 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800206c:	4b65      	ldr	r3, [pc, #404]	@ (8002204 <HAL_CAN_ConfigFilter+0x1b8>)
 800206e:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002086:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	431a      	orrs	r2, r3
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	2201      	movs	r2, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	43db      	mvns	r3, r3
 80020be:	401a      	ands	r2, r3
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d123      	bne.n	8002116 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	401a      	ands	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	3248      	adds	r2, #72	@ 0x48
 80020f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800210a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800210c:	6939      	ldr	r1, [r7, #16]
 800210e:	3348      	adds	r3, #72	@ 0x48
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	440b      	add	r3, r1
 8002114:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d122      	bne.n	8002164 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	431a      	orrs	r2, r3
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800213e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	3248      	adds	r2, #72	@ 0x48
 8002144:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002158:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800215a:	6939      	ldr	r1, [r7, #16]
 800215c:	3348      	adds	r3, #72	@ 0x48
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d109      	bne.n	8002180 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	43db      	mvns	r3, r3
 8002176:	401a      	ands	r2, r3
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800217e:	e007      	b.n	8002190 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	431a      	orrs	r2, r3
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	401a      	ands	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80021aa:	e007      	b.n	80021bc <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021da:	f023 0201 	bic.w	r2, r3, #1
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e006      	b.n	80021f6 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
  }
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40006400 	.word	0x40006400

08002208 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d12e      	bne.n	800227a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002234:	f7ff fdde 	bl	8001df4 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800223a:	e012      	b.n	8002262 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800223c:	f7ff fdda 	bl	8001df4 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b0a      	cmp	r3, #10
 8002248:	d90b      	bls.n	8002262 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2205      	movs	r2, #5
 800225a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e012      	b.n	8002288 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1e5      	bne.n	800223c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e006      	b.n	8002288 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
  }
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	@ 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80022ae:	7ffb      	ldrb	r3, [r7, #31]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d003      	beq.n	80022bc <HAL_CAN_AddTxMessage+0x2c>
 80022b4:	7ffb      	ldrb	r3, [r7, #31]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	f040 80ad 	bne.w	8002416 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10a      	bne.n	80022dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8095 	beq.w	8002406 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	0e1b      	lsrs	r3, r3, #24
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80022e6:	2201      	movs	r2, #1
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	409a      	lsls	r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10d      	bne.n	8002314 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002302:	68f9      	ldr	r1, [r7, #12]
 8002304:	6809      	ldr	r1, [r1, #0]
 8002306:	431a      	orrs	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3318      	adds	r3, #24
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	440b      	add	r3, r1
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	e00f      	b.n	8002334 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800231e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002324:	68f9      	ldr	r1, [r7, #12]
 8002326:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002328:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3318      	adds	r3, #24
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	440b      	add	r3, r1
 8002332:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6819      	ldr	r1, [r3, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	3318      	adds	r3, #24
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	440b      	add	r3, r1
 8002344:	3304      	adds	r3, #4
 8002346:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	7d1b      	ldrb	r3, [r3, #20]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d111      	bne.n	8002374 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3318      	adds	r3, #24
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	4413      	add	r3, r2
 800235c:	3304      	adds	r3, #4
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	6811      	ldr	r1, [r2, #0]
 8002364:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	3318      	adds	r3, #24
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	440b      	add	r3, r1
 8002370:	3304      	adds	r3, #4
 8002372:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3307      	adds	r3, #7
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	061a      	lsls	r2, r3, #24
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3306      	adds	r3, #6
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3305      	adds	r3, #5
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	4313      	orrs	r3, r2
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	3204      	adds	r2, #4
 8002394:	7812      	ldrb	r2, [r2, #0]
 8002396:	4610      	mov	r0, r2
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	6811      	ldr	r1, [r2, #0]
 800239c:	ea43 0200 	orr.w	r2, r3, r0
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	440b      	add	r3, r1
 80023a6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80023aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3303      	adds	r3, #3
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	061a      	lsls	r2, r3, #24
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3302      	adds	r3, #2
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	041b      	lsls	r3, r3, #16
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3301      	adds	r3, #1
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	4313      	orrs	r3, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	7812      	ldrb	r2, [r2, #0]
 80023cc:	4610      	mov	r0, r2
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	6811      	ldr	r1, [r2, #0]
 80023d2:	ea43 0200 	orr.w	r2, r3, r0
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	440b      	add	r3, r1
 80023dc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80023e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	3318      	adds	r3, #24
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	4413      	add	r3, r2
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	6811      	ldr	r1, [r2, #0]
 80023f4:	f043 0201 	orr.w	r2, r3, #1
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	3318      	adds	r3, #24
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	440b      	add	r3, r1
 8002400:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e00e      	b.n	8002424 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e006      	b.n	8002424 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	3724      	adds	r7, #36	@ 0x24
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002444:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002446:	7dfb      	ldrb	r3, [r7, #23]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d003      	beq.n	8002454 <HAL_CAN_GetRxMessage+0x24>
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	2b02      	cmp	r3, #2
 8002450:	f040 8103 	bne.w	800265a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10e      	bne.n	8002478 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d116      	bne.n	8002496 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0f7      	b.n	8002668 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d107      	bne.n	8002496 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0e8      	b.n	8002668 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	331b      	adds	r3, #27
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	4413      	add	r3, r2
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0204 	and.w	r2, r3, #4
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10c      	bne.n	80024ce <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	331b      	adds	r3, #27
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	4413      	add	r3, r2
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	0d5b      	lsrs	r3, r3, #21
 80024c4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e00b      	b.n	80024e6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	331b      	adds	r3, #27
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	4413      	add	r3, r2
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	08db      	lsrs	r3, r3, #3
 80024de:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	331b      	adds	r3, #27
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	4413      	add	r3, r2
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0202 	and.w	r2, r3, #2
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	331b      	adds	r3, #27
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	4413      	add	r3, r2
 8002508:	3304      	adds	r3, #4
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2208      	movs	r2, #8
 8002518:	611a      	str	r2, [r3, #16]
 800251a:	e00b      	b.n	8002534 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	331b      	adds	r3, #27
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	4413      	add	r3, r2
 8002528:	3304      	adds	r3, #4
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 020f 	and.w	r2, r3, #15
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	331b      	adds	r3, #27
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	4413      	add	r3, r2
 8002540:	3304      	adds	r3, #4
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	b2da      	uxtb	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	331b      	adds	r3, #27
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	4413      	add	r3, r2
 8002558:	3304      	adds	r3, #4
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0c1b      	lsrs	r3, r3, #16
 800255e:	b29a      	uxth	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	4413      	add	r3, r2
 800256e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	4413      	add	r3, r2
 8002584:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	0a1a      	lsrs	r2, r3, #8
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	3301      	adds	r3, #1
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	4413      	add	r3, r2
 800259e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0c1a      	lsrs	r2, r3, #16
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	3302      	adds	r3, #2
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	0e1a      	lsrs	r2, r3, #24
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	3303      	adds	r3, #3
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	3304      	adds	r3, #4
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0a1a      	lsrs	r2, r3, #8
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	3305      	adds	r3, #5
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	4413      	add	r3, r2
 8002604:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	0c1a      	lsrs	r2, r3, #16
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	3306      	adds	r3, #6
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	4413      	add	r3, r2
 800261e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	0e1a      	lsrs	r2, r3, #24
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	3307      	adds	r3, #7
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d108      	bne.n	8002646 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0220 	orr.w	r2, r2, #32
 8002642:	60da      	str	r2, [r3, #12]
 8002644:	e007      	b.n	8002656 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0220 	orr.w	r2, r2, #32
 8002654:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	e006      	b.n	8002668 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002684:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d002      	beq.n	8002692 <HAL_CAN_ActivateNotification+0x1e>
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d109      	bne.n	80026a6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6959      	ldr	r1, [r3, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e006      	b.n	80026b4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
  }
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	@ 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d07c      	beq.n	8002800 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d023      	beq.n	8002758 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2201      	movs	r2, #1
 8002716:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f983 	bl	8002a2e <HAL_CAN_TxMailbox0CompleteCallback>
 8002728:	e016      	b.n	8002758 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800273a:	627b      	str	r3, [r7, #36]	@ 0x24
 800273c:	e00c      	b.n	8002758 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002750:	e002      	b.n	8002758 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f989 	bl	8002a6a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d024      	beq.n	80027ac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800276a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f963 	bl	8002a42 <HAL_CAN_TxMailbox1CompleteCallback>
 800277c:	e016      	b.n	80027ac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002784:	2b00      	cmp	r3, #0
 8002786:	d004      	beq.n	8002792 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002790:	e00c      	b.n	80027ac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800279c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80027a4:	e002      	b.n	80027ac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f969 	bl	8002a7e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d024      	beq.n	8002800 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f943 	bl	8002a56 <HAL_CAN_TxMailbox2CompleteCallback>
 80027d0:	e016      	b.n	8002800 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d004      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e4:	e00c      	b.n	8002800 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d004      	beq.n	80027fa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f8:	e002      	b.n	8002800 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f949 	bl	8002a92 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00c      	beq.n	8002824 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	d007      	beq.n	8002824 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2210      	movs	r2, #16
 8002822:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2208      	movs	r2, #8
 800283e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f930 	bl	8002aa6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d009      	beq.n	8002864 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fe faca 	bl	8000df8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00c      	beq.n	8002888 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	d007      	beq.n	8002888 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2210      	movs	r2, #16
 8002886:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d006      	beq.n	80028aa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2208      	movs	r2, #8
 80028a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f912 	bl	8002ace <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d009      	beq.n	80028c8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f8f9 	bl	8002aba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00b      	beq.n	80028ea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d006      	beq.n	80028ea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2210      	movs	r2, #16
 80028e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f8fc 	bl	8002ae2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00b      	beq.n	800290c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2208      	movs	r2, #8
 8002904:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f8f5 	bl	8002af6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d07b      	beq.n	8002a0e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d072      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002942:	2b00      	cmp	r3, #0
 8002944:	d008      	beq.n	8002958 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002952:	f043 0302 	orr.w	r3, r3, #2
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295e:	2b00      	cmp	r3, #0
 8002960:	d008      	beq.n	8002974 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800297a:	2b00      	cmp	r3, #0
 800297c:	d043      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002984:	2b00      	cmp	r3, #0
 8002986:	d03e      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800298e:	2b60      	cmp	r3, #96	@ 0x60
 8002990:	d02b      	beq.n	80029ea <HAL_CAN_IRQHandler+0x32a>
 8002992:	2b60      	cmp	r3, #96	@ 0x60
 8002994:	d82e      	bhi.n	80029f4 <HAL_CAN_IRQHandler+0x334>
 8002996:	2b50      	cmp	r3, #80	@ 0x50
 8002998:	d022      	beq.n	80029e0 <HAL_CAN_IRQHandler+0x320>
 800299a:	2b50      	cmp	r3, #80	@ 0x50
 800299c:	d82a      	bhi.n	80029f4 <HAL_CAN_IRQHandler+0x334>
 800299e:	2b40      	cmp	r3, #64	@ 0x40
 80029a0:	d019      	beq.n	80029d6 <HAL_CAN_IRQHandler+0x316>
 80029a2:	2b40      	cmp	r3, #64	@ 0x40
 80029a4:	d826      	bhi.n	80029f4 <HAL_CAN_IRQHandler+0x334>
 80029a6:	2b30      	cmp	r3, #48	@ 0x30
 80029a8:	d010      	beq.n	80029cc <HAL_CAN_IRQHandler+0x30c>
 80029aa:	2b30      	cmp	r3, #48	@ 0x30
 80029ac:	d822      	bhi.n	80029f4 <HAL_CAN_IRQHandler+0x334>
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	d002      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x2f8>
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d005      	beq.n	80029c2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80029b6:	e01d      	b.n	80029f4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ba:	f043 0308 	orr.w	r3, r3, #8
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029c0:	e019      	b.n	80029f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	f043 0310 	orr.w	r3, r3, #16
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029ca:	e014      	b.n	80029f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	f043 0320 	orr.w	r3, r3, #32
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029d4:	e00f      	b.n	80029f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029de:	e00a      	b.n	80029f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029e8:	e005      	b.n	80029f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029f2:	e000      	b.n	80029f6 <HAL_CAN_IRQHandler+0x336>
            break;
 80029f4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699a      	ldr	r2, [r3, #24]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002a04:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f872 	bl	8002b0a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a26:	bf00      	nop
 8002a28:	3728      	adds	r7, #40	@ 0x28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b30:	4b0c      	ldr	r3, [pc, #48]	@ (8002b64 <__NVIC_SetPriorityGrouping+0x44>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b52:	4a04      	ldr	r2, [pc, #16]	@ (8002b64 <__NVIC_SetPriorityGrouping+0x44>)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	60d3      	str	r3, [r2, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b6c:	4b04      	ldr	r3, [pc, #16]	@ (8002b80 <__NVIC_GetPriorityGrouping+0x18>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	f003 0307 	and.w	r3, r3, #7
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	db0b      	blt.n	8002bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	f003 021f 	and.w	r2, r3, #31
 8002b9c:	4907      	ldr	r1, [pc, #28]	@ (8002bbc <__NVIC_EnableIRQ+0x38>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8002baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000e100 	.word	0xe000e100

08002bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	db0a      	blt.n	8002bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	490c      	ldr	r1, [pc, #48]	@ (8002c0c <__NVIC_SetPriority+0x4c>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	0112      	lsls	r2, r2, #4
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	440b      	add	r3, r1
 8002be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be8:	e00a      	b.n	8002c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4908      	ldr	r1, [pc, #32]	@ (8002c10 <__NVIC_SetPriority+0x50>)
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	3b04      	subs	r3, #4
 8002bf8:	0112      	lsls	r2, r2, #4
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	761a      	strb	r2, [r3, #24]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000e100 	.word	0xe000e100
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	@ 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f1c3 0307 	rsb	r3, r3, #7
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	bf28      	it	cs
 8002c32:	2304      	movcs	r3, #4
 8002c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d902      	bls.n	8002c44 <NVIC_EncodePriority+0x30>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3b03      	subs	r3, #3
 8002c42:	e000      	b.n	8002c46 <NVIC_EncodePriority+0x32>
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	401a      	ands	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43d9      	mvns	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	4313      	orrs	r3, r2
         );
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	@ 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c8c:	d301      	bcc.n	8002c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00f      	b.n	8002cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c92:	4a0a      	ldr	r2, [pc, #40]	@ (8002cbc <SysTick_Config+0x40>)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c9a:	210f      	movs	r1, #15
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	f7ff ff8e 	bl	8002bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca4:	4b05      	ldr	r3, [pc, #20]	@ (8002cbc <SysTick_Config+0x40>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002caa:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <SysTick_Config+0x40>)
 8002cac:	2207      	movs	r2, #7
 8002cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	e000e010 	.word	0xe000e010

08002cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ff29 	bl	8002b20 <__NVIC_SetPriorityGrouping>
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce8:	f7ff ff3e 	bl	8002b68 <__NVIC_GetPriorityGrouping>
 8002cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	6978      	ldr	r0, [r7, #20]
 8002cf4:	f7ff ff8e 	bl	8002c14 <NVIC_EncodePriority>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff5d 	bl	8002bc0 <__NVIC_SetPriority>
}
 8002d06:	bf00      	nop
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff31 	bl	8002b84 <__NVIC_EnableIRQ>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff ffa2 	bl	8002c7c <SysTick_Config>
 8002d38:	4603      	mov	r3, r0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d50:	f7ff f850 	bl	8001df4 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e099      	b.n	8002e94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d80:	e00f      	b.n	8002da2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d82:	f7ff f837 	bl	8001df4 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b05      	cmp	r3, #5
 8002d8e:	d908      	bls.n	8002da2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2203      	movs	r2, #3
 8002d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e078      	b.n	8002e94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e8      	bne.n	8002d82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4b38      	ldr	r3, [pc, #224]	@ (8002e9c <HAL_DMA_Init+0x158>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d107      	bne.n	8002e0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e04:	4313      	orrs	r3, r2
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f023 0307 	bic.w	r3, r3, #7
 8002e22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d117      	bne.n	8002e66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00e      	beq.n	8002e66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fb01 	bl	8003450 <DMA_CheckFifoParam>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2240      	movs	r2, #64	@ 0x40
 8002e58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e62:	2301      	movs	r3, #1
 8002e64:	e016      	b.n	8002e94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fab8 	bl	80033e4 <DMA_CalcBaseAndBitshift>
 8002e74:	4603      	mov	r3, r0
 8002e76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7c:	223f      	movs	r2, #63	@ 0x3f
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	f010803f 	.word	0xf010803f

08002ea0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_DMA_Start_IT+0x26>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e040      	b.n	8002f48 <HAL_DMA_Start_IT+0xa8>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d12f      	bne.n	8002f3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2202      	movs	r2, #2
 8002ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 fa4a 	bl	8003388 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef8:	223f      	movs	r2, #63	@ 0x3f
 8002efa:	409a      	lsls	r2, r3
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0216 	orr.w	r2, r2, #22
 8002f0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0208 	orr.w	r2, r2, #8
 8002f26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	e005      	b.n	8002f46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f42:	2302      	movs	r3, #2
 8002f44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f5e:	f7fe ff49 	bl	8001df4 <HAL_GetTick>
 8002f62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d008      	beq.n	8002f82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2280      	movs	r2, #128	@ 0x80
 8002f74:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e052      	b.n	8003028 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0216 	bic.w	r2, r2, #22
 8002f90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fa0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d103      	bne.n	8002fb2 <HAL_DMA_Abort+0x62>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0208 	bic.w	r2, r2, #8
 8002fc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fd2:	e013      	b.n	8002ffc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fd4:	f7fe ff0e 	bl	8001df4 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d90c      	bls.n	8002ffc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2203      	movs	r2, #3
 8002fec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e015      	b.n	8003028 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e4      	bne.n	8002fd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300e:	223f      	movs	r2, #63	@ 0x3f
 8003010:	409a      	lsls	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d004      	beq.n	800304e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2280      	movs	r2, #128	@ 0x80
 8003048:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e00c      	b.n	8003068 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2205      	movs	r2, #5
 8003052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0201 	bic.w	r2, r2, #1
 8003064:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003080:	4b8e      	ldr	r3, [pc, #568]	@ (80032bc <HAL_DMA_IRQHandler+0x248>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a8e      	ldr	r2, [pc, #568]	@ (80032c0 <HAL_DMA_IRQHandler+0x24c>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	0a9b      	lsrs	r3, r3, #10
 800308c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309e:	2208      	movs	r2, #8
 80030a0:	409a      	lsls	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d01a      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0204 	bic.w	r2, r2, #4
 80030c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030cc:	2208      	movs	r2, #8
 80030ce:	409a      	lsls	r2, r3
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d8:	f043 0201 	orr.w	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e4:	2201      	movs	r2, #1
 80030e6:	409a      	lsls	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d012      	beq.n	8003116 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003102:	2201      	movs	r2, #1
 8003104:	409a      	lsls	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310e:	f043 0202 	orr.w	r2, r3, #2
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311a:	2204      	movs	r2, #4
 800311c:	409a      	lsls	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4013      	ands	r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d012      	beq.n	800314c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00b      	beq.n	800314c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003138:	2204      	movs	r2, #4
 800313a:	409a      	lsls	r2, r3
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003144:	f043 0204 	orr.w	r2, r3, #4
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003150:	2210      	movs	r2, #16
 8003152:	409a      	lsls	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4013      	ands	r3, r2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d043      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d03c      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316e:	2210      	movs	r2, #16
 8003170:	409a      	lsls	r2, r3
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d018      	beq.n	80031b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d108      	bne.n	80031a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d024      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	4798      	blx	r3
 80031a2:	e01f      	b.n	80031e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01b      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4798      	blx	r3
 80031b4:	e016      	b.n	80031e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d107      	bne.n	80031d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0208 	bic.w	r2, r2, #8
 80031d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e8:	2220      	movs	r2, #32
 80031ea:	409a      	lsls	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 808f 	beq.w	8003314 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8087 	beq.w	8003314 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320a:	2220      	movs	r2, #32
 800320c:	409a      	lsls	r2, r3
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b05      	cmp	r3, #5
 800321c:	d136      	bne.n	800328c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0216 	bic.w	r2, r2, #22
 800322c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800323c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d103      	bne.n	800324e <HAL_DMA_IRQHandler+0x1da>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800324a:	2b00      	cmp	r3, #0
 800324c:	d007      	beq.n	800325e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0208 	bic.w	r2, r2, #8
 800325c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003262:	223f      	movs	r2, #63	@ 0x3f
 8003264:	409a      	lsls	r2, r3
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800327e:	2b00      	cmp	r3, #0
 8003280:	d07e      	beq.n	8003380 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	4798      	blx	r3
        }
        return;
 800328a:	e079      	b.n	8003380 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01d      	beq.n	80032d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10d      	bne.n	80032c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d031      	beq.n	8003314 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4798      	blx	r3
 80032b8:	e02c      	b.n	8003314 <HAL_DMA_IRQHandler+0x2a0>
 80032ba:	bf00      	nop
 80032bc:	20000000 	.word	0x20000000
 80032c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d023      	beq.n	8003314 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	4798      	blx	r3
 80032d4:	e01e      	b.n	8003314 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10f      	bne.n	8003304 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0210 	bic.w	r2, r2, #16
 80032f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003318:	2b00      	cmp	r3, #0
 800331a:	d032      	beq.n	8003382 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d022      	beq.n	800336e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2205      	movs	r2, #5
 800332c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	3301      	adds	r3, #1
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	429a      	cmp	r2, r3
 800334a:	d307      	bcc.n	800335c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f2      	bne.n	8003340 <HAL_DMA_IRQHandler+0x2cc>
 800335a:	e000      	b.n	800335e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800335c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	4798      	blx	r3
 800337e:	e000      	b.n	8003382 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003380:	bf00      	nop
    }
  }
}
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b40      	cmp	r3, #64	@ 0x40
 80033b4:	d108      	bne.n	80033c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033c6:	e007      	b.n	80033d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	60da      	str	r2, [r3, #12]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	3b10      	subs	r3, #16
 80033f4:	4a14      	ldr	r2, [pc, #80]	@ (8003448 <DMA_CalcBaseAndBitshift+0x64>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033fe:	4a13      	ldr	r2, [pc, #76]	@ (800344c <DMA_CalcBaseAndBitshift+0x68>)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d909      	bls.n	8003426 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800341a:	f023 0303 	bic.w	r3, r3, #3
 800341e:	1d1a      	adds	r2, r3, #4
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	659a      	str	r2, [r3, #88]	@ 0x58
 8003424:	e007      	b.n	8003436 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800342e:	f023 0303 	bic.w	r3, r3, #3
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	aaaaaaab 	.word	0xaaaaaaab
 800344c:	08005af8 	.word	0x08005af8

08003450 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003460:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d11f      	bne.n	80034aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d856      	bhi.n	800351e <DMA_CheckFifoParam+0xce>
 8003470:	a201      	add	r2, pc, #4	@ (adr r2, 8003478 <DMA_CheckFifoParam+0x28>)
 8003472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003476:	bf00      	nop
 8003478:	08003489 	.word	0x08003489
 800347c:	0800349b 	.word	0x0800349b
 8003480:	08003489 	.word	0x08003489
 8003484:	0800351f 	.word	0x0800351f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d046      	beq.n	8003522 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003498:	e043      	b.n	8003522 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034a2:	d140      	bne.n	8003526 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034a8:	e03d      	b.n	8003526 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034b2:	d121      	bne.n	80034f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d837      	bhi.n	800352a <DMA_CheckFifoParam+0xda>
 80034ba:	a201      	add	r2, pc, #4	@ (adr r2, 80034c0 <DMA_CheckFifoParam+0x70>)
 80034bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c0:	080034d1 	.word	0x080034d1
 80034c4:	080034d7 	.word	0x080034d7
 80034c8:	080034d1 	.word	0x080034d1
 80034cc:	080034e9 	.word	0x080034e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
      break;
 80034d4:	e030      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d025      	beq.n	800352e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e6:	e022      	b.n	800352e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034f0:	d11f      	bne.n	8003532 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034f6:	e01c      	b.n	8003532 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d903      	bls.n	8003506 <DMA_CheckFifoParam+0xb6>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b03      	cmp	r3, #3
 8003502:	d003      	beq.n	800350c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003504:	e018      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
      break;
 800350a:	e015      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003510:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00e      	beq.n	8003536 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      break;
 800351c:	e00b      	b.n	8003536 <DMA_CheckFifoParam+0xe6>
      break;
 800351e:	bf00      	nop
 8003520:	e00a      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
      break;
 8003522:	bf00      	nop
 8003524:	e008      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
      break;
 8003526:	bf00      	nop
 8003528:	e006      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
      break;
 800352a:	bf00      	nop
 800352c:	e004      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
      break;
 800352e:	bf00      	nop
 8003530:	e002      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
      break;   
 8003532:	bf00      	nop
 8003534:	e000      	b.n	8003538 <DMA_CheckFifoParam+0xe8>
      break;
 8003536:	bf00      	nop
    }
  } 
  
  return status; 
 8003538:	7bfb      	ldrb	r3, [r7, #15]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop

08003548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003548:	b480      	push	{r7}
 800354a:	b089      	sub	sp, #36	@ 0x24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	e16b      	b.n	800383c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003564:	2201      	movs	r2, #1
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	429a      	cmp	r2, r3
 800357e:	f040 815a 	bne.w	8003836 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d005      	beq.n	800359a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003596:	2b02      	cmp	r3, #2
 8003598:	d130      	bne.n	80035fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	2203      	movs	r2, #3
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035d0:	2201      	movs	r2, #1
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	091b      	lsrs	r3, r3, #4
 80035e6:	f003 0201 	and.w	r2, r3, #1
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b03      	cmp	r3, #3
 8003606:	d017      	beq.n	8003638 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2203      	movs	r2, #3
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d123      	bne.n	800368c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	08da      	lsrs	r2, r3, #3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3208      	adds	r2, #8
 800364c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	220f      	movs	r2, #15
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	08da      	lsrs	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3208      	adds	r2, #8
 8003686:	69b9      	ldr	r1, [r7, #24]
 8003688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	2203      	movs	r2, #3
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0203 	and.w	r2, r3, #3
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80b4 	beq.w	8003836 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	4b60      	ldr	r3, [pc, #384]	@ (8003854 <HAL_GPIO_Init+0x30c>)
 80036d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d6:	4a5f      	ldr	r2, [pc, #380]	@ (8003854 <HAL_GPIO_Init+0x30c>)
 80036d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80036de:	4b5d      	ldr	r3, [pc, #372]	@ (8003854 <HAL_GPIO_Init+0x30c>)
 80036e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003858 <HAL_GPIO_Init+0x310>)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	089b      	lsrs	r3, r3, #2
 80036f0:	3302      	adds	r3, #2
 80036f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	220f      	movs	r2, #15
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43db      	mvns	r3, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4013      	ands	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a52      	ldr	r2, [pc, #328]	@ (800385c <HAL_GPIO_Init+0x314>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d02b      	beq.n	800376e <HAL_GPIO_Init+0x226>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a51      	ldr	r2, [pc, #324]	@ (8003860 <HAL_GPIO_Init+0x318>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d025      	beq.n	800376a <HAL_GPIO_Init+0x222>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a50      	ldr	r2, [pc, #320]	@ (8003864 <HAL_GPIO_Init+0x31c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d01f      	beq.n	8003766 <HAL_GPIO_Init+0x21e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a4f      	ldr	r2, [pc, #316]	@ (8003868 <HAL_GPIO_Init+0x320>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d019      	beq.n	8003762 <HAL_GPIO_Init+0x21a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a4e      	ldr	r2, [pc, #312]	@ (800386c <HAL_GPIO_Init+0x324>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d013      	beq.n	800375e <HAL_GPIO_Init+0x216>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a4d      	ldr	r2, [pc, #308]	@ (8003870 <HAL_GPIO_Init+0x328>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00d      	beq.n	800375a <HAL_GPIO_Init+0x212>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a4c      	ldr	r2, [pc, #304]	@ (8003874 <HAL_GPIO_Init+0x32c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d007      	beq.n	8003756 <HAL_GPIO_Init+0x20e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a4b      	ldr	r2, [pc, #300]	@ (8003878 <HAL_GPIO_Init+0x330>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d101      	bne.n	8003752 <HAL_GPIO_Init+0x20a>
 800374e:	2307      	movs	r3, #7
 8003750:	e00e      	b.n	8003770 <HAL_GPIO_Init+0x228>
 8003752:	2308      	movs	r3, #8
 8003754:	e00c      	b.n	8003770 <HAL_GPIO_Init+0x228>
 8003756:	2306      	movs	r3, #6
 8003758:	e00a      	b.n	8003770 <HAL_GPIO_Init+0x228>
 800375a:	2305      	movs	r3, #5
 800375c:	e008      	b.n	8003770 <HAL_GPIO_Init+0x228>
 800375e:	2304      	movs	r3, #4
 8003760:	e006      	b.n	8003770 <HAL_GPIO_Init+0x228>
 8003762:	2303      	movs	r3, #3
 8003764:	e004      	b.n	8003770 <HAL_GPIO_Init+0x228>
 8003766:	2302      	movs	r3, #2
 8003768:	e002      	b.n	8003770 <HAL_GPIO_Init+0x228>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_GPIO_Init+0x228>
 800376e:	2300      	movs	r3, #0
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	f002 0203 	and.w	r2, r2, #3
 8003776:	0092      	lsls	r2, r2, #2
 8003778:	4093      	lsls	r3, r2
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003780:	4935      	ldr	r1, [pc, #212]	@ (8003858 <HAL_GPIO_Init+0x310>)
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	089b      	lsrs	r3, r3, #2
 8003786:	3302      	adds	r3, #2
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800378e:	4b3b      	ldr	r3, [pc, #236]	@ (800387c <HAL_GPIO_Init+0x334>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037b2:	4a32      	ldr	r2, [pc, #200]	@ (800387c <HAL_GPIO_Init+0x334>)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037b8:	4b30      	ldr	r3, [pc, #192]	@ (800387c <HAL_GPIO_Init+0x334>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037dc:	4a27      	ldr	r2, [pc, #156]	@ (800387c <HAL_GPIO_Init+0x334>)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037e2:	4b26      	ldr	r3, [pc, #152]	@ (800387c <HAL_GPIO_Init+0x334>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	43db      	mvns	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003806:	4a1d      	ldr	r2, [pc, #116]	@ (800387c <HAL_GPIO_Init+0x334>)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800380c:	4b1b      	ldr	r3, [pc, #108]	@ (800387c <HAL_GPIO_Init+0x334>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003830:	4a12      	ldr	r2, [pc, #72]	@ (800387c <HAL_GPIO_Init+0x334>)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3301      	adds	r3, #1
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	2b0f      	cmp	r3, #15
 8003840:	f67f ae90 	bls.w	8003564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	3724      	adds	r7, #36	@ 0x24
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800
 8003858:	40013800 	.word	0x40013800
 800385c:	40020000 	.word	0x40020000
 8003860:	40020400 	.word	0x40020400
 8003864:	40020800 	.word	0x40020800
 8003868:	40020c00 	.word	0x40020c00
 800386c:	40021000 	.word	0x40021000
 8003870:	40021400 	.word	0x40021400
 8003874:	40021800 	.word	0x40021800
 8003878:	40021c00 	.word	0x40021c00
 800387c:	40013c00 	.word	0x40013c00

08003880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
 800388c:	4613      	mov	r3, r2
 800388e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003890:	787b      	ldrb	r3, [r7, #1]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003896:	887a      	ldrh	r2, [r7, #2]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800389c:	e003      	b.n	80038a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	041a      	lsls	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	619a      	str	r2, [r3, #24]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b085      	sub	sp, #20
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	460b      	mov	r3, r1
 80038bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038c4:	887a      	ldrh	r2, [r7, #2]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4013      	ands	r3, r2
 80038ca:	041a      	lsls	r2, r3, #16
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	43d9      	mvns	r1, r3
 80038d0:	887b      	ldrh	r3, [r7, #2]
 80038d2:	400b      	ands	r3, r1
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	619a      	str	r2, [r3, #24]
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e267      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d075      	beq.n	80039f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003906:	4b88      	ldr	r3, [pc, #544]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b04      	cmp	r3, #4
 8003910:	d00c      	beq.n	800392c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003912:	4b85      	ldr	r3, [pc, #532]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800391a:	2b08      	cmp	r3, #8
 800391c:	d112      	bne.n	8003944 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391e:	4b82      	ldr	r3, [pc, #520]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003926:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800392a:	d10b      	bne.n	8003944 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d05b      	beq.n	80039f0 <HAL_RCC_OscConfig+0x108>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d157      	bne.n	80039f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e242      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800394c:	d106      	bne.n	800395c <HAL_RCC_OscConfig+0x74>
 800394e:	4b76      	ldr	r3, [pc, #472]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a75      	ldr	r2, [pc, #468]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e01d      	b.n	8003998 <HAL_RCC_OscConfig+0xb0>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003964:	d10c      	bne.n	8003980 <HAL_RCC_OscConfig+0x98>
 8003966:	4b70      	ldr	r3, [pc, #448]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a6f      	ldr	r2, [pc, #444]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 800396c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	4b6d      	ldr	r3, [pc, #436]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a6c      	ldr	r2, [pc, #432]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e00b      	b.n	8003998 <HAL_RCC_OscConfig+0xb0>
 8003980:	4b69      	ldr	r3, [pc, #420]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a68      	ldr	r2, [pc, #416]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	4b66      	ldr	r3, [pc, #408]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a65      	ldr	r2, [pc, #404]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d013      	beq.n	80039c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fe fa28 	bl	8001df4 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a8:	f7fe fa24 	bl	8001df4 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	@ 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e207      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0xc0>
 80039c6:	e014      	b.n	80039f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7fe fa14 	bl	8001df4 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d0:	f7fe fa10 	bl	8001df4 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	@ 0x64
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e1f3      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e2:	4b51      	ldr	r3, [pc, #324]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0xe8>
 80039ee:	e000      	b.n	80039f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d063      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a0a:	4b47      	ldr	r3, [pc, #284]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d11c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a16:	4b44      	ldr	r3, [pc, #272]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d116      	bne.n	8003a50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a22:	4b41      	ldr	r3, [pc, #260]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d005      	beq.n	8003a3a <HAL_RCC_OscConfig+0x152>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d001      	beq.n	8003a3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e1c7      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4937      	ldr	r1, [pc, #220]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4e:	e03a      	b.n	8003ac6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d020      	beq.n	8003a9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a58:	4b34      	ldr	r3, [pc, #208]	@ (8003b2c <HAL_RCC_OscConfig+0x244>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5e:	f7fe f9c9 	bl	8001df4 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a66:	f7fe f9c5 	bl	8001df4 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e1a8      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a78:	4b2b      	ldr	r3, [pc, #172]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a84:	4b28      	ldr	r3, [pc, #160]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4925      	ldr	r1, [pc, #148]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	600b      	str	r3, [r1, #0]
 8003a98:	e015      	b.n	8003ac6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9a:	4b24      	ldr	r3, [pc, #144]	@ (8003b2c <HAL_RCC_OscConfig+0x244>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fe f9a8 	bl	8001df4 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa8:	f7fe f9a4 	bl	8001df4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e187      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aba:	4b1b      	ldr	r3, [pc, #108]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d036      	beq.n	8003b40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ada:	4b15      	ldr	r3, [pc, #84]	@ (8003b30 <HAL_RCC_OscConfig+0x248>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae0:	f7fe f988 	bl	8001df4 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae8:	f7fe f984 	bl	8001df4 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e167      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afa:	4b0b      	ldr	r3, [pc, #44]	@ (8003b28 <HAL_RCC_OscConfig+0x240>)
 8003afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x200>
 8003b06:	e01b      	b.n	8003b40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b08:	4b09      	ldr	r3, [pc, #36]	@ (8003b30 <HAL_RCC_OscConfig+0x248>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0e:	f7fe f971 	bl	8001df4 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b14:	e00e      	b.n	8003b34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b16:	f7fe f96d 	bl	8001df4 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d907      	bls.n	8003b34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e150      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	42470000 	.word	0x42470000
 8003b30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b34:	4b88      	ldr	r3, [pc, #544]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1ea      	bne.n	8003b16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8097 	beq.w	8003c7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b52:	4b81      	ldr	r3, [pc, #516]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10f      	bne.n	8003b7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	4b7d      	ldr	r3, [pc, #500]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b66:	4a7c      	ldr	r2, [pc, #496]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b6e:	4b7a      	ldr	r3, [pc, #488]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7e:	4b77      	ldr	r3, [pc, #476]	@ (8003d5c <HAL_RCC_OscConfig+0x474>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d118      	bne.n	8003bbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8a:	4b74      	ldr	r3, [pc, #464]	@ (8003d5c <HAL_RCC_OscConfig+0x474>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a73      	ldr	r2, [pc, #460]	@ (8003d5c <HAL_RCC_OscConfig+0x474>)
 8003b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b96:	f7fe f92d 	bl	8001df4 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9e:	f7fe f929 	bl	8001df4 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e10c      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb0:	4b6a      	ldr	r3, [pc, #424]	@ (8003d5c <HAL_RCC_OscConfig+0x474>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x2ea>
 8003bc4:	4b64      	ldr	r3, [pc, #400]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc8:	4a63      	ldr	r2, [pc, #396]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd0:	e01c      	b.n	8003c0c <HAL_RCC_OscConfig+0x324>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b05      	cmp	r3, #5
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x30c>
 8003bda:	4b5f      	ldr	r3, [pc, #380]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bde:	4a5e      	ldr	r2, [pc, #376]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003be0:	f043 0304 	orr.w	r3, r3, #4
 8003be4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003be6:	4b5c      	ldr	r3, [pc, #368]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bea:	4a5b      	ldr	r2, [pc, #364]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf2:	e00b      	b.n	8003c0c <HAL_RCC_OscConfig+0x324>
 8003bf4:	4b58      	ldr	r3, [pc, #352]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf8:	4a57      	ldr	r2, [pc, #348]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c00:	4b55      	ldr	r3, [pc, #340]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c04:	4a54      	ldr	r2, [pc, #336]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003c06:	f023 0304 	bic.w	r3, r3, #4
 8003c0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d015      	beq.n	8003c40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c14:	f7fe f8ee 	bl	8001df4 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1c:	f7fe f8ea 	bl	8001df4 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e0cb      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c32:	4b49      	ldr	r3, [pc, #292]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0ee      	beq.n	8003c1c <HAL_RCC_OscConfig+0x334>
 8003c3e:	e014      	b.n	8003c6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c40:	f7fe f8d8 	bl	8001df4 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c46:	e00a      	b.n	8003c5e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c48:	f7fe f8d4 	bl	8001df4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e0b5      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1ee      	bne.n	8003c48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d105      	bne.n	8003c7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c70:	4b39      	ldr	r3, [pc, #228]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c74:	4a38      	ldr	r2, [pc, #224]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003c76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80a1 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c86:	4b34      	ldr	r3, [pc, #208]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d05c      	beq.n	8003d4c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d141      	bne.n	8003d1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9a:	4b31      	ldr	r3, [pc, #196]	@ (8003d60 <HAL_RCC_OscConfig+0x478>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7fe f8a8 	bl	8001df4 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fe f8a4 	bl	8001df4 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e087      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cba:	4b27      	ldr	r3, [pc, #156]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69da      	ldr	r2, [r3, #28]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	019b      	lsls	r3, r3, #6
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	085b      	lsrs	r3, r3, #1
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	041b      	lsls	r3, r3, #16
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	061b      	lsls	r3, r3, #24
 8003cea:	491b      	ldr	r1, [pc, #108]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d60 <HAL_RCC_OscConfig+0x478>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf6:	f7fe f87d 	bl	8001df4 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfe:	f7fe f879 	bl	8001df4 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e05c      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d10:	4b11      	ldr	r3, [pc, #68]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x416>
 8003d1c:	e054      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1e:	4b10      	ldr	r3, [pc, #64]	@ (8003d60 <HAL_RCC_OscConfig+0x478>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d24:	f7fe f866 	bl	8001df4 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fe f862 	bl	8001df4 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e045      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <HAL_RCC_OscConfig+0x470>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x444>
 8003d4a:	e03d      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e038      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	40007000 	.word	0x40007000
 8003d60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d64:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd4 <HAL_RCC_OscConfig+0x4ec>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d028      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d121      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d11a      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d94:	4013      	ands	r3, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d111      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	3b01      	subs	r3, #1
 8003dae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d107      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800

08003dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0cc      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dec:	4b68      	ldr	r3, [pc, #416]	@ (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d90c      	bls.n	8003e14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfa:	4b65      	ldr	r3, [pc, #404]	@ (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e02:	4b63      	ldr	r3, [pc, #396]	@ (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0b8      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d020      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e2c:	4b59      	ldr	r3, [pc, #356]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	4a58      	ldr	r2, [pc, #352]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e44:	4b53      	ldr	r3, [pc, #332]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a52      	ldr	r2, [pc, #328]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e50:	4b50      	ldr	r3, [pc, #320]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	494d      	ldr	r1, [pc, #308]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d044      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	4b47      	ldr	r3, [pc, #284]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d119      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e07f      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d003      	beq.n	8003e96 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d107      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e96:	4b3f      	ldr	r3, [pc, #252]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e06f      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e067      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eb6:	4b37      	ldr	r3, [pc, #220]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f023 0203 	bic.w	r2, r3, #3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	4934      	ldr	r1, [pc, #208]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec8:	f7fd ff94 	bl	8001df4 <HAL_GetTick>
 8003ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed0:	f7fd ff90 	bl	8001df4 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e04f      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 020c 	and.w	r2, r3, #12
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d1eb      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef8:	4b25      	ldr	r3, [pc, #148]	@ (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d20c      	bcs.n	8003f20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f06:	4b22      	ldr	r3, [pc, #136]	@ (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0e:	4b20      	ldr	r3, [pc, #128]	@ (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e032      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f2c:	4b19      	ldr	r3, [pc, #100]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4916      	ldr	r1, [pc, #88]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f4a:	4b12      	ldr	r3, [pc, #72]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	490e      	ldr	r1, [pc, #56]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f5e:	f000 f821 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8003f62:	4602      	mov	r2, r0
 8003f64:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	490a      	ldr	r1, [pc, #40]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c0>)
 8003f70:	5ccb      	ldrb	r3, [r1, r3]
 8003f72:	fa22 f303 	lsr.w	r3, r2, r3
 8003f76:	4a09      	ldr	r2, [pc, #36]	@ (8003f9c <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f7a:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fd fef4 	bl	8001d6c <HAL_InitTick>

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40023c00 	.word	0x40023c00
 8003f94:	40023800 	.word	0x40023800
 8003f98:	08005ae0 	.word	0x08005ae0
 8003f9c:	20000000 	.word	0x20000000
 8003fa0:	20000004 	.word	0x20000004

08003fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fa8:	b090      	sub	sp, #64	@ 0x40
 8003faa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fbc:	4b59      	ldr	r3, [pc, #356]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 030c 	and.w	r3, r3, #12
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d00d      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x40>
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	f200 80a1 	bhi.w	8004110 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d003      	beq.n	8003fde <HAL_RCC_GetSysClockFreq+0x3a>
 8003fd6:	e09b      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fd8:	4b53      	ldr	r3, [pc, #332]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fdc:	e09b      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fde:	4b53      	ldr	r3, [pc, #332]	@ (800412c <HAL_RCC_GetSysClockFreq+0x188>)
 8003fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fe2:	e098      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fe4:	4b4f      	ldr	r3, [pc, #316]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fee:	4b4d      	ldr	r3, [pc, #308]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d028      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	099b      	lsrs	r3, r3, #6
 8004000:	2200      	movs	r2, #0
 8004002:	623b      	str	r3, [r7, #32]
 8004004:	627a      	str	r2, [r7, #36]	@ 0x24
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800400c:	2100      	movs	r1, #0
 800400e:	4b47      	ldr	r3, [pc, #284]	@ (800412c <HAL_RCC_GetSysClockFreq+0x188>)
 8004010:	fb03 f201 	mul.w	r2, r3, r1
 8004014:	2300      	movs	r3, #0
 8004016:	fb00 f303 	mul.w	r3, r0, r3
 800401a:	4413      	add	r3, r2
 800401c:	4a43      	ldr	r2, [pc, #268]	@ (800412c <HAL_RCC_GetSysClockFreq+0x188>)
 800401e:	fba0 1202 	umull	r1, r2, r0, r2
 8004022:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004024:	460a      	mov	r2, r1
 8004026:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004028:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800402a:	4413      	add	r3, r2
 800402c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800402e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004030:	2200      	movs	r2, #0
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	61fa      	str	r2, [r7, #28]
 8004036:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800403a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800403e:	f7fc f8c3 	bl	80001c8 <__aeabi_uldivmod>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4613      	mov	r3, r2
 8004048:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800404a:	e053      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800404c:	4b35      	ldr	r3, [pc, #212]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x180>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	099b      	lsrs	r3, r3, #6
 8004052:	2200      	movs	r2, #0
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	617a      	str	r2, [r7, #20]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800405e:	f04f 0b00 	mov.w	fp, #0
 8004062:	4652      	mov	r2, sl
 8004064:	465b      	mov	r3, fp
 8004066:	f04f 0000 	mov.w	r0, #0
 800406a:	f04f 0100 	mov.w	r1, #0
 800406e:	0159      	lsls	r1, r3, #5
 8004070:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004074:	0150      	lsls	r0, r2, #5
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	ebb2 080a 	subs.w	r8, r2, sl
 800407e:	eb63 090b 	sbc.w	r9, r3, fp
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800408e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004092:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004096:	ebb2 0408 	subs.w	r4, r2, r8
 800409a:	eb63 0509 	sbc.w	r5, r3, r9
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	00eb      	lsls	r3, r5, #3
 80040a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ac:	00e2      	lsls	r2, r4, #3
 80040ae:	4614      	mov	r4, r2
 80040b0:	461d      	mov	r5, r3
 80040b2:	eb14 030a 	adds.w	r3, r4, sl
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	eb45 030b 	adc.w	r3, r5, fp
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ca:	4629      	mov	r1, r5
 80040cc:	028b      	lsls	r3, r1, #10
 80040ce:	4621      	mov	r1, r4
 80040d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040d4:	4621      	mov	r1, r4
 80040d6:	028a      	lsls	r2, r1, #10
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040de:	2200      	movs	r2, #0
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	60fa      	str	r2, [r7, #12]
 80040e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040e8:	f7fc f86e 	bl	80001c8 <__aeabi_uldivmod>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4613      	mov	r3, r2
 80040f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x180>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	3301      	adds	r3, #1
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004104:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800410e:	e002      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004110:	4b05      	ldr	r3, [pc, #20]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x184>)
 8004112:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004118:	4618      	mov	r0, r3
 800411a:	3740      	adds	r7, #64	@ 0x40
 800411c:	46bd      	mov	sp, r7
 800411e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	00f42400 	.word	0x00f42400
 800412c:	00b71b00 	.word	0x00b71b00

08004130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004134:	4b03      	ldr	r3, [pc, #12]	@ (8004144 <HAL_RCC_GetHCLKFreq+0x14>)
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000000 	.word	0x20000000

08004148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800414c:	f7ff fff0 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b05      	ldr	r3, [pc, #20]	@ (8004168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	0a9b      	lsrs	r3, r3, #10
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4903      	ldr	r1, [pc, #12]	@ (800416c <HAL_RCC_GetPCLK1Freq+0x24>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40023800 	.word	0x40023800
 800416c:	08005af0 	.word	0x08005af0

08004170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004174:	f7ff ffdc 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b05      	ldr	r3, [pc, #20]	@ (8004190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	0b5b      	lsrs	r3, r3, #13
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4903      	ldr	r1, [pc, #12]	@ (8004194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40023800 	.word	0x40023800
 8004194:	08005af0 	.word	0x08005af0

08004198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e041      	b.n	800422e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd fc82 	bl	8001ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f000 f9b6 	bl	8004548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d001      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e04e      	b.n	80042ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a23      	ldr	r2, [pc, #140]	@ (80042fc <HAL_TIM_Base_Start_IT+0xc4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d022      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0x80>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800427a:	d01d      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0x80>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1f      	ldr	r2, [pc, #124]	@ (8004300 <HAL_TIM_Base_Start_IT+0xc8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d018      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0x80>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1e      	ldr	r2, [pc, #120]	@ (8004304 <HAL_TIM_Base_Start_IT+0xcc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d013      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0x80>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1c      	ldr	r2, [pc, #112]	@ (8004308 <HAL_TIM_Base_Start_IT+0xd0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00e      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0x80>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1b      	ldr	r2, [pc, #108]	@ (800430c <HAL_TIM_Base_Start_IT+0xd4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d009      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0x80>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a19      	ldr	r2, [pc, #100]	@ (8004310 <HAL_TIM_Base_Start_IT+0xd8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d004      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0x80>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a18      	ldr	r2, [pc, #96]	@ (8004314 <HAL_TIM_Base_Start_IT+0xdc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d111      	bne.n	80042dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b06      	cmp	r3, #6
 80042c8:	d010      	beq.n	80042ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0201 	orr.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042da:	e007      	b.n	80042ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40010000 	.word	0x40010000
 8004300:	40000400 	.word	0x40000400
 8004304:	40000800 	.word	0x40000800
 8004308:	40000c00 	.word	0x40000c00
 800430c:	40010400 	.word	0x40010400
 8004310:	40014000 	.word	0x40014000
 8004314:	40001800 	.word	0x40001800

08004318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d020      	beq.n	800437c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01b      	beq.n	800437c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0202 	mvn.w	r2, #2
 800434c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f8d2 	bl	800450c <HAL_TIM_IC_CaptureCallback>
 8004368:	e005      	b.n	8004376 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f8c4 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f8d5 	bl	8004520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d020      	beq.n	80043c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0204 	mvn.w	r2, #4
 8004398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f8ac 	bl	800450c <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f89e 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f8af 	bl	8004520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0208 	mvn.w	r2, #8
 80043e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2204      	movs	r2, #4
 80043ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f886 	bl	800450c <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f878 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f889 	bl	8004520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	2b00      	cmp	r3, #0
 800441c:	d020      	beq.n	8004460 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01b      	beq.n	8004460 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0210 	mvn.w	r2, #16
 8004430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2208      	movs	r2, #8
 8004436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f860 	bl	800450c <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f852 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f863 	bl	8004520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0201 	mvn.w	r2, #1
 800447c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fd f952 	bl	8001728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f97c 	bl	80047a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00c      	beq.n	80044cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f834 	bl	8004534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00c      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0220 	mvn.w	r2, #32
 80044e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f94e 	bl	800478c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a43      	ldr	r2, [pc, #268]	@ (8004668 <TIM_Base_SetConfig+0x120>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d013      	beq.n	8004588 <TIM_Base_SetConfig+0x40>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004566:	d00f      	beq.n	8004588 <TIM_Base_SetConfig+0x40>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a40      	ldr	r2, [pc, #256]	@ (800466c <TIM_Base_SetConfig+0x124>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00b      	beq.n	8004588 <TIM_Base_SetConfig+0x40>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a3f      	ldr	r2, [pc, #252]	@ (8004670 <TIM_Base_SetConfig+0x128>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d007      	beq.n	8004588 <TIM_Base_SetConfig+0x40>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a3e      	ldr	r2, [pc, #248]	@ (8004674 <TIM_Base_SetConfig+0x12c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d003      	beq.n	8004588 <TIM_Base_SetConfig+0x40>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a3d      	ldr	r2, [pc, #244]	@ (8004678 <TIM_Base_SetConfig+0x130>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d108      	bne.n	800459a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800458e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a32      	ldr	r2, [pc, #200]	@ (8004668 <TIM_Base_SetConfig+0x120>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d02b      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a8:	d027      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a2f      	ldr	r2, [pc, #188]	@ (800466c <TIM_Base_SetConfig+0x124>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d023      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004670 <TIM_Base_SetConfig+0x128>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d01f      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004674 <TIM_Base_SetConfig+0x12c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d01b      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a2c      	ldr	r2, [pc, #176]	@ (8004678 <TIM_Base_SetConfig+0x130>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d017      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a2b      	ldr	r2, [pc, #172]	@ (800467c <TIM_Base_SetConfig+0x134>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004680 <TIM_Base_SetConfig+0x138>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00f      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a29      	ldr	r2, [pc, #164]	@ (8004684 <TIM_Base_SetConfig+0x13c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00b      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a28      	ldr	r2, [pc, #160]	@ (8004688 <TIM_Base_SetConfig+0x140>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d007      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a27      	ldr	r2, [pc, #156]	@ (800468c <TIM_Base_SetConfig+0x144>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d003      	beq.n	80045fa <TIM_Base_SetConfig+0xb2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a26      	ldr	r2, [pc, #152]	@ (8004690 <TIM_Base_SetConfig+0x148>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d108      	bne.n	800460c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a0e      	ldr	r2, [pc, #56]	@ (8004668 <TIM_Base_SetConfig+0x120>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d003      	beq.n	800463a <TIM_Base_SetConfig+0xf2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a10      	ldr	r2, [pc, #64]	@ (8004678 <TIM_Base_SetConfig+0x130>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d103      	bne.n	8004642 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	691a      	ldr	r2, [r3, #16]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f043 0204 	orr.w	r2, r3, #4
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	601a      	str	r2, [r3, #0]
}
 800465a:	bf00      	nop
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40010000 	.word	0x40010000
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800
 8004674:	40000c00 	.word	0x40000c00
 8004678:	40010400 	.word	0x40010400
 800467c:	40014000 	.word	0x40014000
 8004680:	40014400 	.word	0x40014400
 8004684:	40014800 	.word	0x40014800
 8004688:	40001800 	.word	0x40001800
 800468c:	40001c00 	.word	0x40001c00
 8004690:	40002000 	.word	0x40002000

08004694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e05a      	b.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a21      	ldr	r2, [pc, #132]	@ (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d022      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f8:	d01d      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d018      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1b      	ldr	r2, [pc, #108]	@ (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1a      	ldr	r2, [pc, #104]	@ (800477c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00e      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a18      	ldr	r2, [pc, #96]	@ (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d009      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a17      	ldr	r2, [pc, #92]	@ (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d004      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a15      	ldr	r2, [pc, #84]	@ (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d10c      	bne.n	8004750 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800473c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	4313      	orrs	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40010000 	.word	0x40010000
 8004774:	40000400 	.word	0x40000400
 8004778:	40000800 	.word	0x40000800
 800477c:	40000c00 	.word	0x40000c00
 8004780:	40010400 	.word	0x40010400
 8004784:	40014000 	.word	0x40014000
 8004788:	40001800 	.word	0x40001800

0800478c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e042      	b.n	800484c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fd f9c6 	bl	8001b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2224      	movs	r2, #36	@ 0x24
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 febd 	bl	8005578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800480c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800481c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800482c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08c      	sub	sp, #48	@ 0x30
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	4613      	mov	r3, r2
 8004860:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b20      	cmp	r3, #32
 800486c:	d146      	bne.n	80048fc <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e03f      	b.n	80048fe <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	461a      	mov	r2, r3
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 fc09 	bl	80050a8 <UART_Start_Receive_DMA>
 8004896:	4603      	mov	r3, r0
 8004898:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d125      	bne.n	80048f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	617b      	str	r3, [r7, #20]
   return(result);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f043 0310 	orr.w	r3, r3, #16
 80048d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	330c      	adds	r3, #12
 80048d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048da:	627a      	str	r2, [r7, #36]	@ 0x24
 80048dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	6a39      	ldr	r1, [r7, #32]
 80048e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e2:	e841 2300 	strex	r3, r2, [r1]
 80048e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1e5      	bne.n	80048ba <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 80048ee:	e002      	b.n	80048f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80048f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80048fa:	e000      	b.n	80048fe <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 80048fc:	2302      	movs	r3, #2
  }
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3730      	adds	r7, #48	@ 0x30
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b0ba      	sub	sp, #232	@ 0xe8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800492e:	2300      	movs	r3, #0
 8004930:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004934:	2300      	movs	r3, #0
 8004936:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800493a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004946:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10f      	bne.n	800496e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800494e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <HAL_UART_IRQHandler+0x66>
 800495a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fd48 	bl	80053fc <UART_Receive_IT>
      return;
 800496c:	e273      	b.n	8004e56 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800496e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 80de 	beq.w	8004b34 <HAL_UART_IRQHandler+0x22c>
 8004978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d106      	bne.n	8004992 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004988:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 80d1 	beq.w	8004b34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <HAL_UART_IRQHandler+0xae>
 800499e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ae:	f043 0201 	orr.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00b      	beq.n	80049da <HAL_UART_IRQHandler+0xd2>
 80049c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d2:	f043 0202 	orr.w	r2, r3, #2
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00b      	beq.n	80049fe <HAL_UART_IRQHandler+0xf6>
 80049e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d005      	beq.n	80049fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f6:	f043 0204 	orr.w	r2, r3, #4
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d011      	beq.n	8004a2e <HAL_UART_IRQHandler+0x126>
 8004a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d105      	bne.n	8004a22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a26:	f043 0208 	orr.w	r2, r3, #8
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 820a 	beq.w	8004e4c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_UART_IRQHandler+0x14e>
 8004a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a48:	f003 0320 	and.w	r3, r3, #32
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fcd3 	bl	80053fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a60:	2b40      	cmp	r3, #64	@ 0x40
 8004a62:	bf0c      	ite	eq
 8004a64:	2301      	moveq	r3, #1
 8004a66:	2300      	movne	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d103      	bne.n	8004a82 <HAL_UART_IRQHandler+0x17a>
 8004a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d04f      	beq.n	8004b22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fbde 	bl	8005244 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a92:	2b40      	cmp	r3, #64	@ 0x40
 8004a94:	d141      	bne.n	8004b1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3314      	adds	r3, #20
 8004a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ab0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3314      	adds	r3, #20
 8004abe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ac2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ace:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1d9      	bne.n	8004a96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d013      	beq.n	8004b12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aee:	4a8a      	ldr	r2, [pc, #552]	@ (8004d18 <HAL_UART_IRQHandler+0x410>)
 8004af0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fe fa9a 	bl	8003030 <HAL_DMA_Abort_IT>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d016      	beq.n	8004b30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b10:	e00e      	b.n	8004b30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f9c0 	bl	8004e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b18:	e00a      	b.n	8004b30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f9bc 	bl	8004e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b20:	e006      	b.n	8004b30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f9b8 	bl	8004e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004b2e:	e18d      	b.n	8004e4c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b30:	bf00      	nop
    return;
 8004b32:	e18b      	b.n	8004e4c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	f040 8167 	bne.w	8004e0c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 8160 	beq.w	8004e0c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8159 	beq.w	8004e0c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60bb      	str	r3, [r7, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7a:	2b40      	cmp	r3, #64	@ 0x40
 8004b7c:	f040 80ce 	bne.w	8004d1c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80a9 	beq.w	8004ce8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	f080 80a2 	bcs.w	8004ce8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004baa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bb6:	f000 8088 	beq.w	8004cca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bc8:	e853 3f00 	ldrex	r3, [r3]
 8004bcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004bd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	330c      	adds	r3, #12
 8004be2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004be6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004bea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004bf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1d9      	bne.n	8004bba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3314      	adds	r3, #20
 8004c0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c18:	f023 0301 	bic.w	r3, r3, #1
 8004c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3314      	adds	r3, #20
 8004c26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e1      	bne.n	8004c06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3314      	adds	r3, #20
 8004c48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3314      	adds	r3, #20
 8004c62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e3      	bne.n	8004c42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c9a:	f023 0310 	bic.w	r3, r3, #16
 8004c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	330c      	adds	r3, #12
 8004ca8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004cac:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004cae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004cb4:	e841 2300 	strex	r3, r2, [r1]
 8004cb8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004cba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1e3      	bne.n	8004c88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fe f943 	bl	8002f50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7fc f8b9 	bl	8000e58 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004ce6:	e0b3      	b.n	8004e50 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	f040 80ad 	bne.w	8004e50 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d00:	f040 80a6 	bne.w	8004e50 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7fc f8a1 	bl	8000e58 <HAL_UARTEx_RxEventCallback>
      return;
 8004d16:	e09b      	b.n	8004e50 <HAL_UART_IRQHandler+0x548>
 8004d18:	0800530b 	.word	0x0800530b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 808e 	beq.w	8004e54 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004d38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8089 	beq.w	8004e54 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	330c      	adds	r3, #12
 8004d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4c:	e853 3f00 	ldrex	r3, [r3]
 8004d50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	330c      	adds	r3, #12
 8004d62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004d66:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e3      	bne.n	8004d42 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	3314      	adds	r3, #20
 8004d80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	623b      	str	r3, [r7, #32]
   return(result);
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	f023 0301 	bic.w	r3, r3, #1
 8004d90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3314      	adds	r3, #20
 8004d9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e3      	bne.n	8004d7a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0310 	bic.w	r3, r3, #16
 8004dd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	330c      	adds	r3, #12
 8004de0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004de4:	61fa      	str	r2, [r7, #28]
 8004de6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	69b9      	ldr	r1, [r7, #24]
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	617b      	str	r3, [r7, #20]
   return(result);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e3      	bne.n	8004dc0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fc f827 	bl	8000e58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e0a:	e023      	b.n	8004e54 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d009      	beq.n	8004e2c <HAL_UART_IRQHandler+0x524>
 8004e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fa81 	bl	800532c <UART_Transmit_IT>
    return;
 8004e2a:	e014      	b.n	8004e56 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00e      	beq.n	8004e56 <HAL_UART_IRQHandler+0x54e>
 8004e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fac1 	bl	80053cc <UART_EndTransmit_IT>
    return;
 8004e4a:	e004      	b.n	8004e56 <HAL_UART_IRQHandler+0x54e>
    return;
 8004e4c:	bf00      	nop
 8004e4e:	e002      	b.n	8004e56 <HAL_UART_IRQHandler+0x54e>
      return;
 8004e50:	bf00      	nop
 8004e52:	e000      	b.n	8004e56 <HAL_UART_IRQHandler+0x54e>
      return;
 8004e54:	bf00      	nop
  }
}
 8004e56:	37e8      	adds	r7, #232	@ 0xe8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b09c      	sub	sp, #112	@ 0x70
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d172      	bne.n	8004fae <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eca:	2200      	movs	r2, #0
 8004ecc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	330c      	adds	r3, #12
 8004ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ee0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004eee:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ef0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ef4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004efc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e5      	bne.n	8004ece <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3314      	adds	r3, #20
 8004f08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f14:	f023 0301 	bic.w	r3, r3, #1
 8004f18:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3314      	adds	r3, #20
 8004f20:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004f22:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e5      	bne.n	8004f02 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	623b      	str	r3, [r7, #32]
   return(result);
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3314      	adds	r3, #20
 8004f54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004f56:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e5      	bne.n	8004f36 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d119      	bne.n	8004fae <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f023 0310 	bic.w	r3, r3, #16
 8004f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	330c      	adds	r3, #12
 8004f98:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f9a:	61fa      	str	r2, [r7, #28]
 8004f9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	69b9      	ldr	r1, [r7, #24]
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	617b      	str	r3, [r7, #20]
   return(result);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e5      	bne.n	8004f7a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d106      	bne.n	8004fca <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fbe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004fc4:	f7fb ff48 	bl	8000e58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fc8:	e002      	b.n	8004fd0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004fca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004fcc:	f7ff ff50 	bl	8004e70 <HAL_UART_RxCpltCallback>
}
 8004fd0:	bf00      	nop
 8004fd2:	3770      	adds	r7, #112	@ 0x70
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d108      	bne.n	8005006 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ff8:	085b      	lsrs	r3, r3, #1
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f7fb ff2a 	bl	8000e58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005004:	e002      	b.n	800500c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f7ff ff3c 	bl	8004e84 <HAL_UART_RxHalfCpltCallback>
}
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005024:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005030:	2b80      	cmp	r3, #128	@ 0x80
 8005032:	bf0c      	ite	eq
 8005034:	2301      	moveq	r3, #1
 8005036:	2300      	movne	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b21      	cmp	r3, #33	@ 0x21
 8005046:	d108      	bne.n	800505a <UART_DMAError+0x46>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d005      	beq.n	800505a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2200      	movs	r2, #0
 8005052:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005054:	68b8      	ldr	r0, [r7, #8]
 8005056:	f000 f8cd 	bl	80051f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005064:	2b40      	cmp	r3, #64	@ 0x40
 8005066:	bf0c      	ite	eq
 8005068:	2301      	moveq	r3, #1
 800506a:	2300      	movne	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b22      	cmp	r3, #34	@ 0x22
 800507a:	d108      	bne.n	800508e <UART_DMAError+0x7a>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d005      	beq.n	800508e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2200      	movs	r2, #0
 8005086:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005088:	68b8      	ldr	r0, [r7, #8]
 800508a:	f000 f8db 	bl	8005244 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005092:	f043 0210 	orr.w	r2, r3, #16
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800509a:	68b8      	ldr	r0, [r7, #8]
 800509c:	f7ff fefc 	bl	8004e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050a0:	bf00      	nop
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b098      	sub	sp, #96	@ 0x60
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	4613      	mov	r3, r2
 80050b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	88fa      	ldrh	r2, [r7, #6]
 80050c0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2222      	movs	r2, #34	@ 0x22
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d4:	4a44      	ldr	r2, [pc, #272]	@ (80051e8 <UART_Start_Receive_DMA+0x140>)
 80050d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050dc:	4a43      	ldr	r2, [pc, #268]	@ (80051ec <UART_Start_Receive_DMA+0x144>)
 80050de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e4:	4a42      	ldr	r2, [pc, #264]	@ (80051f0 <UART_Start_Receive_DMA+0x148>)
 80050e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ec:	2200      	movs	r2, #0
 80050ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80050f0:	f107 0308 	add.w	r3, r7, #8
 80050f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3304      	adds	r3, #4
 8005100:	4619      	mov	r1, r3
 8005102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	88fb      	ldrh	r3, [r7, #6]
 8005108:	f7fd feca 	bl	8002ea0 <HAL_DMA_Start_IT>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d008      	beq.n	8005124 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2210      	movs	r2, #16
 8005116:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e05d      	b.n	80051e0 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005124:	2300      	movs	r3, #0
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d019      	beq.n	8005176 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005158:	65bb      	str	r3, [r7, #88]	@ 0x58
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	330c      	adds	r3, #12
 8005160:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005162:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005164:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005168:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e5      	bne.n	8005142 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3314      	adds	r3, #20
 800517c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005188:	f043 0301 	orr.w	r3, r3, #1
 800518c:	657b      	str	r3, [r7, #84]	@ 0x54
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3314      	adds	r3, #20
 8005194:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005196:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005198:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800519c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e5      	bne.n	8005176 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3314      	adds	r3, #20
 80051b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	617b      	str	r3, [r7, #20]
   return(result);
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3314      	adds	r3, #20
 80051c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80051ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80051cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6a39      	ldr	r1, [r7, #32]
 80051d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e5      	bne.n	80051aa <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3760      	adds	r7, #96	@ 0x60
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	08004ead 	.word	0x08004ead
 80051ec:	08004fd9 	.word	0x08004fd9
 80051f0:	08005015 	.word	0x08005015

080051f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b089      	sub	sp, #36	@ 0x24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	330c      	adds	r3, #12
 8005202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	60bb      	str	r3, [r7, #8]
   return(result);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	330c      	adds	r3, #12
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	61ba      	str	r2, [r7, #24]
 800521e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6979      	ldr	r1, [r7, #20]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	613b      	str	r3, [r7, #16]
   return(result);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e5      	bne.n	80051fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005238:	bf00      	nop
 800523a:	3724      	adds	r7, #36	@ 0x24
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005244:	b480      	push	{r7}
 8005246:	b095      	sub	sp, #84	@ 0x54
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	330c      	adds	r3, #12
 8005252:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005256:	e853 3f00 	ldrex	r3, [r3]
 800525a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800525c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005262:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	330c      	adds	r3, #12
 800526a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800526c:	643a      	str	r2, [r7, #64]	@ 0x40
 800526e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005270:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005272:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005274:	e841 2300 	strex	r3, r2, [r1]
 8005278:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800527a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e5      	bne.n	800524c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3314      	adds	r3, #20
 8005286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	e853 3f00 	ldrex	r3, [r3]
 800528e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	f023 0301 	bic.w	r3, r3, #1
 8005296:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3314      	adds	r3, #20
 800529e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052a8:	e841 2300 	strex	r3, r2, [r1]
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e5      	bne.n	8005280 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d119      	bne.n	80052f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	330c      	adds	r3, #12
 80052c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f023 0310 	bic.w	r3, r3, #16
 80052d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052dc:	61ba      	str	r2, [r7, #24]
 80052de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	6979      	ldr	r1, [r7, #20]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	613b      	str	r3, [r7, #16]
   return(result);
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e5      	bne.n	80052bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052fe:	bf00      	nop
 8005300:	3754      	adds	r7, #84	@ 0x54
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005316:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7ff fdba 	bl	8004e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005324:	bf00      	nop
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b21      	cmp	r3, #33	@ 0x21
 800533e:	d13e      	bne.n	80053be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005348:	d114      	bne.n	8005374 <UART_Transmit_IT+0x48>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d110      	bne.n	8005374 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005366:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	1c9a      	adds	r2, r3, #2
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	621a      	str	r2, [r3, #32]
 8005372:	e008      	b.n	8005386 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	1c59      	adds	r1, r3, #1
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6211      	str	r1, [r2, #32]
 800537e:	781a      	ldrb	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29b      	uxth	r3, r3
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	4619      	mov	r1, r3
 8005394:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10f      	bne.n	80053ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	e000      	b.n	80053c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053be:	2302      	movs	r3, #2
  }
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff fd35 	bl	8004e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08c      	sub	sp, #48	@ 0x30
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005408:	2300      	movs	r3, #0
 800540a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b22      	cmp	r3, #34	@ 0x22
 8005416:	f040 80aa 	bne.w	800556e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005422:	d115      	bne.n	8005450 <UART_Receive_IT+0x54>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d111      	bne.n	8005450 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005430:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	b29b      	uxth	r3, r3
 800543a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543e:	b29a      	uxth	r2, r3
 8005440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005442:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005448:	1c9a      	adds	r2, r3, #2
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	629a      	str	r2, [r3, #40]	@ 0x28
 800544e:	e024      	b.n	800549a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005454:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800545e:	d007      	beq.n	8005470 <UART_Receive_IT+0x74>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10a      	bne.n	800547e <UART_Receive_IT+0x82>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d106      	bne.n	800547e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	b2da      	uxtb	r2, r3
 8005478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547a:	701a      	strb	r2, [r3, #0]
 800547c:	e008      	b.n	8005490 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800548a:	b2da      	uxtb	r2, r3
 800548c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	4619      	mov	r1, r3
 80054a8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d15d      	bne.n	800556a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0220 	bic.w	r2, r2, #32
 80054bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0201 	bic.w	r2, r2, #1
 80054dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d135      	bne.n	8005560 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	330c      	adds	r3, #12
 8005500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	613b      	str	r3, [r7, #16]
   return(result);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f023 0310 	bic.w	r3, r3, #16
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	330c      	adds	r3, #12
 8005518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800551a:	623a      	str	r2, [r7, #32]
 800551c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	69f9      	ldr	r1, [r7, #28]
 8005520:	6a3a      	ldr	r2, [r7, #32]
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	61bb      	str	r3, [r7, #24]
   return(result);
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e5      	bne.n	80054fa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b10      	cmp	r3, #16
 800553a:	d10a      	bne.n	8005552 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7fb fc7d 	bl	8000e58 <HAL_UARTEx_RxEventCallback>
 800555e:	e002      	b.n	8005566 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff fc85 	bl	8004e70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	e002      	b.n	8005570 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	e000      	b.n	8005570 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800556e:	2302      	movs	r3, #2
  }
}
 8005570:	4618      	mov	r0, r3
 8005572:	3730      	adds	r7, #48	@ 0x30
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800557c:	b0c0      	sub	sp, #256	@ 0x100
 800557e:	af00      	add	r7, sp, #0
 8005580:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005594:	68d9      	ldr	r1, [r3, #12]
 8005596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	ea40 0301 	orr.w	r3, r0, r1
 80055a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	431a      	orrs	r2, r3
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055d0:	f021 010c 	bic.w	r1, r1, #12
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055de:	430b      	orrs	r3, r1
 80055e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f2:	6999      	ldr	r1, [r3, #24]
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	ea40 0301 	orr.w	r3, r0, r1
 80055fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	4b8f      	ldr	r3, [pc, #572]	@ (8005844 <UART_SetConfig+0x2cc>)
 8005608:	429a      	cmp	r2, r3
 800560a:	d005      	beq.n	8005618 <UART_SetConfig+0xa0>
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	4b8d      	ldr	r3, [pc, #564]	@ (8005848 <UART_SetConfig+0x2d0>)
 8005614:	429a      	cmp	r2, r3
 8005616:	d104      	bne.n	8005622 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005618:	f7fe fdaa 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 800561c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005620:	e003      	b.n	800562a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005622:	f7fe fd91 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8005626:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005634:	f040 810c 	bne.w	8005850 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800563c:	2200      	movs	r2, #0
 800563e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005642:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005646:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800564a:	4622      	mov	r2, r4
 800564c:	462b      	mov	r3, r5
 800564e:	1891      	adds	r1, r2, r2
 8005650:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005652:	415b      	adcs	r3, r3
 8005654:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005656:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800565a:	4621      	mov	r1, r4
 800565c:	eb12 0801 	adds.w	r8, r2, r1
 8005660:	4629      	mov	r1, r5
 8005662:	eb43 0901 	adc.w	r9, r3, r1
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	f04f 0300 	mov.w	r3, #0
 800566e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800567a:	4690      	mov	r8, r2
 800567c:	4699      	mov	r9, r3
 800567e:	4623      	mov	r3, r4
 8005680:	eb18 0303 	adds.w	r3, r8, r3
 8005684:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005688:	462b      	mov	r3, r5
 800568a:	eb49 0303 	adc.w	r3, r9, r3
 800568e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800569e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80056a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056a6:	460b      	mov	r3, r1
 80056a8:	18db      	adds	r3, r3, r3
 80056aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80056ac:	4613      	mov	r3, r2
 80056ae:	eb42 0303 	adc.w	r3, r2, r3
 80056b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80056b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056bc:	f7fa fd84 	bl	80001c8 <__aeabi_uldivmod>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4b61      	ldr	r3, [pc, #388]	@ (800584c <UART_SetConfig+0x2d4>)
 80056c6:	fba3 2302 	umull	r2, r3, r3, r2
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	011c      	lsls	r4, r3, #4
 80056ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056e0:	4642      	mov	r2, r8
 80056e2:	464b      	mov	r3, r9
 80056e4:	1891      	adds	r1, r2, r2
 80056e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056e8:	415b      	adcs	r3, r3
 80056ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056f0:	4641      	mov	r1, r8
 80056f2:	eb12 0a01 	adds.w	sl, r2, r1
 80056f6:	4649      	mov	r1, r9
 80056f8:	eb43 0b01 	adc.w	fp, r3, r1
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005708:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800570c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005710:	4692      	mov	sl, r2
 8005712:	469b      	mov	fp, r3
 8005714:	4643      	mov	r3, r8
 8005716:	eb1a 0303 	adds.w	r3, sl, r3
 800571a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800571e:	464b      	mov	r3, r9
 8005720:	eb4b 0303 	adc.w	r3, fp, r3
 8005724:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005734:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005738:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800573c:	460b      	mov	r3, r1
 800573e:	18db      	adds	r3, r3, r3
 8005740:	643b      	str	r3, [r7, #64]	@ 0x40
 8005742:	4613      	mov	r3, r2
 8005744:	eb42 0303 	adc.w	r3, r2, r3
 8005748:	647b      	str	r3, [r7, #68]	@ 0x44
 800574a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800574e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005752:	f7fa fd39 	bl	80001c8 <__aeabi_uldivmod>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4611      	mov	r1, r2
 800575c:	4b3b      	ldr	r3, [pc, #236]	@ (800584c <UART_SetConfig+0x2d4>)
 800575e:	fba3 2301 	umull	r2, r3, r3, r1
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	2264      	movs	r2, #100	@ 0x64
 8005766:	fb02 f303 	mul.w	r3, r2, r3
 800576a:	1acb      	subs	r3, r1, r3
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005772:	4b36      	ldr	r3, [pc, #216]	@ (800584c <UART_SetConfig+0x2d4>)
 8005774:	fba3 2302 	umull	r2, r3, r3, r2
 8005778:	095b      	lsrs	r3, r3, #5
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005780:	441c      	add	r4, r3
 8005782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005786:	2200      	movs	r2, #0
 8005788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800578c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005790:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005794:	4642      	mov	r2, r8
 8005796:	464b      	mov	r3, r9
 8005798:	1891      	adds	r1, r2, r2
 800579a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800579c:	415b      	adcs	r3, r3
 800579e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80057a4:	4641      	mov	r1, r8
 80057a6:	1851      	adds	r1, r2, r1
 80057a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80057aa:	4649      	mov	r1, r9
 80057ac:	414b      	adcs	r3, r1
 80057ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80057b0:	f04f 0200 	mov.w	r2, #0
 80057b4:	f04f 0300 	mov.w	r3, #0
 80057b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057bc:	4659      	mov	r1, fp
 80057be:	00cb      	lsls	r3, r1, #3
 80057c0:	4651      	mov	r1, sl
 80057c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057c6:	4651      	mov	r1, sl
 80057c8:	00ca      	lsls	r2, r1, #3
 80057ca:	4610      	mov	r0, r2
 80057cc:	4619      	mov	r1, r3
 80057ce:	4603      	mov	r3, r0
 80057d0:	4642      	mov	r2, r8
 80057d2:	189b      	adds	r3, r3, r2
 80057d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057d8:	464b      	mov	r3, r9
 80057da:	460a      	mov	r2, r1
 80057dc:	eb42 0303 	adc.w	r3, r2, r3
 80057e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057f8:	460b      	mov	r3, r1
 80057fa:	18db      	adds	r3, r3, r3
 80057fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057fe:	4613      	mov	r3, r2
 8005800:	eb42 0303 	adc.w	r3, r2, r3
 8005804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005806:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800580a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800580e:	f7fa fcdb 	bl	80001c8 <__aeabi_uldivmod>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4b0d      	ldr	r3, [pc, #52]	@ (800584c <UART_SetConfig+0x2d4>)
 8005818:	fba3 1302 	umull	r1, r3, r3, r2
 800581c:	095b      	lsrs	r3, r3, #5
 800581e:	2164      	movs	r1, #100	@ 0x64
 8005820:	fb01 f303 	mul.w	r3, r1, r3
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	3332      	adds	r3, #50	@ 0x32
 800582a:	4a08      	ldr	r2, [pc, #32]	@ (800584c <UART_SetConfig+0x2d4>)
 800582c:	fba2 2303 	umull	r2, r3, r2, r3
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	f003 0207 	and.w	r2, r3, #7
 8005836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4422      	add	r2, r4
 800583e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005840:	e106      	b.n	8005a50 <UART_SetConfig+0x4d8>
 8005842:	bf00      	nop
 8005844:	40011000 	.word	0x40011000
 8005848:	40011400 	.word	0x40011400
 800584c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005854:	2200      	movs	r2, #0
 8005856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800585a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800585e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005862:	4642      	mov	r2, r8
 8005864:	464b      	mov	r3, r9
 8005866:	1891      	adds	r1, r2, r2
 8005868:	6239      	str	r1, [r7, #32]
 800586a:	415b      	adcs	r3, r3
 800586c:	627b      	str	r3, [r7, #36]	@ 0x24
 800586e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005872:	4641      	mov	r1, r8
 8005874:	1854      	adds	r4, r2, r1
 8005876:	4649      	mov	r1, r9
 8005878:	eb43 0501 	adc.w	r5, r3, r1
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	00eb      	lsls	r3, r5, #3
 8005886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800588a:	00e2      	lsls	r2, r4, #3
 800588c:	4614      	mov	r4, r2
 800588e:	461d      	mov	r5, r3
 8005890:	4643      	mov	r3, r8
 8005892:	18e3      	adds	r3, r4, r3
 8005894:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005898:	464b      	mov	r3, r9
 800589a:	eb45 0303 	adc.w	r3, r5, r3
 800589e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	f04f 0300 	mov.w	r3, #0
 80058ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058be:	4629      	mov	r1, r5
 80058c0:	008b      	lsls	r3, r1, #2
 80058c2:	4621      	mov	r1, r4
 80058c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058c8:	4621      	mov	r1, r4
 80058ca:	008a      	lsls	r2, r1, #2
 80058cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058d0:	f7fa fc7a 	bl	80001c8 <__aeabi_uldivmod>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4b60      	ldr	r3, [pc, #384]	@ (8005a5c <UART_SetConfig+0x4e4>)
 80058da:	fba3 2302 	umull	r2, r3, r3, r2
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	011c      	lsls	r4, r3, #4
 80058e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058f4:	4642      	mov	r2, r8
 80058f6:	464b      	mov	r3, r9
 80058f8:	1891      	adds	r1, r2, r2
 80058fa:	61b9      	str	r1, [r7, #24]
 80058fc:	415b      	adcs	r3, r3
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005904:	4641      	mov	r1, r8
 8005906:	1851      	adds	r1, r2, r1
 8005908:	6139      	str	r1, [r7, #16]
 800590a:	4649      	mov	r1, r9
 800590c:	414b      	adcs	r3, r1
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800591c:	4659      	mov	r1, fp
 800591e:	00cb      	lsls	r3, r1, #3
 8005920:	4651      	mov	r1, sl
 8005922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005926:	4651      	mov	r1, sl
 8005928:	00ca      	lsls	r2, r1, #3
 800592a:	4610      	mov	r0, r2
 800592c:	4619      	mov	r1, r3
 800592e:	4603      	mov	r3, r0
 8005930:	4642      	mov	r2, r8
 8005932:	189b      	adds	r3, r3, r2
 8005934:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005938:	464b      	mov	r3, r9
 800593a:	460a      	mov	r2, r1
 800593c:	eb42 0303 	adc.w	r3, r2, r3
 8005940:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800594e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800595c:	4649      	mov	r1, r9
 800595e:	008b      	lsls	r3, r1, #2
 8005960:	4641      	mov	r1, r8
 8005962:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005966:	4641      	mov	r1, r8
 8005968:	008a      	lsls	r2, r1, #2
 800596a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800596e:	f7fa fc2b 	bl	80001c8 <__aeabi_uldivmod>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4611      	mov	r1, r2
 8005978:	4b38      	ldr	r3, [pc, #224]	@ (8005a5c <UART_SetConfig+0x4e4>)
 800597a:	fba3 2301 	umull	r2, r3, r3, r1
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	2264      	movs	r2, #100	@ 0x64
 8005982:	fb02 f303 	mul.w	r3, r2, r3
 8005986:	1acb      	subs	r3, r1, r3
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	3332      	adds	r3, #50	@ 0x32
 800598c:	4a33      	ldr	r2, [pc, #204]	@ (8005a5c <UART_SetConfig+0x4e4>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005998:	441c      	add	r4, r3
 800599a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800599e:	2200      	movs	r2, #0
 80059a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80059a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80059a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80059a8:	4642      	mov	r2, r8
 80059aa:	464b      	mov	r3, r9
 80059ac:	1891      	adds	r1, r2, r2
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	415b      	adcs	r3, r3
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059b8:	4641      	mov	r1, r8
 80059ba:	1851      	adds	r1, r2, r1
 80059bc:	6039      	str	r1, [r7, #0]
 80059be:	4649      	mov	r1, r9
 80059c0:	414b      	adcs	r3, r1
 80059c2:	607b      	str	r3, [r7, #4]
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059d0:	4659      	mov	r1, fp
 80059d2:	00cb      	lsls	r3, r1, #3
 80059d4:	4651      	mov	r1, sl
 80059d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059da:	4651      	mov	r1, sl
 80059dc:	00ca      	lsls	r2, r1, #3
 80059de:	4610      	mov	r0, r2
 80059e0:	4619      	mov	r1, r3
 80059e2:	4603      	mov	r3, r0
 80059e4:	4642      	mov	r2, r8
 80059e6:	189b      	adds	r3, r3, r2
 80059e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059ea:	464b      	mov	r3, r9
 80059ec:	460a      	mov	r2, r1
 80059ee:	eb42 0303 	adc.w	r3, r2, r3
 80059f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80059fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	f04f 0300 	mov.w	r3, #0
 8005a08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a0c:	4649      	mov	r1, r9
 8005a0e:	008b      	lsls	r3, r1, #2
 8005a10:	4641      	mov	r1, r8
 8005a12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a16:	4641      	mov	r1, r8
 8005a18:	008a      	lsls	r2, r1, #2
 8005a1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a1e:	f7fa fbd3 	bl	80001c8 <__aeabi_uldivmod>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4b0d      	ldr	r3, [pc, #52]	@ (8005a5c <UART_SetConfig+0x4e4>)
 8005a28:	fba3 1302 	umull	r1, r3, r3, r2
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	2164      	movs	r1, #100	@ 0x64
 8005a30:	fb01 f303 	mul.w	r3, r1, r3
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	3332      	adds	r3, #50	@ 0x32
 8005a3a:	4a08      	ldr	r2, [pc, #32]	@ (8005a5c <UART_SetConfig+0x4e4>)
 8005a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a40:	095b      	lsrs	r3, r3, #5
 8005a42:	f003 020f 	and.w	r2, r3, #15
 8005a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4422      	add	r2, r4
 8005a4e:	609a      	str	r2, [r3, #8]
}
 8005a50:	bf00      	nop
 8005a52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a56:	46bd      	mov	sp, r7
 8005a58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a5c:	51eb851f 	.word	0x51eb851f

08005a60 <memset>:
 8005a60:	4402      	add	r2, r0
 8005a62:	4603      	mov	r3, r0
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d100      	bne.n	8005a6a <memset+0xa>
 8005a68:	4770      	bx	lr
 8005a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a6e:	e7f9      	b.n	8005a64 <memset+0x4>

08005a70 <__libc_init_array>:
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	4d0d      	ldr	r5, [pc, #52]	@ (8005aa8 <__libc_init_array+0x38>)
 8005a74:	4c0d      	ldr	r4, [pc, #52]	@ (8005aac <__libc_init_array+0x3c>)
 8005a76:	1b64      	subs	r4, r4, r5
 8005a78:	10a4      	asrs	r4, r4, #2
 8005a7a:	2600      	movs	r6, #0
 8005a7c:	42a6      	cmp	r6, r4
 8005a7e:	d109      	bne.n	8005a94 <__libc_init_array+0x24>
 8005a80:	4d0b      	ldr	r5, [pc, #44]	@ (8005ab0 <__libc_init_array+0x40>)
 8005a82:	4c0c      	ldr	r4, [pc, #48]	@ (8005ab4 <__libc_init_array+0x44>)
 8005a84:	f000 f818 	bl	8005ab8 <_init>
 8005a88:	1b64      	subs	r4, r4, r5
 8005a8a:	10a4      	asrs	r4, r4, #2
 8005a8c:	2600      	movs	r6, #0
 8005a8e:	42a6      	cmp	r6, r4
 8005a90:	d105      	bne.n	8005a9e <__libc_init_array+0x2e>
 8005a92:	bd70      	pop	{r4, r5, r6, pc}
 8005a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a98:	4798      	blx	r3
 8005a9a:	3601      	adds	r6, #1
 8005a9c:	e7ee      	b.n	8005a7c <__libc_init_array+0xc>
 8005a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa2:	4798      	blx	r3
 8005aa4:	3601      	adds	r6, #1
 8005aa6:	e7f2      	b.n	8005a8e <__libc_init_array+0x1e>
 8005aa8:	08005b08 	.word	0x08005b08
 8005aac:	08005b08 	.word	0x08005b08
 8005ab0:	08005b08 	.word	0x08005b08
 8005ab4:	08005b0c 	.word	0x08005b0c

08005ab8 <_init>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	bf00      	nop
 8005abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005abe:	bc08      	pop	{r3}
 8005ac0:	469e      	mov	lr, r3
 8005ac2:	4770      	bx	lr

08005ac4 <_fini>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	bf00      	nop
 8005ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aca:	bc08      	pop	{r3}
 8005acc:	469e      	mov	lr, r3
 8005ace:	4770      	bx	lr
