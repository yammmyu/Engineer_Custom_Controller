
Engineer_Custom_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f24  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080030ac  080030ac  000040ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c4  080030c4  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080030c4  080030c4  000040c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030cc  080030cc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030cc  080030cc  000040cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030d0  080030d0  000040d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000011c  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  20000128  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009b03  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c6c  00000000  00000000  0000eb3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000820  00000000  00000000  000107b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000623  00000000  00000000  00010fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002012f  00000000  00000000  000115f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a70c  00000000  00000000  00031722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1a45  00000000  00000000  0003be2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fd873  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fbc  00000000  00000000  000fd8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  000ff874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003094 	.word	0x08003094

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003094 	.word	0x08003094

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004f8:	4b17      	ldr	r3, [pc, #92]	@ (8000558 <MX_CAN1_Init+0x64>)
 80004fa:	4a18      	ldr	r2, [pc, #96]	@ (800055c <MX_CAN1_Init+0x68>)
 80004fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80004fe:	4b16      	ldr	r3, [pc, #88]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000500:	2203      	movs	r2, #3
 8000502:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000504:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800050a:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <MX_CAN1_Init+0x64>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000510:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000512:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000516:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000518:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <MX_CAN1_Init+0x64>)
 800051a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800051e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000520:	4b0d      	ldr	r3, [pc, #52]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000528:	2200      	movs	r2, #0
 800052a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800052c:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <MX_CAN1_Init+0x64>)
 800052e:	2200      	movs	r2, #0
 8000530:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000534:	2200      	movs	r2, #0
 8000536:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000538:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <MX_CAN1_Init+0x64>)
 800053a:	2200      	movs	r2, #0
 800053c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000540:	2200      	movs	r2, #0
 8000542:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000544:	4804      	ldr	r0, [pc, #16]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000546:	f000 fd15 	bl	8000f74 <HAL_CAN_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000550:	f000 f9e2 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000028 	.word	0x20000028
 800055c:	40006400 	.word	0x40006400

08000560 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000564:	4b17      	ldr	r3, [pc, #92]	@ (80005c4 <MX_CAN2_Init+0x64>)
 8000566:	4a18      	ldr	r2, [pc, #96]	@ (80005c8 <MX_CAN2_Init+0x68>)
 8000568:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800056a:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <MX_CAN2_Init+0x64>)
 800056c:	2203      	movs	r2, #3
 800056e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000570:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <MX_CAN2_Init+0x64>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000576:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <MX_CAN2_Init+0x64>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 800057c:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <MX_CAN2_Init+0x64>)
 800057e:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000582:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000584:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <MX_CAN2_Init+0x64>)
 8000586:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800058a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <MX_CAN2_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <MX_CAN2_Init+0x64>)
 8000594:	2200      	movs	r2, #0
 8000596:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <MX_CAN2_Init+0x64>)
 800059a:	2200      	movs	r2, #0
 800059c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800059e:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <MX_CAN2_Init+0x64>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80005a4:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <MX_CAN2_Init+0x64>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80005aa:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <MX_CAN2_Init+0x64>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80005b0:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <MX_CAN2_Init+0x64>)
 80005b2:	f000 fcdf 	bl	8000f74 <HAL_CAN_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80005bc:	f000 f9ac 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000050 	.word	0x20000050
 80005c8:	40006800 	.word	0x40006800

080005cc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08c      	sub	sp, #48	@ 0x30
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a4a      	ldr	r2, [pc, #296]	@ (8000714 <HAL_CAN_MspInit+0x148>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d13d      	bne.n	800066a <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80005ee:	4b4a      	ldr	r3, [pc, #296]	@ (8000718 <HAL_CAN_MspInit+0x14c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	4a48      	ldr	r2, [pc, #288]	@ (8000718 <HAL_CAN_MspInit+0x14c>)
 80005f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80005f8:	4b47      	ldr	r3, [pc, #284]	@ (8000718 <HAL_CAN_MspInit+0x14c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d10d      	bne.n	800061c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
 8000604:	4b45      	ldr	r3, [pc, #276]	@ (800071c <HAL_CAN_MspInit+0x150>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	4a44      	ldr	r2, [pc, #272]	@ (800071c <HAL_CAN_MspInit+0x150>)
 800060a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800060e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000610:	4b42      	ldr	r3, [pc, #264]	@ (800071c <HAL_CAN_MspInit+0x150>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	4b3e      	ldr	r3, [pc, #248]	@ (800071c <HAL_CAN_MspInit+0x150>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000624:	4a3d      	ldr	r2, [pc, #244]	@ (800071c <HAL_CAN_MspInit+0x150>)
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	6313      	str	r3, [r2, #48]	@ 0x30
 800062c:	4b3b      	ldr	r3, [pc, #236]	@ (800071c <HAL_CAN_MspInit+0x150>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000630:	f003 0308 	and.w	r3, r3, #8
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000638:	2303      	movs	r3, #3
 800063a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000648:	2309      	movs	r3, #9
 800064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	4619      	mov	r1, r3
 8000652:	4833      	ldr	r0, [pc, #204]	@ (8000720 <HAL_CAN_MspInit+0x154>)
 8000654:	f001 fc06 	bl	8001e64 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	2014      	movs	r0, #20
 800065e:	f001 fbca 	bl	8001df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000662:	2014      	movs	r0, #20
 8000664:	f001 fbe3 	bl	8001e2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000668:	e04f      	b.n	800070a <HAL_CAN_MspInit+0x13e>
  else if(canHandle->Instance==CAN2)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a2d      	ldr	r2, [pc, #180]	@ (8000724 <HAL_CAN_MspInit+0x158>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d14a      	bne.n	800070a <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <HAL_CAN_MspInit+0x150>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	@ (800071c <HAL_CAN_MspInit+0x150>)
 800067e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <HAL_CAN_MspInit+0x150>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000690:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <HAL_CAN_MspInit+0x14c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	4a20      	ldr	r2, [pc, #128]	@ (8000718 <HAL_CAN_MspInit+0x14c>)
 8000698:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800069a:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <HAL_CAN_MspInit+0x14c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d10d      	bne.n	80006be <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <HAL_CAN_MspInit+0x150>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006aa:	4a1c      	ldr	r2, [pc, #112]	@ (800071c <HAL_CAN_MspInit+0x150>)
 80006ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <HAL_CAN_MspInit+0x150>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	4b16      	ldr	r3, [pc, #88]	@ (800071c <HAL_CAN_MspInit+0x150>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a15      	ldr	r2, [pc, #84]	@ (800071c <HAL_CAN_MspInit+0x150>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b13      	ldr	r3, [pc, #76]	@ (800071c <HAL_CAN_MspInit+0x150>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80006da:	2360      	movs	r3, #96	@ 0x60
 80006dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e6:	2303      	movs	r3, #3
 80006e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80006ea:	2309      	movs	r3, #9
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4619      	mov	r1, r3
 80006f4:	480c      	ldr	r0, [pc, #48]	@ (8000728 <HAL_CAN_MspInit+0x15c>)
 80006f6:	f001 fbb5 	bl	8001e64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	2040      	movs	r0, #64	@ 0x40
 8000700:	f001 fb79 	bl	8001df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000704:	2040      	movs	r0, #64	@ 0x40
 8000706:	f001 fb92 	bl	8001e2e <HAL_NVIC_EnableIRQ>
}
 800070a:	bf00      	nop
 800070c:	3730      	adds	r7, #48	@ 0x30
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40006400 	.word	0x40006400
 8000718:	20000078 	.word	0x20000078
 800071c:	40023800 	.word	0x40023800
 8000720:	40020c00 	.word	0x40020c00
 8000724:	40006800 	.word	0x40006800
 8000728:	40020400 	.word	0x40020400

0800072c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	@ 0x28
 8000730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b2e      	ldr	r3, [pc, #184]	@ (8000800 <MX_GPIO_Init+0xd4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a2d      	ldr	r2, [pc, #180]	@ (8000800 <MX_GPIO_Init+0xd4>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b2b      	ldr	r3, [pc, #172]	@ (8000800 <MX_GPIO_Init+0xd4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b27      	ldr	r3, [pc, #156]	@ (8000800 <MX_GPIO_Init+0xd4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a26      	ldr	r2, [pc, #152]	@ (8000800 <MX_GPIO_Init+0xd4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <MX_GPIO_Init+0xd4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <MX_GPIO_Init+0xd4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a1f      	ldr	r2, [pc, #124]	@ (8000800 <MX_GPIO_Init+0xd4>)
 8000784:	f043 0308 	orr.w	r3, r3, #8
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_GPIO_Init+0xd4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <MX_GPIO_Init+0xd4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a18      	ldr	r2, [pc, #96]	@ (8000800 <MX_GPIO_Init+0xd4>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_GPIO_Init+0xd4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_GPIO_Init+0xd4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a11      	ldr	r2, [pc, #68]	@ (8000800 <MX_GPIO_Init+0xd4>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_GPIO_Init+0xd4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80007d4:	480b      	ldr	r0, [pc, #44]	@ (8000804 <MX_GPIO_Init+0xd8>)
 80007d6:	f001 fce1 	bl	800219c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 80007da:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_GPIO_Init+0xd8>)
 80007f4:	f001 fb36 	bl	8001e64 <HAL_GPIO_Init>

}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	@ 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40021c00 	.word	0x40021c00

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fb1c 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f818 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f7ff ff8a 	bl	800072c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000818:	f7ff fe6c 	bl	80004f4 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 800081c:	f000 fa78 	bl	8000d10 <MX_USART3_UART_Init>
  MX_CAN2_Init();
 8000820:	f7ff fe9e 	bl	8000560 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  Enable_CAN2();
 8000824:	f000 f8ce 	bl	80009c4 <Enable_CAN2>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8000828:	2064      	movs	r0, #100	@ 0x64
 800082a:	f000 fb7f 	bl	8000f2c <HAL_Delay>
	  Set_GM6020_Current(1000, 1000, 1000);
 800082e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000832:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000836:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800083a:	f000 f903 	bl	8000a44 <Set_GM6020_Current>
	  HAL_Delay(100);
 800083e:	bf00      	nop
 8000840:	e7f2      	b.n	8000828 <main+0x20>
	...

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b094      	sub	sp, #80	@ 0x50
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	2230      	movs	r2, #48	@ 0x30
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f002 fbf2 	bl	800303c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4b28      	ldr	r3, [pc, #160]	@ (8000910 <SystemClock_Config+0xcc>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000870:	4a27      	ldr	r2, [pc, #156]	@ (8000910 <SystemClock_Config+0xcc>)
 8000872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000876:	6413      	str	r3, [r2, #64]	@ 0x40
 8000878:	4b25      	ldr	r3, [pc, #148]	@ (8000910 <SystemClock_Config+0xcc>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	4b22      	ldr	r3, [pc, #136]	@ (8000914 <SystemClock_Config+0xd0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a21      	ldr	r2, [pc, #132]	@ (8000914 <SystemClock_Config+0xd0>)
 800088e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <SystemClock_Config+0xd0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a0:	2301      	movs	r3, #1
 80008a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80008b4:	230c      	movs	r3, #12
 80008b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008b8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008be:	2302      	movs	r3, #2
 80008c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c2:	2304      	movs	r3, #4
 80008c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fc9a 	bl	8002204 <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008d6:	f000 f81f 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2302      	movs	r3, #2
 80008e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2105      	movs	r1, #5
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 fefb 	bl	80026f4 <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000904:	f000 f808 	bl	8000918 <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3750      	adds	r7, #80	@ 0x50
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000922:	4807      	ldr	r0, [pc, #28]	@ (8000940 <Error_Handler+0x28>)
 8000924:	f001 fc3a 	bl	800219c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 800092c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000930:	4803      	ldr	r0, [pc, #12]	@ (8000940 <Error_Handler+0x28>)
 8000932:	f001 fc4c 	bl	80021ce <HAL_GPIO_TogglePin>
      HAL_Delay(250); // blink every 250ms
 8000936:	20fa      	movs	r0, #250	@ 0xfa
 8000938:	f000 faf8 	bl	8000f2c <HAL_Delay>
      HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 800093c:	bf00      	nop
 800093e:	e7f5      	b.n	800092c <Error_Handler+0x14>
 8000940:	40021c00 	.word	0x40021c00

08000944 <get_motor_measure>:

motor_measure_t all_motors[6];

//static in-line function to decode the CAN message feedback
static inline void get_motor_measure(motor_measure_t *ptr, const uint8_t *data)
    {
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
        ptr ->last_ecd			= ptr->ecd;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	b21a      	sxth	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	811a      	strh	r2, [r3, #8]
        ptr ->ecd				= (uint16_t)((data[0] << 8) | data[1]);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b21b      	sxth	r3, r3
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	b21a      	sxth	r2, r3
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b21b      	sxth	r3, r3
 800096a:	4313      	orrs	r3, r2
 800096c:	b21b      	sxth	r3, r3
 800096e:	b29a      	uxth	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	801a      	strh	r2, [r3, #0]
        ptr ->speed_rpm 		= (uint16_t)((data)[2] << 8 | (data)[3]);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	3302      	adds	r3, #2
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b21b      	sxth	r3, r3
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	3303      	adds	r3, #3
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b21b      	sxth	r3, r3
 8000988:	4313      	orrs	r3, r2
 800098a:	b21a      	sxth	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	805a      	strh	r2, [r3, #2]
        ptr ->given_current		= (uint16_t)((data)[4] << 8 | (data)[5]);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	3304      	adds	r3, #4
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b21b      	sxth	r3, r3
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	b21a      	sxth	r2, r3
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	3305      	adds	r3, #5
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	809a      	strh	r2, [r3, #4]
        ptr ->temperature 		= (data)[6];
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	3306      	adds	r3, #6
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	719a      	strb	r2, [r3, #6]
    }
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <Enable_CAN2>:
/* ------------------------------ Initialization of CAN, filter Setup）------------------------------ */
void Enable_CAN2(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	@ 0x28
 80009c8:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef CAN_Filter;

    CAN_Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
    CAN_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61fb      	str	r3, [r7, #28]
    CAN_Filter.FilterBank = 14;             // start filters for CAN2 here
 80009d2:	230e      	movs	r3, #14
 80009d4:	617b      	str	r3, [r7, #20]
    CAN_Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
    CAN_Filter.SlaveStartFilterBank = 14;   // 0–13 for CAN1, 14–27 for CAN2
 80009da:	230e      	movs	r3, #14
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
    CAN_Filter.FilterActivation = CAN_FILTER_ENABLE;
 80009de:	2301      	movs	r3, #1
 80009e0:	623b      	str	r3, [r7, #32]
    CAN_Filter.FilterIdHigh = 0x0000;
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
    CAN_Filter.FilterIdLow = 0x0000;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
    CAN_Filter.FilterMaskIdHigh = 0x0000;   // accept all IDs
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
    CAN_Filter.FilterMaskIdLow = 0x0000;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]

    if (HAL_CAN_ConfigFilter(&hcan2, &CAN_Filter) != HAL_OK){
 80009f2:	463b      	mov	r3, r7
 80009f4:	4619      	mov	r1, r3
 80009f6:	4812      	ldr	r0, [pc, #72]	@ (8000a40 <Enable_CAN2+0x7c>)
 80009f8:	f000 fbb8 	bl	800116c <HAL_CAN_ConfigFilter>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <Enable_CAN2+0x42>
        Error_Handler();
 8000a02:	f7ff ff89 	bl	8000918 <Error_Handler>
    }
    // 👇 Add this check here
    if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 8000a06:	480e      	ldr	r0, [pc, #56]	@ (8000a40 <Enable_CAN2+0x7c>)
 8000a08:	f000 fc8e 	bl	8001328 <HAL_CAN_Start>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <Enable_CAN2+0x52>
    	Error_Handler();
 8000a12:	f7ff ff81 	bl	8000918 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000a16:	2102      	movs	r1, #2
 8000a18:	4809      	ldr	r0, [pc, #36]	@ (8000a40 <Enable_CAN2+0x7c>)
 8000a1a:	f000 febb 	bl	8001794 <HAL_CAN_ActivateNotification>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <Enable_CAN2+0x64>
    	Error_Handler();
 8000a24:	f7ff ff78 	bl	8000918 <Error_Handler>
    }

    HAL_CAN_Start(&hcan2);
 8000a28:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <Enable_CAN2+0x7c>)
 8000a2a:	f000 fc7d 	bl	8001328 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a2e:	2102      	movs	r1, #2
 8000a30:	4803      	ldr	r0, [pc, #12]	@ (8000a40 <Enable_CAN2+0x7c>)
 8000a32:	f000 feaf 	bl	8001794 <HAL_CAN_ActivateNotification>
}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	@ 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000050 	.word	0x20000050

08000a44 <Set_GM6020_Current>:


/* ------------------------------ 发送函数 ------------------------------ */
void Set_GM6020_Current(int16_t q1, int16_t q2, int16_t q3)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	@ 0x30
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	80bb      	strh	r3, [r7, #4]
 8000a52:	4613      	mov	r3, r2
 8000a54:	807b      	strh	r3, [r7, #2]
    uint8_t TxData[8];
    TxData[0] = (uint8_t)(q1>>8);
 8000a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a5a:	121b      	asrs	r3, r3, #8
 8000a5c:	b21b      	sxth	r3, r3
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    TxData[1] = (uint8_t)q1;
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    TxData[2] = (uint8_t)(q2>>8);
 8000a6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a70:	121b      	asrs	r3, r3, #8
 8000a72:	b21b      	sxth	r3, r3
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    TxData[3] = (uint8_t)q2;
 8000a7a:	88bb      	ldrh	r3, [r7, #4]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    TxData[4] = (uint8_t)(q3>>8);
 8000a82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a86:	121b      	asrs	r3, r3, #8
 8000a88:	b21b      	sxth	r3, r3
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    TxData[5] = (uint8_t)q3;
 8000a90:	887b      	ldrh	r3, [r7, #2]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    TxData[6] = (uint8_t)0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    TxData[7] = (uint8_t)0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    CAN_TxHeaderTypeDef TxHeader = {
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
 8000ab4:	615a      	str	r2, [r3, #20]
 8000ab6:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	2308      	movs	r3, #8
 8000abe:	623b      	str	r3, [r7, #32]
            .DLC = 8,
            .IDE = CAN_ID_STD,    // 标准帧
            .RTR = CAN_RTR_DATA,  // 数据帧
            .StdId = 0x2ff
    };
    uint32_t TxBox = CAN_TX_MAILBOX0;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
    if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxBox) != HAL_OK){
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000acc:	f107 0110 	add.w	r1, r7, #16
 8000ad0:	4807      	ldr	r0, [pc, #28]	@ (8000af0 <Set_GM6020_Current+0xac>)
 8000ad2:	f000 fc6d 	bl	80013b0 <HAL_CAN_AddTxMessage>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d005      	beq.n	8000ae8 <Set_GM6020_Current+0xa4>
        HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);//错误处理
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ae2:	4804      	ldr	r0, [pc, #16]	@ (8000af4 <Set_GM6020_Current+0xb0>)
 8000ae4:	f001 fb5a 	bl	800219c <HAL_GPIO_WritePin>
    }
}
 8000ae8:	bf00      	nop
 8000aea:	3730      	adds	r7, #48	@ 0x30
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000050 	.word	0x20000050
 8000af4:	40021c00 	.word	0x40021c00

08000af8 <motor_index_from_id>:
 * 0x205 --> 4
 * 0x206 --> 5
 * 0x207 --> 6
 * */
static int8_t motor_index_from_id(uint16_t id)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
	switch (id)
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000b08:	2b0a      	cmp	r3, #10
 8000b0a:	d825      	bhi.n	8000b58 <motor_index_from_id+0x60>
 8000b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b14 <motor_index_from_id+0x1c>)
 8000b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b12:	bf00      	nop
 8000b14:	08000b41 	.word	0x08000b41
 8000b18:	08000b45 	.word	0x08000b45
 8000b1c:	08000b49 	.word	0x08000b49
 8000b20:	08000b59 	.word	0x08000b59
 8000b24:	08000b59 	.word	0x08000b59
 8000b28:	08000b59 	.word	0x08000b59
 8000b2c:	08000b59 	.word	0x08000b59
 8000b30:	08000b59 	.word	0x08000b59
 8000b34:	08000b4d 	.word	0x08000b4d
 8000b38:	08000b51 	.word	0x08000b51
 8000b3c:	08000b55 	.word	0x08000b55
	{
		case CAN_M2006_M1_ID: return 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	e00b      	b.n	8000b5c <motor_index_from_id+0x64>
		case CAN_M2006_M2_ID: return 1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e009      	b.n	8000b5c <motor_index_from_id+0x64>
		case CAN_M2006_M3_ID: return 2;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	e007      	b.n	8000b5c <motor_index_from_id+0x64>
		case CAN_GM6020_M5_ID: return 3;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	e005      	b.n	8000b5c <motor_index_from_id+0x64>
		case CAN_GM6020_M6_ID: return 4;
 8000b50:	2304      	movs	r3, #4
 8000b52:	e003      	b.n	8000b5c <motor_index_from_id+0x64>
		case CAN_GM6020_M7_ID: return 5;
 8000b54:	2305      	movs	r3, #5
 8000b56:	e001      	b.n	8000b5c <motor_index_from_id+0x64>

		default: return -1; //safety, filters any noise
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <HAL_CAN_RxFifo0MsgPendingCallback>:
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
}
*/

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	@ 0x30
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];

    HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);  // 👈 Debug indicator
 8000b70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b74:	4823      	ldr	r0, [pc, #140]	@ (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000b76:	f001 fb2a 	bl	80021ce <HAL_GPIO_TogglePin>

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	f107 0210 	add.w	r2, r7, #16
 8000b82:	2100      	movs	r1, #0
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f000 fce3 	bl	8001550 <HAL_CAN_GetRxMessage>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d135      	bne.n	8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
    {
        HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);  // 👈 Debug indicator
 8000b90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b94:	481b      	ldr	r0, [pc, #108]	@ (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000b96:	f001 fb1a 	bl	80021ce <HAL_GPIO_TogglePin>

        int8_t idx = motor_index_from_id(rx_header.StdId);
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ffaa 	bl	8000af8 <motor_index_from_id>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (idx >= 0)
 8000baa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db24      	blt.n	8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
        {
            get_motor_measure(&all_motors[idx], rx_data);
 8000bb2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000bb6:	011b      	lsls	r3, r3, #4
 8000bb8:	4a13      	ldr	r2, [pc, #76]	@ (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000bba:	4413      	add	r3, r2
 8000bbc:	f107 0208 	add.w	r2, r7, #8
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff febe 	bl	8000944 <get_motor_measure>
            all_motors[idx].angle_deg = (all_motors[idx].ecd / 8192.0f) * 360.0f;
 8000bc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	@ (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000bce:	011b      	lsls	r3, r3, #4
 8000bd0:	4413      	add	r3, r2
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	ee07 3a90 	vmov	s15, r3
 8000bd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bdc:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
 8000be0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000be4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000be8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf0:	4a05      	ldr	r2, [pc, #20]	@ (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000bf2:	011b      	lsls	r3, r3, #4
 8000bf4:	4413      	add	r3, r2
 8000bf6:	330c      	adds	r3, #12
 8000bf8:	edc3 7a00 	vstr	s15, [r3]
        }
    }
}
 8000bfc:	bf00      	nop
 8000bfe:	3730      	adds	r7, #48	@ 0x30
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40021c00 	.word	0x40021c00
 8000c08:	2000007c 	.word	0x2000007c
 8000c0c:	46000000 	.word	0x46000000
 8000c10:	43b40000 	.word	0x43b40000

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c22:	4a0f      	ldr	r2, [pc, #60]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	4a08      	ldr	r2, [pc, #32]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <NMI_Handler+0x4>

08000c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cba:	f000 f917 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cc8:	4802      	ldr	r0, [pc, #8]	@ (8000cd4 <CAN1_RX0_IRQHandler+0x10>)
 8000cca:	f000 fd89 	bl	80017e0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000028 	.word	0x20000028

08000cd8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <CAN2_RX0_IRQHandler+0x10>)
 8000cde:	f000 fd7f 	bl	80017e0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000050 	.word	0x20000050

08000cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <SystemInit+0x20>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf6:	4a05      	ldr	r2, [pc, #20]	@ (8000d0c <SystemInit+0x20>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <MX_USART3_UART_Init+0x4c>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	@ (8000d60 <MX_USART3_UART_Init+0x50>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <MX_USART3_UART_Init+0x4c>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <MX_USART3_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <MX_USART3_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <MX_USART3_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <MX_USART3_UART_Init+0x4c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <MX_USART3_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <MX_USART3_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <MX_USART3_UART_Init+0x4c>)
 8000d48:	f001 feb4 	bl	8002ab4 <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d52:	f7ff fde1 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000dc 	.word	0x200000dc
 8000d60:	40004800 	.word	0x40004800

08000d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a19      	ldr	r2, [pc, #100]	@ (8000de8 <HAL_UART_MspInit+0x84>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d12c      	bne.n	8000de0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	4a17      	ldr	r2, [pc, #92]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000d90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a10      	ldr	r2, [pc, #64]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000dbe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <HAL_UART_MspInit+0x8c>)
 8000ddc:	f001 f842 	bl	8001e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000de0:	bf00      	nop
 8000de2:	3728      	adds	r7, #40	@ 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40004800 	.word	0x40004800
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020800 	.word	0x40020800

08000df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000df8:	f7ff ff78 	bl	8000cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	@ (8000e34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	@ (8000e40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e22:	f002 f913 	bl	800304c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e26:	f7ff fcef 	bl	8000808 <main>
  bx  lr    
 8000e2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e38:	080030d4 	.word	0x080030d4
  ldr r2, =_sbss
 8000e3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e40:	20000128 	.word	0x20000128

08000e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0d      	ldr	r2, [pc, #52]	@ (8000e88 <HAL_Init+0x40>)
 8000e52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e58:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <HAL_Init+0x40>)
 8000e5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	@ (8000e88 <HAL_Init+0x40>)
 8000e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 ffb5 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	200f      	movs	r0, #15
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff feca 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023c00 	.word	0x40023c00

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 ffcd 	bl	8001e4a <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f000 ff95 	bl	8001df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	@ (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000124 	.word	0x20000124

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	@ (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000124 	.word	0x20000124

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <HAL_Delay+0x44>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffde 	bl	8000f14 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008

08000f74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e0ed      	b.n	8001162 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff fb1a 	bl	80005cc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f042 0201 	orr.w	r2, r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fa8:	f7ff ffb4 	bl	8000f14 <HAL_GetTick>
 8000fac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fae:	e012      	b.n	8000fd6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fb0:	f7ff ffb0 	bl	8000f14 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b0a      	cmp	r3, #10
 8000fbc:	d90b      	bls.n	8000fd6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2205      	movs	r2, #5
 8000fce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e0c5      	b.n	8001162 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0e5      	beq.n	8000fb0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0202 	bic.w	r2, r2, #2
 8000ff2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ff4:	f7ff ff8e 	bl	8000f14 <HAL_GetTick>
 8000ff8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ffa:	e012      	b.n	8001022 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ffc:	f7ff ff8a 	bl	8000f14 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b0a      	cmp	r3, #10
 8001008:	d90b      	bls.n	8001022 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800100e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2205      	movs	r2, #5
 800101a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e09f      	b.n	8001162 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1e5      	bne.n	8000ffc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7e1b      	ldrb	r3, [r3, #24]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d108      	bne.n	800104a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	e007      	b.n	800105a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001058:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7e5b      	ldrb	r3, [r3, #25]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d108      	bne.n	8001074 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	e007      	b.n	8001084 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001082:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7e9b      	ldrb	r3, [r3, #26]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d108      	bne.n	800109e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0220 	orr.w	r2, r2, #32
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	e007      	b.n	80010ae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0220 	bic.w	r2, r2, #32
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7edb      	ldrb	r3, [r3, #27]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d108      	bne.n	80010c8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0210 	bic.w	r2, r2, #16
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	e007      	b.n	80010d8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0210 	orr.w	r2, r2, #16
 80010d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7f1b      	ldrb	r3, [r3, #28]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d108      	bne.n	80010f2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0208 	orr.w	r2, r2, #8
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e007      	b.n	8001102 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0208 	bic.w	r2, r2, #8
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7f5b      	ldrb	r3, [r3, #29]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d108      	bne.n	800111c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f042 0204 	orr.w	r2, r2, #4
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e007      	b.n	800112c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0204 	bic.w	r2, r2, #4
 800112a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	ea42 0103 	orr.w	r1, r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	1e5a      	subs	r2, r3, #1
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	430a      	orrs	r2, r1
 8001150:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800117c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 800117e:	7dfb      	ldrb	r3, [r7, #23]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d003      	beq.n	800118c <HAL_CAN_ConfigFilter+0x20>
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	2b02      	cmp	r3, #2
 8001188:	f040 80be 	bne.w	8001308 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800118c:	4b65      	ldr	r3, [pc, #404]	@ (8001324 <HAL_CAN_ConfigFilter+0x1b8>)
 800118e:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001196:	f043 0201 	orr.w	r2, r3, #1
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80011a6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	431a      	orrs	r2, r3
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	f003 031f 	and.w	r3, r3, #31
 80011cc:	2201      	movs	r2, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	43db      	mvns	r3, r3
 80011de:	401a      	ands	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d123      	bne.n	8001236 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	401a      	ands	r2, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001210:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	3248      	adds	r2, #72	@ 0x48
 8001216:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800122a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800122c:	6939      	ldr	r1, [r7, #16]
 800122e:	3348      	adds	r3, #72	@ 0x48
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	440b      	add	r3, r1
 8001234:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d122      	bne.n	8001284 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	431a      	orrs	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800125e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	3248      	adds	r2, #72	@ 0x48
 8001264:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001278:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800127a:	6939      	ldr	r1, [r7, #16]
 800127c:	3348      	adds	r3, #72	@ 0x48
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	440b      	add	r3, r1
 8001282:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d109      	bne.n	80012a0 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43db      	mvns	r3, r3
 8001296:	401a      	ands	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800129e:	e007      	b.n	80012b0 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	431a      	orrs	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d109      	bne.n	80012cc <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	401a      	ands	r2, r3
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80012ca:	e007      	b.n	80012dc <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	431a      	orrs	r2, r3
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d107      	bne.n	80012f4 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	431a      	orrs	r2, r3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012fa:	f023 0201 	bic.w	r2, r3, #1
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	e006      	b.n	8001316 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
  }
}
 8001316:	4618      	mov	r0, r3
 8001318:	371c      	adds	r7, #28
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40006400 	.word	0x40006400

08001328 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b01      	cmp	r3, #1
 800133a:	d12e      	bne.n	800139a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001354:	f7ff fdde 	bl	8000f14 <HAL_GetTick>
 8001358:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800135a:	e012      	b.n	8001382 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800135c:	f7ff fdda 	bl	8000f14 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b0a      	cmp	r3, #10
 8001368:	d90b      	bls.n	8001382 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2205      	movs	r2, #5
 800137a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e012      	b.n	80013a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1e5      	bne.n	800135c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e006      	b.n	80013a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
  }
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80013ce:	7ffb      	ldrb	r3, [r7, #31]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d003      	beq.n	80013dc <HAL_CAN_AddTxMessage+0x2c>
 80013d4:	7ffb      	ldrb	r3, [r7, #31]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	f040 80ad 	bne.w	8001536 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10a      	bne.n	80013fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d105      	bne.n	80013fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8095 	beq.w	8001526 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	0e1b      	lsrs	r3, r3, #24
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001406:	2201      	movs	r2, #1
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10d      	bne.n	8001434 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001422:	68f9      	ldr	r1, [r7, #12]
 8001424:	6809      	ldr	r1, [r1, #0]
 8001426:	431a      	orrs	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3318      	adds	r3, #24
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	440b      	add	r3, r1
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	e00f      	b.n	8001454 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800143e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001444:	68f9      	ldr	r1, [r7, #12]
 8001446:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001448:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3318      	adds	r3, #24
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	440b      	add	r3, r1
 8001452:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6819      	ldr	r1, [r3, #0]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	3318      	adds	r3, #24
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	440b      	add	r3, r1
 8001464:	3304      	adds	r3, #4
 8001466:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	7d1b      	ldrb	r3, [r3, #20]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d111      	bne.n	8001494 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3318      	adds	r3, #24
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	4413      	add	r3, r2
 800147c:	3304      	adds	r3, #4
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	6811      	ldr	r1, [r2, #0]
 8001484:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3318      	adds	r3, #24
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	440b      	add	r3, r1
 8001490:	3304      	adds	r3, #4
 8001492:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3307      	adds	r3, #7
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	061a      	lsls	r2, r3, #24
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3306      	adds	r3, #6
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	041b      	lsls	r3, r3, #16
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3305      	adds	r3, #5
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	4313      	orrs	r3, r2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	3204      	adds	r2, #4
 80014b4:	7812      	ldrb	r2, [r2, #0]
 80014b6:	4610      	mov	r0, r2
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	6811      	ldr	r1, [r2, #0]
 80014bc:	ea43 0200 	orr.w	r2, r3, r0
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	440b      	add	r3, r1
 80014c6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80014ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3303      	adds	r3, #3
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	061a      	lsls	r2, r3, #24
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3302      	adds	r3, #2
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	041b      	lsls	r3, r3, #16
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3301      	adds	r3, #1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	4313      	orrs	r3, r2
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	7812      	ldrb	r2, [r2, #0]
 80014ec:	4610      	mov	r0, r2
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	6811      	ldr	r1, [r2, #0]
 80014f2:	ea43 0200 	orr.w	r2, r3, r0
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	440b      	add	r3, r1
 80014fc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001500:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3318      	adds	r3, #24
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	4413      	add	r3, r2
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	6811      	ldr	r1, [r2, #0]
 8001514:	f043 0201 	orr.w	r2, r3, #1
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3318      	adds	r3, #24
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	440b      	add	r3, r1
 8001520:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e00e      	b.n	8001544 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e006      	b.n	8001544 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
  }
}
 8001544:	4618      	mov	r0, r3
 8001546:	3724      	adds	r7, #36	@ 0x24
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001564:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001566:	7dfb      	ldrb	r3, [r7, #23]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d003      	beq.n	8001574 <HAL_CAN_GetRxMessage+0x24>
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	2b02      	cmp	r3, #2
 8001570:	f040 8103 	bne.w	800177a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10e      	bne.n	8001598 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d116      	bne.n	80015b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0f7      	b.n	8001788 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d107      	bne.n	80015b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e0e8      	b.n	8001788 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	331b      	adds	r3, #27
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	4413      	add	r3, r2
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0204 	and.w	r2, r3, #4
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10c      	bne.n	80015ee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	331b      	adds	r3, #27
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	4413      	add	r3, r2
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	0d5b      	lsrs	r3, r3, #21
 80015e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e00b      	b.n	8001606 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	331b      	adds	r3, #27
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	4413      	add	r3, r2
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	331b      	adds	r3, #27
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	4413      	add	r3, r2
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0202 	and.w	r2, r3, #2
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	331b      	adds	r3, #27
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	4413      	add	r3, r2
 8001628:	3304      	adds	r3, #4
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2208      	movs	r2, #8
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	e00b      	b.n	8001654 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	331b      	adds	r3, #27
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	4413      	add	r3, r2
 8001648:	3304      	adds	r3, #4
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 020f 	and.w	r2, r3, #15
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	331b      	adds	r3, #27
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	4413      	add	r3, r2
 8001660:	3304      	adds	r3, #4
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	b2da      	uxtb	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	331b      	adds	r3, #27
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	4413      	add	r3, r2
 8001678:	3304      	adds	r3, #4
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	0c1b      	lsrs	r3, r3, #16
 800167e:	b29a      	uxth	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	4413      	add	r3, r2
 800168e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	4413      	add	r3, r2
 80016a4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	0a1a      	lsrs	r2, r3, #8
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	4413      	add	r3, r2
 80016be:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	0c1a      	lsrs	r2, r3, #16
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	3302      	adds	r3, #2
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	4413      	add	r3, r2
 80016d8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	0e1a      	lsrs	r2, r3, #24
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	3303      	adds	r3, #3
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	4413      	add	r3, r2
 80016f2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	3304      	adds	r3, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	4413      	add	r3, r2
 800170a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0a1a      	lsrs	r2, r3, #8
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	3305      	adds	r3, #5
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	4413      	add	r3, r2
 8001724:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	0c1a      	lsrs	r2, r3, #16
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	3306      	adds	r3, #6
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	4413      	add	r3, r2
 800173e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	0e1a      	lsrs	r2, r3, #24
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	3307      	adds	r3, #7
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d108      	bne.n	8001766 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0220 	orr.w	r2, r2, #32
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	e007      	b.n	8001776 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f042 0220 	orr.w	r2, r2, #32
 8001774:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	e006      	b.n	8001788 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
  }
}
 8001788:	4618      	mov	r0, r3
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d002      	beq.n	80017b2 <HAL_CAN_ActivateNotification+0x1e>
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d109      	bne.n	80017c6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6959      	ldr	r1, [r3, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e006      	b.n	80017d4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
  }
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	@ 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d07c      	beq.n	8001920 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d023      	beq.n	8001878 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2201      	movs	r2, #1
 8001836:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f983 	bl	8001b4e <HAL_CAN_TxMailbox0CompleteCallback>
 8001848:	e016      	b.n	8001878 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
 800185c:	e00c      	b.n	8001878 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001870:	e002      	b.n	8001878 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f989 	bl	8001b8a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d024      	beq.n	80018cc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800188a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f963 	bl	8001b62 <HAL_CAN_TxMailbox1CompleteCallback>
 800189c:	e016      	b.n	80018cc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d004      	beq.n	80018b2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80018b0:	e00c      	b.n	80018cc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c4:	e002      	b.n	80018cc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f969 	bl	8001b9e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d024      	beq.n	8001920 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f943 	bl	8001b76 <HAL_CAN_TxMailbox2CompleteCallback>
 80018f0:	e016      	b.n	8001920 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80018fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
 8001904:	e00c      	b.n	8001920 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
 8001918:	e002      	b.n	8001920 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f949 	bl	8001bb2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00c      	beq.n	8001944 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	2b00      	cmp	r3, #0
 8001932:	d007      	beq.n	8001944 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2210      	movs	r2, #16
 8001942:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00b      	beq.n	8001966 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2208      	movs	r2, #8
 800195e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f930 	bl	8001bc6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d009      	beq.n	8001984 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff f8f2 	bl	8000b68 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00c      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	2b00      	cmp	r3, #0
 8001996:	d007      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2210      	movs	r2, #16
 80019a6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	f003 0320 	and.w	r3, r3, #32
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d006      	beq.n	80019ca <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2208      	movs	r2, #8
 80019c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f912 	bl	8001bee <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	f003 0310 	and.w	r3, r3, #16
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d009      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f8f9 	bl	8001bda <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00b      	beq.n	8001a0a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2210      	movs	r2, #16
 8001a02:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f8fc 	bl	8001c02 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00b      	beq.n	8001a2c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2208      	movs	r2, #8
 8001a24:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f8f5 	bl	8001c16 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d07b      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d072      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d008      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d008      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d008      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d043      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d03e      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001aae:	2b60      	cmp	r3, #96	@ 0x60
 8001ab0:	d02b      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x32a>
 8001ab2:	2b60      	cmp	r3, #96	@ 0x60
 8001ab4:	d82e      	bhi.n	8001b14 <HAL_CAN_IRQHandler+0x334>
 8001ab6:	2b50      	cmp	r3, #80	@ 0x50
 8001ab8:	d022      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x320>
 8001aba:	2b50      	cmp	r3, #80	@ 0x50
 8001abc:	d82a      	bhi.n	8001b14 <HAL_CAN_IRQHandler+0x334>
 8001abe:	2b40      	cmp	r3, #64	@ 0x40
 8001ac0:	d019      	beq.n	8001af6 <HAL_CAN_IRQHandler+0x316>
 8001ac2:	2b40      	cmp	r3, #64	@ 0x40
 8001ac4:	d826      	bhi.n	8001b14 <HAL_CAN_IRQHandler+0x334>
 8001ac6:	2b30      	cmp	r3, #48	@ 0x30
 8001ac8:	d010      	beq.n	8001aec <HAL_CAN_IRQHandler+0x30c>
 8001aca:	2b30      	cmp	r3, #48	@ 0x30
 8001acc:	d822      	bhi.n	8001b14 <HAL_CAN_IRQHandler+0x334>
 8001ace:	2b10      	cmp	r3, #16
 8001ad0:	d002      	beq.n	8001ad8 <HAL_CAN_IRQHandler+0x2f8>
 8001ad2:	2b20      	cmp	r3, #32
 8001ad4:	d005      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ad6:	e01d      	b.n	8001b14 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ada:	f043 0308 	orr.w	r3, r3, #8
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ae0:	e019      	b.n	8001b16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	f043 0310 	orr.w	r3, r3, #16
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001aea:	e014      	b.n	8001b16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aee:	f043 0320 	orr.w	r3, r3, #32
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001af4:	e00f      	b.n	8001b16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001afe:	e00a      	b.n	8001b16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b08:	e005      	b.n	8001b16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b12:	e000      	b.n	8001b16 <HAL_CAN_IRQHandler+0x336>
            break;
 8001b14:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699a      	ldr	r2, [r3, #24]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b24:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d008      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f872 	bl	8001c2a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	@ 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	@ (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	@ (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	@ (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	@ 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	@ 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f7ff ff8e 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff29 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff3e 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff8e 	bl	8001d34 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5d 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff31 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffa2 	bl	8001d9c <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	@ 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	e16b      	b.n	8002158 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e80:	2201      	movs	r2, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	f040 815a 	bne.w	8002152 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d005      	beq.n	8001eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d130      	bne.n	8001f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eec:	2201      	movs	r2, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 0201 	and.w	r2, r3, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d017      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d123      	bne.n	8001fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	08da      	lsrs	r2, r3, #3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3208      	adds	r2, #8
 8001f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	220f      	movs	r2, #15
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	69b9      	ldr	r1, [r7, #24]
 8001fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0203 	and.w	r2, r3, #3
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80b4 	beq.w	8002152 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b60      	ldr	r3, [pc, #384]	@ (8002170 <HAL_GPIO_Init+0x30c>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff2:	4a5f      	ldr	r2, [pc, #380]	@ (8002170 <HAL_GPIO_Init+0x30c>)
 8001ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ffa:	4b5d      	ldr	r3, [pc, #372]	@ (8002170 <HAL_GPIO_Init+0x30c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002006:	4a5b      	ldr	r2, [pc, #364]	@ (8002174 <HAL_GPIO_Init+0x310>)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	220f      	movs	r2, #15
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a52      	ldr	r2, [pc, #328]	@ (8002178 <HAL_GPIO_Init+0x314>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d02b      	beq.n	800208a <HAL_GPIO_Init+0x226>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a51      	ldr	r2, [pc, #324]	@ (800217c <HAL_GPIO_Init+0x318>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d025      	beq.n	8002086 <HAL_GPIO_Init+0x222>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a50      	ldr	r2, [pc, #320]	@ (8002180 <HAL_GPIO_Init+0x31c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01f      	beq.n	8002082 <HAL_GPIO_Init+0x21e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4f      	ldr	r2, [pc, #316]	@ (8002184 <HAL_GPIO_Init+0x320>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d019      	beq.n	800207e <HAL_GPIO_Init+0x21a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4e      	ldr	r2, [pc, #312]	@ (8002188 <HAL_GPIO_Init+0x324>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0x216>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4d      	ldr	r2, [pc, #308]	@ (800218c <HAL_GPIO_Init+0x328>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00d      	beq.n	8002076 <HAL_GPIO_Init+0x212>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4c      	ldr	r2, [pc, #304]	@ (8002190 <HAL_GPIO_Init+0x32c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <HAL_GPIO_Init+0x20e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4b      	ldr	r2, [pc, #300]	@ (8002194 <HAL_GPIO_Init+0x330>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_GPIO_Init+0x20a>
 800206a:	2307      	movs	r3, #7
 800206c:	e00e      	b.n	800208c <HAL_GPIO_Init+0x228>
 800206e:	2308      	movs	r3, #8
 8002070:	e00c      	b.n	800208c <HAL_GPIO_Init+0x228>
 8002072:	2306      	movs	r3, #6
 8002074:	e00a      	b.n	800208c <HAL_GPIO_Init+0x228>
 8002076:	2305      	movs	r3, #5
 8002078:	e008      	b.n	800208c <HAL_GPIO_Init+0x228>
 800207a:	2304      	movs	r3, #4
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x228>
 800207e:	2303      	movs	r3, #3
 8002080:	e004      	b.n	800208c <HAL_GPIO_Init+0x228>
 8002082:	2302      	movs	r3, #2
 8002084:	e002      	b.n	800208c <HAL_GPIO_Init+0x228>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_GPIO_Init+0x228>
 800208a:	2300      	movs	r3, #0
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	f002 0203 	and.w	r2, r2, #3
 8002092:	0092      	lsls	r2, r2, #2
 8002094:	4093      	lsls	r3, r2
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800209c:	4935      	ldr	r1, [pc, #212]	@ (8002174 <HAL_GPIO_Init+0x310>)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002198 <HAL_GPIO_Init+0x334>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ce:	4a32      	ldr	r2, [pc, #200]	@ (8002198 <HAL_GPIO_Init+0x334>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d4:	4b30      	ldr	r3, [pc, #192]	@ (8002198 <HAL_GPIO_Init+0x334>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f8:	4a27      	ldr	r2, [pc, #156]	@ (8002198 <HAL_GPIO_Init+0x334>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020fe:	4b26      	ldr	r3, [pc, #152]	@ (8002198 <HAL_GPIO_Init+0x334>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002122:	4a1d      	ldr	r2, [pc, #116]	@ (8002198 <HAL_GPIO_Init+0x334>)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002128:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <HAL_GPIO_Init+0x334>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800214c:	4a12      	ldr	r2, [pc, #72]	@ (8002198 <HAL_GPIO_Init+0x334>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3301      	adds	r3, #1
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	2b0f      	cmp	r3, #15
 800215c:	f67f ae90 	bls.w	8001e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3724      	adds	r7, #36	@ 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	40013800 	.word	0x40013800
 8002178:	40020000 	.word	0x40020000
 800217c:	40020400 	.word	0x40020400
 8002180:	40020800 	.word	0x40020800
 8002184:	40020c00 	.word	0x40020c00
 8002188:	40021000 	.word	0x40021000
 800218c:	40021400 	.word	0x40021400
 8002190:	40021800 	.word	0x40021800
 8002194:	40021c00 	.word	0x40021c00
 8002198:	40013c00 	.word	0x40013c00

0800219c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
 80021a8:	4613      	mov	r3, r2
 80021aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ac:	787b      	ldrb	r3, [r7, #1]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021b8:	e003      	b.n	80021c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	041a      	lsls	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	619a      	str	r2, [r3, #24]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e0:	887a      	ldrh	r2, [r7, #2]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4013      	ands	r3, r2
 80021e6:	041a      	lsls	r2, r3, #16
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	887b      	ldrh	r3, [r7, #2]
 80021ee:	400b      	ands	r3, r1
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	619a      	str	r2, [r3, #24]
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e267      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d075      	beq.n	800230e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002222:	4b88      	ldr	r3, [pc, #544]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b04      	cmp	r3, #4
 800222c:	d00c      	beq.n	8002248 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800222e:	4b85      	ldr	r3, [pc, #532]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002236:	2b08      	cmp	r3, #8
 8002238:	d112      	bne.n	8002260 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223a:	4b82      	ldr	r3, [pc, #520]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002242:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002246:	d10b      	bne.n	8002260 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	4b7e      	ldr	r3, [pc, #504]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d05b      	beq.n	800230c <HAL_RCC_OscConfig+0x108>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d157      	bne.n	800230c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e242      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002268:	d106      	bne.n	8002278 <HAL_RCC_OscConfig+0x74>
 800226a:	4b76      	ldr	r3, [pc, #472]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a75      	ldr	r2, [pc, #468]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e01d      	b.n	80022b4 <HAL_RCC_OscConfig+0xb0>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x98>
 8002282:	4b70      	ldr	r3, [pc, #448]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a6f      	ldr	r2, [pc, #444]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 8002288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b6d      	ldr	r3, [pc, #436]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a6c      	ldr	r2, [pc, #432]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0xb0>
 800229c:	4b69      	ldr	r3, [pc, #420]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a68      	ldr	r2, [pc, #416]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 80022a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b66      	ldr	r3, [pc, #408]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a65      	ldr	r2, [pc, #404]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 80022ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d013      	beq.n	80022e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe fe2a 	bl	8000f14 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7fe fe26 	bl	8000f14 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	@ 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e207      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	4b5b      	ldr	r3, [pc, #364]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0xc0>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe fe16 	bl	8000f14 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7fe fe12 	bl	8000f14 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	@ 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e1f3      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fe:	4b51      	ldr	r3, [pc, #324]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0xe8>
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d063      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800231a:	4b4a      	ldr	r3, [pc, #296]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002326:	4b47      	ldr	r3, [pc, #284]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800232e:	2b08      	cmp	r3, #8
 8002330:	d11c      	bne.n	800236c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002332:	4b44      	ldr	r3, [pc, #272]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d116      	bne.n	800236c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	4b41      	ldr	r3, [pc, #260]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_RCC_OscConfig+0x152>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d001      	beq.n	8002356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e1c7      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002356:	4b3b      	ldr	r3, [pc, #236]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4937      	ldr	r1, [pc, #220]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	e03a      	b.n	80023e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d020      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002374:	4b34      	ldr	r3, [pc, #208]	@ (8002448 <HAL_RCC_OscConfig+0x244>)
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7fe fdcb 	bl	8000f14 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002382:	f7fe fdc7 	bl	8000f14 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e1a8      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002394:	4b2b      	ldr	r3, [pc, #172]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a0:	4b28      	ldr	r3, [pc, #160]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4925      	ldr	r1, [pc, #148]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]
 80023b4:	e015      	b.n	80023e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b6:	4b24      	ldr	r3, [pc, #144]	@ (8002448 <HAL_RCC_OscConfig+0x244>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7fe fdaa 	bl	8000f14 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c4:	f7fe fda6 	bl	8000f14 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e187      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d036      	beq.n	800245c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d016      	beq.n	8002424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f6:	4b15      	ldr	r3, [pc, #84]	@ (800244c <HAL_RCC_OscConfig+0x248>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7fe fd8a 	bl	8000f14 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002404:	f7fe fd86 	bl	8000f14 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e167      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002416:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_RCC_OscConfig+0x240>)
 8002418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x200>
 8002422:	e01b      	b.n	800245c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002424:	4b09      	ldr	r3, [pc, #36]	@ (800244c <HAL_RCC_OscConfig+0x248>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242a:	f7fe fd73 	bl	8000f14 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002430:	e00e      	b.n	8002450 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002432:	f7fe fd6f 	bl	8000f14 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d907      	bls.n	8002450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e150      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
 8002444:	40023800 	.word	0x40023800
 8002448:	42470000 	.word	0x42470000
 800244c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	4b88      	ldr	r3, [pc, #544]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 8002452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1ea      	bne.n	8002432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8097 	beq.w	8002598 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246e:	4b81      	ldr	r3, [pc, #516]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10f      	bne.n	800249a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	4b7d      	ldr	r3, [pc, #500]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	4a7c      	ldr	r2, [pc, #496]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002488:	6413      	str	r3, [r2, #64]	@ 0x40
 800248a:	4b7a      	ldr	r3, [pc, #488]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002496:	2301      	movs	r3, #1
 8002498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249a:	4b77      	ldr	r3, [pc, #476]	@ (8002678 <HAL_RCC_OscConfig+0x474>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d118      	bne.n	80024d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a6:	4b74      	ldr	r3, [pc, #464]	@ (8002678 <HAL_RCC_OscConfig+0x474>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a73      	ldr	r2, [pc, #460]	@ (8002678 <HAL_RCC_OscConfig+0x474>)
 80024ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b2:	f7fe fd2f 	bl	8000f14 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ba:	f7fe fd2b 	bl	8000f14 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e10c      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002678 <HAL_RCC_OscConfig+0x474>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d106      	bne.n	80024ee <HAL_RCC_OscConfig+0x2ea>
 80024e0:	4b64      	ldr	r3, [pc, #400]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e4:	4a63      	ldr	r2, [pc, #396]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ec:	e01c      	b.n	8002528 <HAL_RCC_OscConfig+0x324>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d10c      	bne.n	8002510 <HAL_RCC_OscConfig+0x30c>
 80024f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 80024fc:	f043 0304 	orr.w	r3, r3, #4
 8002500:	6713      	str	r3, [r2, #112]	@ 0x70
 8002502:	4b5c      	ldr	r3, [pc, #368]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002506:	4a5b      	ldr	r2, [pc, #364]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6713      	str	r3, [r2, #112]	@ 0x70
 800250e:	e00b      	b.n	8002528 <HAL_RCC_OscConfig+0x324>
 8002510:	4b58      	ldr	r3, [pc, #352]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002514:	4a57      	ldr	r2, [pc, #348]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 8002516:	f023 0301 	bic.w	r3, r3, #1
 800251a:	6713      	str	r3, [r2, #112]	@ 0x70
 800251c:	4b55      	ldr	r3, [pc, #340]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 800251e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002520:	4a54      	ldr	r2, [pc, #336]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 8002522:	f023 0304 	bic.w	r3, r3, #4
 8002526:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d015      	beq.n	800255c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fcf0 	bl	8000f14 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002536:	e00a      	b.n	800254e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002538:	f7fe fcec 	bl	8000f14 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e0cb      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254e:	4b49      	ldr	r3, [pc, #292]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0ee      	beq.n	8002538 <HAL_RCC_OscConfig+0x334>
 800255a:	e014      	b.n	8002586 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255c:	f7fe fcda 	bl	8000f14 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002562:	e00a      	b.n	800257a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002564:	f7fe fcd6 	bl	8000f14 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e0b5      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257a:	4b3e      	ldr	r3, [pc, #248]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1ee      	bne.n	8002564 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d105      	bne.n	8002598 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258c:	4b39      	ldr	r3, [pc, #228]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 800258e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002590:	4a38      	ldr	r2, [pc, #224]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 8002592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002596:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a1 	beq.w	80026e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025a2:	4b34      	ldr	r3, [pc, #208]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d05c      	beq.n	8002668 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d141      	bne.n	800263a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b6:	4b31      	ldr	r3, [pc, #196]	@ (800267c <HAL_RCC_OscConfig+0x478>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fcaa 	bl	8000f14 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe fca6 	bl	8000f14 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e087      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d6:	4b27      	ldr	r3, [pc, #156]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69da      	ldr	r2, [r3, #28]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f0:	019b      	lsls	r3, r3, #6
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f8:	085b      	lsrs	r3, r3, #1
 80025fa:	3b01      	subs	r3, #1
 80025fc:	041b      	lsls	r3, r3, #16
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002604:	061b      	lsls	r3, r3, #24
 8002606:	491b      	ldr	r1, [pc, #108]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800260c:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <HAL_RCC_OscConfig+0x478>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7fe fc7f 	bl	8000f14 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261a:	f7fe fc7b 	bl	8000f14 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e05c      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262c:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x416>
 8002638:	e054      	b.n	80026e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263a:	4b10      	ldr	r3, [pc, #64]	@ (800267c <HAL_RCC_OscConfig+0x478>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7fe fc68 	bl	8000f14 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002648:	f7fe fc64 	bl	8000f14 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e045      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_RCC_OscConfig+0x470>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x444>
 8002666:	e03d      	b.n	80026e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d107      	bne.n	8002680 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e038      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
 8002674:	40023800 	.word	0x40023800
 8002678:	40007000 	.word	0x40007000
 800267c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002680:	4b1b      	ldr	r3, [pc, #108]	@ (80026f0 <HAL_RCC_OscConfig+0x4ec>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d028      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d121      	bne.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d11a      	bne.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026b0:	4013      	ands	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d111      	bne.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	3b01      	subs	r3, #1
 80026ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d107      	bne.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800

080026f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0cc      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002708:	4b68      	ldr	r3, [pc, #416]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d90c      	bls.n	8002730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b65      	ldr	r3, [pc, #404]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b63      	ldr	r3, [pc, #396]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0b8      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002748:	4b59      	ldr	r3, [pc, #356]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4a58      	ldr	r2, [pc, #352]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002752:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002760:	4b53      	ldr	r3, [pc, #332]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	4a52      	ldr	r2, [pc, #328]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800276a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800276c:	4b50      	ldr	r3, [pc, #320]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	494d      	ldr	r1, [pc, #308]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d044      	beq.n	8002814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	4b47      	ldr	r3, [pc, #284]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d119      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e07f      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d003      	beq.n	80027b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b2:	4b3f      	ldr	r3, [pc, #252]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e06f      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c2:	4b3b      	ldr	r3, [pc, #236]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e067      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d2:	4b37      	ldr	r3, [pc, #220]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f023 0203 	bic.w	r2, r3, #3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4934      	ldr	r1, [pc, #208]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e4:	f7fe fb96 	bl	8000f14 <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	e00a      	b.n	8002802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ec:	f7fe fb92 	bl	8000f14 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e04f      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	4b2b      	ldr	r3, [pc, #172]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 020c 	and.w	r2, r3, #12
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	429a      	cmp	r2, r3
 8002812:	d1eb      	bne.n	80027ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002814:	4b25      	ldr	r3, [pc, #148]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d20c      	bcs.n	800283c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b22      	ldr	r3, [pc, #136]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b20      	ldr	r3, [pc, #128]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e032      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002848:	4b19      	ldr	r3, [pc, #100]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4916      	ldr	r1, [pc, #88]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002866:	4b12      	ldr	r3, [pc, #72]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	490e      	ldr	r1, [pc, #56]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800287a:	f000 f821 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 800287e:	4602      	mov	r2, r0
 8002880:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	490a      	ldr	r1, [pc, #40]	@ (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	5ccb      	ldrb	r3, [r1, r3]
 800288e:	fa22 f303 	lsr.w	r3, r2, r3
 8002892:	4a09      	ldr	r2, [pc, #36]	@ (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002896:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <HAL_RCC_ClockConfig+0x1c8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe faf6 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40023c00 	.word	0x40023c00
 80028b0:	40023800 	.word	0x40023800
 80028b4:	080030ac 	.word	0x080030ac
 80028b8:	20000000 	.word	0x20000000
 80028bc:	20000004 	.word	0x20000004

080028c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c4:	b090      	sub	sp, #64	@ 0x40
 80028c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028d8:	4b59      	ldr	r3, [pc, #356]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x180>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 030c 	and.w	r3, r3, #12
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d00d      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x40>
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	f200 80a1 	bhi.w	8002a2c <HAL_RCC_GetSysClockFreq+0x16c>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x34>
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d003      	beq.n	80028fa <HAL_RCC_GetSysClockFreq+0x3a>
 80028f2:	e09b      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b53      	ldr	r3, [pc, #332]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x184>)
 80028f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028f8:	e09b      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028fa:	4b53      	ldr	r3, [pc, #332]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x188>)
 80028fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028fe:	e098      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002900:	4b4f      	ldr	r3, [pc, #316]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x180>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002908:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800290a:	4b4d      	ldr	r3, [pc, #308]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x180>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d028      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002916:	4b4a      	ldr	r3, [pc, #296]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x180>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	099b      	lsrs	r3, r3, #6
 800291c:	2200      	movs	r2, #0
 800291e:	623b      	str	r3, [r7, #32]
 8002920:	627a      	str	r2, [r7, #36]	@ 0x24
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002928:	2100      	movs	r1, #0
 800292a:	4b47      	ldr	r3, [pc, #284]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x188>)
 800292c:	fb03 f201 	mul.w	r2, r3, r1
 8002930:	2300      	movs	r3, #0
 8002932:	fb00 f303 	mul.w	r3, r0, r3
 8002936:	4413      	add	r3, r2
 8002938:	4a43      	ldr	r2, [pc, #268]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x188>)
 800293a:	fba0 1202 	umull	r1, r2, r0, r2
 800293e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002940:	460a      	mov	r2, r1
 8002942:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002946:	4413      	add	r3, r2
 8002948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800294a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294c:	2200      	movs	r2, #0
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	61fa      	str	r2, [r7, #28]
 8002952:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002956:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800295a:	f7fd fc35 	bl	80001c8 <__aeabi_uldivmod>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4613      	mov	r3, r2
 8002964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002966:	e053      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002968:	4b35      	ldr	r3, [pc, #212]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x180>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	099b      	lsrs	r3, r3, #6
 800296e:	2200      	movs	r2, #0
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	617a      	str	r2, [r7, #20]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800297a:	f04f 0b00 	mov.w	fp, #0
 800297e:	4652      	mov	r2, sl
 8002980:	465b      	mov	r3, fp
 8002982:	f04f 0000 	mov.w	r0, #0
 8002986:	f04f 0100 	mov.w	r1, #0
 800298a:	0159      	lsls	r1, r3, #5
 800298c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002990:	0150      	lsls	r0, r2, #5
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	ebb2 080a 	subs.w	r8, r2, sl
 800299a:	eb63 090b 	sbc.w	r9, r3, fp
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029b2:	ebb2 0408 	subs.w	r4, r2, r8
 80029b6:	eb63 0509 	sbc.w	r5, r3, r9
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	00eb      	lsls	r3, r5, #3
 80029c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029c8:	00e2      	lsls	r2, r4, #3
 80029ca:	4614      	mov	r4, r2
 80029cc:	461d      	mov	r5, r3
 80029ce:	eb14 030a 	adds.w	r3, r4, sl
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	eb45 030b 	adc.w	r3, r5, fp
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029e6:	4629      	mov	r1, r5
 80029e8:	028b      	lsls	r3, r1, #10
 80029ea:	4621      	mov	r1, r4
 80029ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f0:	4621      	mov	r1, r4
 80029f2:	028a      	lsls	r2, r1, #10
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029fa:	2200      	movs	r2, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	60fa      	str	r2, [r7, #12]
 8002a00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a04:	f7fd fbe0 	bl	80001c8 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a10:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a2a:	e002      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b05      	ldr	r3, [pc, #20]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3740      	adds	r7, #64	@ 0x40
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	00f42400 	.word	0x00f42400
 8002a48:	00b71b00 	.word	0x00b71b00

08002a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a50:	4b03      	ldr	r3, [pc, #12]	@ (8002a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000000 	.word	0x20000000

08002a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a68:	f7ff fff0 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4b05      	ldr	r3, [pc, #20]	@ (8002a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	0a9b      	lsrs	r3, r3, #10
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	4903      	ldr	r1, [pc, #12]	@ (8002a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7a:	5ccb      	ldrb	r3, [r1, r3]
 8002a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40023800 	.word	0x40023800
 8002a88:	080030bc 	.word	0x080030bc

08002a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a90:	f7ff ffdc 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	0b5b      	lsrs	r3, r3, #13
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	4903      	ldr	r1, [pc, #12]	@ (8002ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa2:	5ccb      	ldrb	r3, [r1, r3]
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	080030bc 	.word	0x080030bc

08002ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e042      	b.n	8002b4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe f942 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2224      	movs	r2, #36	@ 0x24
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f82b 	bl	8002b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695a      	ldr	r2, [r3, #20]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b58:	b0c0      	sub	sp, #256	@ 0x100
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b70:	68d9      	ldr	r1, [r3, #12]
 8002b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	ea40 0301 	orr.w	r3, r0, r1
 8002b7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002bac:	f021 010c 	bic.w	r1, r1, #12
 8002bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bce:	6999      	ldr	r1, [r3, #24]
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	ea40 0301 	orr.w	r3, r0, r1
 8002bda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b8f      	ldr	r3, [pc, #572]	@ (8002e20 <UART_SetConfig+0x2cc>)
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d005      	beq.n	8002bf4 <UART_SetConfig+0xa0>
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4b8d      	ldr	r3, [pc, #564]	@ (8002e24 <UART_SetConfig+0x2d0>)
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d104      	bne.n	8002bfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bf4:	f7ff ff4a 	bl	8002a8c <HAL_RCC_GetPCLK2Freq>
 8002bf8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002bfc:	e003      	b.n	8002c06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bfe:	f7ff ff31 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 8002c02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c10:	f040 810c 	bne.w	8002e2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c26:	4622      	mov	r2, r4
 8002c28:	462b      	mov	r3, r5
 8002c2a:	1891      	adds	r1, r2, r2
 8002c2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002c2e:	415b      	adcs	r3, r3
 8002c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c36:	4621      	mov	r1, r4
 8002c38:	eb12 0801 	adds.w	r8, r2, r1
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	eb43 0901 	adc.w	r9, r3, r1
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c56:	4690      	mov	r8, r2
 8002c58:	4699      	mov	r9, r3
 8002c5a:	4623      	mov	r3, r4
 8002c5c:	eb18 0303 	adds.w	r3, r8, r3
 8002c60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c64:	462b      	mov	r3, r5
 8002c66:	eb49 0303 	adc.w	r3, r9, r3
 8002c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c82:	460b      	mov	r3, r1
 8002c84:	18db      	adds	r3, r3, r3
 8002c86:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c88:	4613      	mov	r3, r2
 8002c8a:	eb42 0303 	adc.w	r3, r2, r3
 8002c8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c98:	f7fd fa96 	bl	80001c8 <__aeabi_uldivmod>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4b61      	ldr	r3, [pc, #388]	@ (8002e28 <UART_SetConfig+0x2d4>)
 8002ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	011c      	lsls	r4, r3, #4
 8002caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002cb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002cb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002cbc:	4642      	mov	r2, r8
 8002cbe:	464b      	mov	r3, r9
 8002cc0:	1891      	adds	r1, r2, r2
 8002cc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002cc4:	415b      	adcs	r3, r3
 8002cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ccc:	4641      	mov	r1, r8
 8002cce:	eb12 0a01 	adds.w	sl, r2, r1
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	eb43 0b01 	adc.w	fp, r3, r1
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ce4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cec:	4692      	mov	sl, r2
 8002cee:	469b      	mov	fp, r3
 8002cf0:	4643      	mov	r3, r8
 8002cf2:	eb1a 0303 	adds.w	r3, sl, r3
 8002cf6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cfa:	464b      	mov	r3, r9
 8002cfc:	eb4b 0303 	adc.w	r3, fp, r3
 8002d00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	18db      	adds	r3, r3, r3
 8002d1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d1e:	4613      	mov	r3, r2
 8002d20:	eb42 0303 	adc.w	r3, r2, r3
 8002d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002d2e:	f7fd fa4b 	bl	80001c8 <__aeabi_uldivmod>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	4b3b      	ldr	r3, [pc, #236]	@ (8002e28 <UART_SetConfig+0x2d4>)
 8002d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2264      	movs	r2, #100	@ 0x64
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	1acb      	subs	r3, r1, r3
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002d4e:	4b36      	ldr	r3, [pc, #216]	@ (8002e28 <UART_SetConfig+0x2d4>)
 8002d50:	fba3 2302 	umull	r2, r3, r3, r2
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002d5c:	441c      	add	r4, r3
 8002d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d62:	2200      	movs	r2, #0
 8002d64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d70:	4642      	mov	r2, r8
 8002d72:	464b      	mov	r3, r9
 8002d74:	1891      	adds	r1, r2, r2
 8002d76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d78:	415b      	adcs	r3, r3
 8002d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d80:	4641      	mov	r1, r8
 8002d82:	1851      	adds	r1, r2, r1
 8002d84:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d86:	4649      	mov	r1, r9
 8002d88:	414b      	adcs	r3, r1
 8002d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d98:	4659      	mov	r1, fp
 8002d9a:	00cb      	lsls	r3, r1, #3
 8002d9c:	4651      	mov	r1, sl
 8002d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002da2:	4651      	mov	r1, sl
 8002da4:	00ca      	lsls	r2, r1, #3
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	4642      	mov	r2, r8
 8002dae:	189b      	adds	r3, r3, r2
 8002db0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002db4:	464b      	mov	r3, r9
 8002db6:	460a      	mov	r2, r1
 8002db8:	eb42 0303 	adc.w	r3, r2, r3
 8002dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002dcc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002dd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	18db      	adds	r3, r3, r3
 8002dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dda:	4613      	mov	r3, r2
 8002ddc:	eb42 0303 	adc.w	r3, r2, r3
 8002de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002de6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002dea:	f7fd f9ed 	bl	80001c8 <__aeabi_uldivmod>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e28 <UART_SetConfig+0x2d4>)
 8002df4:	fba3 1302 	umull	r1, r3, r3, r2
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	2164      	movs	r1, #100	@ 0x64
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	3332      	adds	r3, #50	@ 0x32
 8002e06:	4a08      	ldr	r2, [pc, #32]	@ (8002e28 <UART_SetConfig+0x2d4>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	f003 0207 	and.w	r2, r3, #7
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4422      	add	r2, r4
 8002e1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e1c:	e106      	b.n	800302c <UART_SetConfig+0x4d8>
 8002e1e:	bf00      	nop
 8002e20:	40011000 	.word	0x40011000
 8002e24:	40011400 	.word	0x40011400
 8002e28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e30:	2200      	movs	r2, #0
 8002e32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002e3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002e3e:	4642      	mov	r2, r8
 8002e40:	464b      	mov	r3, r9
 8002e42:	1891      	adds	r1, r2, r2
 8002e44:	6239      	str	r1, [r7, #32]
 8002e46:	415b      	adcs	r3, r3
 8002e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e4e:	4641      	mov	r1, r8
 8002e50:	1854      	adds	r4, r2, r1
 8002e52:	4649      	mov	r1, r9
 8002e54:	eb43 0501 	adc.w	r5, r3, r1
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	00eb      	lsls	r3, r5, #3
 8002e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e66:	00e2      	lsls	r2, r4, #3
 8002e68:	4614      	mov	r4, r2
 8002e6a:	461d      	mov	r5, r3
 8002e6c:	4643      	mov	r3, r8
 8002e6e:	18e3      	adds	r3, r4, r3
 8002e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e74:	464b      	mov	r3, r9
 8002e76:	eb45 0303 	adc.w	r3, r5, r3
 8002e7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	008b      	lsls	r3, r1, #2
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	008a      	lsls	r2, r1, #2
 8002ea8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002eac:	f7fd f98c 	bl	80001c8 <__aeabi_uldivmod>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4b60      	ldr	r3, [pc, #384]	@ (8003038 <UART_SetConfig+0x4e4>)
 8002eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	011c      	lsls	r4, r3, #4
 8002ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ec8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ecc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002ed0:	4642      	mov	r2, r8
 8002ed2:	464b      	mov	r3, r9
 8002ed4:	1891      	adds	r1, r2, r2
 8002ed6:	61b9      	str	r1, [r7, #24]
 8002ed8:	415b      	adcs	r3, r3
 8002eda:	61fb      	str	r3, [r7, #28]
 8002edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ee0:	4641      	mov	r1, r8
 8002ee2:	1851      	adds	r1, r2, r1
 8002ee4:	6139      	str	r1, [r7, #16]
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	414b      	adcs	r3, r1
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ef8:	4659      	mov	r1, fp
 8002efa:	00cb      	lsls	r3, r1, #3
 8002efc:	4651      	mov	r1, sl
 8002efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f02:	4651      	mov	r1, sl
 8002f04:	00ca      	lsls	r2, r1, #3
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4642      	mov	r2, r8
 8002f0e:	189b      	adds	r3, r3, r2
 8002f10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f14:	464b      	mov	r3, r9
 8002f16:	460a      	mov	r2, r1
 8002f18:	eb42 0303 	adc.w	r3, r2, r3
 8002f1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002f38:	4649      	mov	r1, r9
 8002f3a:	008b      	lsls	r3, r1, #2
 8002f3c:	4641      	mov	r1, r8
 8002f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f42:	4641      	mov	r1, r8
 8002f44:	008a      	lsls	r2, r1, #2
 8002f46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002f4a:	f7fd f93d 	bl	80001c8 <__aeabi_uldivmod>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4611      	mov	r1, r2
 8002f54:	4b38      	ldr	r3, [pc, #224]	@ (8003038 <UART_SetConfig+0x4e4>)
 8002f56:	fba3 2301 	umull	r2, r3, r3, r1
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	2264      	movs	r2, #100	@ 0x64
 8002f5e:	fb02 f303 	mul.w	r3, r2, r3
 8002f62:	1acb      	subs	r3, r1, r3
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	3332      	adds	r3, #50	@ 0x32
 8002f68:	4a33      	ldr	r2, [pc, #204]	@ (8003038 <UART_SetConfig+0x4e4>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f74:	441c      	add	r4, r3
 8002f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f84:	4642      	mov	r2, r8
 8002f86:	464b      	mov	r3, r9
 8002f88:	1891      	adds	r1, r2, r2
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	415b      	adcs	r3, r3
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f94:	4641      	mov	r1, r8
 8002f96:	1851      	adds	r1, r2, r1
 8002f98:	6039      	str	r1, [r7, #0]
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	414b      	adcs	r3, r1
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fac:	4659      	mov	r1, fp
 8002fae:	00cb      	lsls	r3, r1, #3
 8002fb0:	4651      	mov	r1, sl
 8002fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fb6:	4651      	mov	r1, sl
 8002fb8:	00ca      	lsls	r2, r1, #3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4642      	mov	r2, r8
 8002fc2:	189b      	adds	r3, r3, r2
 8002fc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fc6:	464b      	mov	r3, r9
 8002fc8:	460a      	mov	r2, r1
 8002fca:	eb42 0303 	adc.w	r3, r2, r3
 8002fce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fda:	667a      	str	r2, [r7, #100]	@ 0x64
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002fe8:	4649      	mov	r1, r9
 8002fea:	008b      	lsls	r3, r1, #2
 8002fec:	4641      	mov	r1, r8
 8002fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	008a      	lsls	r2, r1, #2
 8002ff6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ffa:	f7fd f8e5 	bl	80001c8 <__aeabi_uldivmod>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4b0d      	ldr	r3, [pc, #52]	@ (8003038 <UART_SetConfig+0x4e4>)
 8003004:	fba3 1302 	umull	r1, r3, r3, r2
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	2164      	movs	r1, #100	@ 0x64
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	3332      	adds	r3, #50	@ 0x32
 8003016:	4a08      	ldr	r2, [pc, #32]	@ (8003038 <UART_SetConfig+0x4e4>)
 8003018:	fba2 2303 	umull	r2, r3, r2, r3
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	f003 020f 	and.w	r2, r3, #15
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4422      	add	r2, r4
 800302a:	609a      	str	r2, [r3, #8]
}
 800302c:	bf00      	nop
 800302e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003032:	46bd      	mov	sp, r7
 8003034:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003038:	51eb851f 	.word	0x51eb851f

0800303c <memset>:
 800303c:	4402      	add	r2, r0
 800303e:	4603      	mov	r3, r0
 8003040:	4293      	cmp	r3, r2
 8003042:	d100      	bne.n	8003046 <memset+0xa>
 8003044:	4770      	bx	lr
 8003046:	f803 1b01 	strb.w	r1, [r3], #1
 800304a:	e7f9      	b.n	8003040 <memset+0x4>

0800304c <__libc_init_array>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	4d0d      	ldr	r5, [pc, #52]	@ (8003084 <__libc_init_array+0x38>)
 8003050:	4c0d      	ldr	r4, [pc, #52]	@ (8003088 <__libc_init_array+0x3c>)
 8003052:	1b64      	subs	r4, r4, r5
 8003054:	10a4      	asrs	r4, r4, #2
 8003056:	2600      	movs	r6, #0
 8003058:	42a6      	cmp	r6, r4
 800305a:	d109      	bne.n	8003070 <__libc_init_array+0x24>
 800305c:	4d0b      	ldr	r5, [pc, #44]	@ (800308c <__libc_init_array+0x40>)
 800305e:	4c0c      	ldr	r4, [pc, #48]	@ (8003090 <__libc_init_array+0x44>)
 8003060:	f000 f818 	bl	8003094 <_init>
 8003064:	1b64      	subs	r4, r4, r5
 8003066:	10a4      	asrs	r4, r4, #2
 8003068:	2600      	movs	r6, #0
 800306a:	42a6      	cmp	r6, r4
 800306c:	d105      	bne.n	800307a <__libc_init_array+0x2e>
 800306e:	bd70      	pop	{r4, r5, r6, pc}
 8003070:	f855 3b04 	ldr.w	r3, [r5], #4
 8003074:	4798      	blx	r3
 8003076:	3601      	adds	r6, #1
 8003078:	e7ee      	b.n	8003058 <__libc_init_array+0xc>
 800307a:	f855 3b04 	ldr.w	r3, [r5], #4
 800307e:	4798      	blx	r3
 8003080:	3601      	adds	r6, #1
 8003082:	e7f2      	b.n	800306a <__libc_init_array+0x1e>
 8003084:	080030cc 	.word	0x080030cc
 8003088:	080030cc 	.word	0x080030cc
 800308c:	080030cc 	.word	0x080030cc
 8003090:	080030d0 	.word	0x080030d0

08003094 <_init>:
 8003094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003096:	bf00      	nop
 8003098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309a:	bc08      	pop	{r3}
 800309c:	469e      	mov	lr, r3
 800309e:	4770      	bx	lr

080030a0 <_fini>:
 80030a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a2:	bf00      	nop
 80030a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a6:	bc08      	pop	{r3}
 80030a8:	469e      	mov	lr, r3
 80030aa:	4770      	bx	lr
