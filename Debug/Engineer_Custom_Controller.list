
Engineer_Custom_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e10  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08005f98  08005f98  00006f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062c8  080062c8  0000824c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080062c8  080062c8  000072c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062d0  080062d0  0000824c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062d0  080062d0  000072d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062d4  080062d4  000072d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000024c  20000000  080062d8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000824c  2**0
                  CONTENTS
 10 .bss          00000a98  2000024c  2000024c  0000824c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ce4  20000ce4  0000824c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000824c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ebd  00000000  00000000  0000827c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003143  00000000  00000000  0001c139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  0001f280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c7a  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022cc8  00000000  00000000  00020f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015309  00000000  00000000  00043c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cecf9  00000000  00000000  00058f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127c1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000426c  00000000  00000000  00127c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  0012becc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000024c 	.word	0x2000024c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f80 	.word	0x08005f80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000250 	.word	0x20000250
 80001c4:	08005f80 	.word	0x08005f80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <pid_init>:
              float Kp, float Ki, float Kd, float Kf,
              float i_max, float out_max,
              float dt, float dead_zone,
              float i_var_a, float i_var_b,
              float i_sep_threshold, pid_d_mode_t d_mode)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08e      	sub	sp, #56	@ 0x38
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80004fc:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8000500:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 8000504:	ed87 1a0a 	vstr	s2, [r7, #40]	@ 0x28
 8000508:	edc7 1a09 	vstr	s3, [r7, #36]	@ 0x24
 800050c:	ed87 2a08 	vstr	s4, [r7, #32]
 8000510:	edc7 2a07 	vstr	s5, [r7, #28]
 8000514:	ed87 3a06 	vstr	s6, [r7, #24]
 8000518:	edc7 3a05 	vstr	s7, [r7, #20]
 800051c:	ed87 4a04 	vstr	s8, [r7, #16]
 8000520:	edc7 4a03 	vstr	s9, [r7, #12]
 8000524:	ed87 5a02 	vstr	s10, [r7, #8]
 8000528:	460b      	mov	r3, r1
 800052a:	71fb      	strb	r3, [r7, #7]
    pid->Kp = Kp;
 800052c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800052e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000530:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8000532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000536:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8000538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800053a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800053c:	609a      	str	r2, [r3, #8]
    pid->Kf = Kf;
 800053e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000542:	60da      	str	r2, [r3, #12]
    pid->dt = 0.0f; // will be updated dynamically
 8000544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000546:	f04f 0200 	mov.w	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
    pid->dead_zone = dead_zone;
 800054c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800054e:	697a      	ldr	r2, [r7, #20]
 8000550:	615a      	str	r2, [r3, #20]
    pid->d_mode = d_mode;
 8000552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000554:	79fa      	ldrb	r2, [r7, #7]
 8000556:	761a      	strb	r2, [r3, #24]
    pid->i_out_max = i_max;
 8000558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800055a:	6a3a      	ldr	r2, [r7, #32]
 800055c:	61da      	str	r2, [r3, #28]
    pid->out_max = out_max;
 800055e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000560:	69fa      	ldr	r2, [r7, #28]
 8000562:	621a      	str	r2, [r3, #32]
    pid->i_var_a = i_var_a;
 8000564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000566:	693a      	ldr	r2, [r7, #16]
 8000568:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->i_var_b = i_var_b;
 800056a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800056c:	68fa      	ldr	r2, [r7, #12]
 800056e:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->i_sep_threshold = i_sep_threshold;
 8000570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000572:	68ba      	ldr	r2, [r7, #8]
 8000574:	62da      	str	r2, [r3, #44]	@ 0x2c
    pid->target = 0.0f;
 8000576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000578:	f04f 0200 	mov.w	r2, #0
 800057c:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->now = 0.0f;
 800057e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000580:	f04f 0200 	mov.w	r2, #0
 8000584:	635a      	str	r2, [r3, #52]	@ 0x34
    pid->integral_error = 0.0f;
 8000586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000588:	f04f 0200 	mov.w	r2, #0
 800058c:	639a      	str	r2, [r3, #56]	@ 0x38
    pid->prev_error = 0.0f;
 800058e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000590:	f04f 0200 	mov.w	r2, #0
 8000594:	63da      	str	r2, [r3, #60]	@ 0x3c
    pid->prev_now = 0.0f;
 8000596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000598:	f04f 0200 	mov.w	r2, #0
 800059c:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->prev_target = 0.0f;
 800059e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005a0:	f04f 0200 	mov.w	r2, #0
 80005a4:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->prev_out = 0.0f;
 80005a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005a8:	f04f 0200 	mov.w	r2, #0
 80005ac:	649a      	str	r2, [r3, #72]	@ 0x48
    pid->out = 0.0f;
 80005ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005b0:	f04f 0200 	mov.w	r2, #0
 80005b4:	64da      	str	r2, [r3, #76]	@ 0x4c

    pid->last_tick_ms = HAL_GetTick(); // start per-PID timer
 80005b6:	f001 fd8f 	bl	80020d8 <HAL_GetTick>
 80005ba:	4602      	mov	r2, r0
 80005bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005be:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80005c0:	bf00      	nop
 80005c2:	3738      	adds	r7, #56	@ 0x38
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <pid_set_target>:


void pid_set_target(pid_t *pid, float target) {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	ed87 0a00 	vstr	s0, [r7]
    pid->target = target;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <pid_set_now>:

void pid_set_now(pid_t *pid, float now) {
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	ed87 0a00 	vstr	s0, [r7]
    pid->now = now;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	683a      	ldr	r2, [r7, #0]
 80005f6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <pid_tick>:
 * @brief Run one PID update Calculation
 * 
 * @return PID output
 */
void pid_tick(pid_t *pid)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08c      	sub	sp, #48	@ 0x30
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    uint32_t now_ms = HAL_GetTick();
 800060c:	f001 fd64 	bl	80020d8 <HAL_GetTick>
 8000610:	6178      	str	r0, [r7, #20]
    float dt = (now_ms - pid->last_tick_ms) / 1000.0f; // ms → s
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000616:	697a      	ldr	r2, [r7, #20]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	ee07 3a90 	vmov	s15, r3
 800061e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000622:	eddf 6abe 	vldr	s13, [pc, #760]	@ 800091c <pid_tick+0x318>
 8000626:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800062a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dt <= 0.0f) dt = 1e-6f; // safety clamp
 800062e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000632:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063a:	d801      	bhi.n	8000640 <pid_tick+0x3c>
 800063c:	4bb8      	ldr	r3, [pc, #736]	@ (8000920 <pid_tick+0x31c>)
 800063e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    pid->dt = dt;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000644:	611a      	str	r2, [r3, #16]
    pid->last_tick_ms = now_ms;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	651a      	str	r2, [r3, #80]	@ 0x50

    float P = 0.0f, I = 0.0f, D = 0.0f, F = 0.0f;
 800064c:	f04f 0300 	mov.w	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	f04f 0300 	mov.w	r3, #0
 8000656:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000658:	f04f 0300 	mov.w	r3, #0
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
 800065e:	f04f 0300 	mov.w	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
    
    float error = pid->target - pid->now;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8000670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000674:	edc7 7a08 	vstr	s15, [r7, #32]

    float abs_error = error > 0 ? error : -error;
 8000678:	edd7 7a08 	vldr	s15, [r7, #32]
 800067c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000684:	dd02      	ble.n	800068c <pid_tick+0x88>
 8000686:	edd7 7a08 	vldr	s15, [r7, #32]
 800068a:	e003      	b.n	8000694 <pid_tick+0x90>
 800068c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000690:	eef1 7a67 	vneg.f32	s15, s15
 8000694:	edc7 7a07 	vstr	s15, [r7, #28]

    float speed_ratio;

    /* Dead zone */
    if (abs_error < pid->dead_zone)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	edd3 7a05 	vldr	s15, [r3, #20]
 800069e:	ed97 7a07 	vldr	s14, [r7, #28]
 80006a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d505      	bpl.n	80006b8 <pid_tick+0xb4>
    {
        error = 0.0f;
 80006ac:	f04f 0300 	mov.w	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
        abs_error = 0.0f;
 80006b2:	f04f 0300 	mov.w	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
    }

    /* Proportional */
    P = pid->Kp * error;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	edd3 7a00 	vldr	s15, [r3]
 80006be:	ed97 7a08 	vldr	s14, [r7, #32]
 80006c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c6:	edc7 7a04 	vstr	s15, [r7, #16]

    // Integral with separation and variable speed
    if (pid->i_var_a == 0.0f && pid->i_var_b == 0.0f)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80006d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80006d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d8:	d10b      	bne.n	80006f2 <pid_tick+0xee>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80006e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80006e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e8:	d103      	bne.n	80006f2 <pid_tick+0xee>
    {
        // Not Variable Speed Integral
        speed_ratio = 1.0f;
 80006ea:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80006ee:	61bb      	str	r3, [r7, #24]
 80006f0:	e02e      	b.n	8000750 <pid_tick+0x14c>
    }
    else
    {
        if (abs_error <= pid->i_var_a)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80006f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80006fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000704:	d803      	bhi.n	800070e <pid_tick+0x10a>
        {
            // Full gain zone
            speed_ratio = 1.0f;
 8000706:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800070a:	61bb      	str	r3, [r7, #24]
 800070c:	e020      	b.n	8000750 <pid_tick+0x14c>
        }
        else if (abs_error < pid->i_var_b)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000714:	ed97 7a07 	vldr	s14, [r7, #28]
 8000718:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800071c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000720:	d513      	bpl.n	800074a <pid_tick+0x146>
        {
            // Fade-out zone (linear)
            speed_ratio = (pid->i_var_b - abs_error) / (pid->i_var_b - pid->i_var_a);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8000728:	edd7 7a07 	vldr	s15, [r7, #28]
 800072c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800073c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000744:	edc7 7a06 	vstr	s15, [r7, #24]
 8000748:	e002      	b.n	8000750 <pid_tick+0x14c>
        }
        else
        {
            // No gain zone
            speed_ratio = 0.0f;
 800074a:	f04f 0300 	mov.w	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
        }
    }


    // No Integral Separation or Within Separation Threshold
    if (pid->i_sep_threshold == 0.0f || (abs_error < pid->i_sep_threshold))
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000756:	eef5 7a40 	vcmp.f32	s15, #0.0
 800075a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075e:	d009      	beq.n	8000774 <pid_tick+0x170>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000766:	ed97 7a07 	vldr	s14, [r7, #28]
 800076a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800076e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000772:	d548      	bpl.n	8000806 <pid_tick+0x202>
    {
        pid->integral_error += speed_ratio * error * pid->dt;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800077a:	edd7 6a06 	vldr	s13, [r7, #24]
 800077e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000782:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	edd3 7a04 	vldr	s15, [r3, #16]
 800078c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        /* Integral clamp */
        if (pid->i_out_max != 0.0f) 
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	edd3 7a07 	vldr	s15, [r3, #28]
 80007a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80007a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a8:	d023      	beq.n	80007f2 <pid_tick+0x1ee>
        {
            if (pid->integral_error > pid->i_out_max) pid->integral_error = pid->i_out_max;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80007b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007be:	dd03      	ble.n	80007c8 <pid_tick+0x1c4>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	69da      	ldr	r2, [r3, #28]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	639a      	str	r2, [r3, #56]	@ 0x38
            if (pid->integral_error < -pid->i_out_max) pid->integral_error = -pid->i_out_max;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	edd3 7a07 	vldr	s15, [r3, #28]
 80007d4:	eef1 7a67 	vneg.f32	s15, s15
 80007d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e0:	d507      	bpl.n	80007f2 <pid_tick+0x1ee>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80007e8:	eef1 7a67 	vneg.f32	s15, s15
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        }

        I = pid->Ki * pid->integral_error;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80007fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000802:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    }


    /* Derivative */
    if (pid->d_mode == PID_D_FIRST_ENABLE) 
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	7e1b      	ldrb	r3, [r3, #24]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d114      	bne.n	8000838 <pid_tick+0x234>
    {
        // Derivative First
        D = pid->Kd * (pid->now - pid->prev_now) / pid->dt;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	ed93 7a02 	vldr	s14, [r3, #8]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000820:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000824:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	ed93 7a04 	vldr	s14, [r3, #16]
 800082e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000832:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8000836:	e012      	b.n	800085e <pid_tick+0x25a>
    } else 
    {
        // No Derivative First
        D = pid->Kd * (error - pid->prev_error) / pid->dt;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	ed93 7a02 	vldr	s14, [r3, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000844:	edd7 6a08 	vldr	s13, [r7, #32]
 8000848:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800084c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	ed93 7a04 	vldr	s14, [r3, #16]
 8000856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800085a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }


    /* Feedforward */
    F = pid->Kf * (pid->target - pid->prev_target);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	ed93 7a03 	vldr	s14, [r3, #12]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000870:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000878:	edc7 7a03 	vstr	s15, [r7, #12]


    /* Output sum */
    pid->out = P + I - D + F;
 800087c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000880:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000884:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000888:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800088c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000890:	edd7 7a03 	vldr	s15, [r7, #12]
 8000894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c


    /* Output clamp */
    if (pid->out_max != 0.0f) 
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	edd3 7a08 	vldr	s15, [r3, #32]
 80008a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80008a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ac:	d023      	beq.n	80008f6 <pid_tick+0x2f2>
    {
        if (pid->out > pid->out_max) pid->out = pid->out_max;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	edd3 7a08 	vldr	s15, [r3, #32]
 80008ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c2:	dd03      	ble.n	80008cc <pid_tick+0x2c8>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6a1a      	ldr	r2, [r3, #32]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (pid->out < -pid->out_max) pid->out = -pid->out_max;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80008d8:	eef1 7a67 	vneg.f32	s15, s15
 80008dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008e4:	d507      	bpl.n	80008f6 <pid_tick+0x2f2>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80008ec:	eef1 7a67 	vneg.f32	s15, s15
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
    }


    /* Save state */
    pid->prev_error = error;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6a3a      	ldr	r2, [r7, #32]
 80008fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    pid->prev_now = pid->now;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->prev_target = pid->target;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->prev_out = pid->out;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8000914:	bf00      	nop
 8000916:	3730      	adds	r7, #48	@ 0x30
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	447a0000 	.word	0x447a0000
 8000920:	358637bd 	.word	0x358637bd

08000924 <pid_get_out>:

float pid_get_out(const pid_t *pid) 
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    return pid->out;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000930:	ee07 3a90 	vmov	s15, r3
}
 8000934:	eeb0 0a67 	vmov.f32	s0, s15
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
	...

08000944 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000948:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_CAN1_Init+0x64>)
 800094a:	4a18      	ldr	r2, [pc, #96]	@ (80009ac <MX_CAN1_Init+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800094e:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <MX_CAN1_Init+0x64>)
 8000950:	2203      	movs	r2, #3
 8000952:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_CAN1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800095a:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <MX_CAN1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_CAN1_Init+0x64>)
 8000962:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000966:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_CAN1_Init+0x64>)
 800096a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800096e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000970:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <MX_CAN1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_CAN1_Init+0x64>)
 8000978:	2201      	movs	r2, #1
 800097a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800097c:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <MX_CAN1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_CAN1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <MX_CAN1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_CAN1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_CAN1_Init+0x64>)
 8000996:	f001 fbcf 	bl	8002138 <HAL_CAN_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009a0:	f001 f8fe 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000268 	.word	0x20000268
 80009ac:	40006400 	.word	0x40006400

080009b0 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <MX_CAN2_Init+0x64>)
 80009b6:	4a18      	ldr	r2, [pc, #96]	@ (8000a18 <MX_CAN2_Init+0x68>)
 80009b8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80009ba:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <MX_CAN2_Init+0x64>)
 80009bc:	2203      	movs	r2, #3
 80009be:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_CAN2_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <MX_CAN2_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <MX_CAN2_Init+0x64>)
 80009ce:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80009d2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <MX_CAN2_Init+0x64>)
 80009d6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80009da:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80009dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <MX_CAN2_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <MX_CAN2_Init+0x64>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a14 <MX_CAN2_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <MX_CAN2_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80009f4:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <MX_CAN2_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <MX_CAN2_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_CAN2_Init+0x64>)
 8000a02:	f001 fb99 	bl	8002138 <HAL_CAN_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000a0c:	f001 f8c8 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000290 	.word	0x20000290
 8000a18:	40006800 	.word	0x40006800

08000a1c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	@ 0x30
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a52      	ldr	r2, [pc, #328]	@ (8000b84 <HAL_CAN_MspInit+0x168>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d145      	bne.n	8000aca <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a3e:	4b52      	ldr	r3, [pc, #328]	@ (8000b88 <HAL_CAN_MspInit+0x16c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	3301      	adds	r3, #1
 8000a44:	4a50      	ldr	r2, [pc, #320]	@ (8000b88 <HAL_CAN_MspInit+0x16c>)
 8000a46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a48:	4b4f      	ldr	r3, [pc, #316]	@ (8000b88 <HAL_CAN_MspInit+0x16c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d10d      	bne.n	8000a6c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	4b4d      	ldr	r3, [pc, #308]	@ (8000b8c <HAL_CAN_MspInit+0x170>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a58:	4a4c      	ldr	r2, [pc, #304]	@ (8000b8c <HAL_CAN_MspInit+0x170>)
 8000a5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a60:	4b4a      	ldr	r3, [pc, #296]	@ (8000b8c <HAL_CAN_MspInit+0x170>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a68:	61bb      	str	r3, [r7, #24]
 8000a6a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	4b46      	ldr	r3, [pc, #280]	@ (8000b8c <HAL_CAN_MspInit+0x170>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	4a45      	ldr	r2, [pc, #276]	@ (8000b8c <HAL_CAN_MspInit+0x170>)
 8000a76:	f043 0308 	orr.w	r3, r3, #8
 8000a7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7c:	4b43      	ldr	r3, [pc, #268]	@ (8000b8c <HAL_CAN_MspInit+0x170>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a98:	2309      	movs	r3, #9
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	483b      	ldr	r0, [pc, #236]	@ (8000b90 <HAL_CAN_MspInit+0x174>)
 8000aa4:	f002 fec2 	bl	800382c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2014      	movs	r0, #20
 8000aae:	f002 fa84 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ab2:	2014      	movs	r0, #20
 8000ab4:	f002 fa9d 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2015      	movs	r0, #21
 8000abe:	f002 fa7c 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000ac2:	2015      	movs	r0, #21
 8000ac4:	f002 fa95 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000ac8:	e057      	b.n	8000b7a <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a31      	ldr	r2, [pc, #196]	@ (8000b94 <HAL_CAN_MspInit+0x178>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d152      	bne.n	8000b7a <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b8c <HAL_CAN_MspInit+0x170>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000adc:	4a2b      	ldr	r2, [pc, #172]	@ (8000b8c <HAL_CAN_MspInit+0x170>)
 8000ade:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae4:	4b29      	ldr	r3, [pc, #164]	@ (8000b8c <HAL_CAN_MspInit+0x170>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000af0:	4b25      	ldr	r3, [pc, #148]	@ (8000b88 <HAL_CAN_MspInit+0x16c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	4a24      	ldr	r2, [pc, #144]	@ (8000b88 <HAL_CAN_MspInit+0x16c>)
 8000af8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000afa:	4b23      	ldr	r3, [pc, #140]	@ (8000b88 <HAL_CAN_MspInit+0x16c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d10d      	bne.n	8000b1e <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <HAL_CAN_MspInit+0x170>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	4a20      	ldr	r2, [pc, #128]	@ (8000b8c <HAL_CAN_MspInit+0x170>)
 8000b0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b12:	4b1e      	ldr	r3, [pc, #120]	@ (8000b8c <HAL_CAN_MspInit+0x170>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <HAL_CAN_MspInit+0x170>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a19      	ldr	r2, [pc, #100]	@ (8000b8c <HAL_CAN_MspInit+0x170>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <HAL_CAN_MspInit+0x170>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000b3a:	2360      	movs	r3, #96	@ 0x60
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000b4a:	2309      	movs	r3, #9
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4810      	ldr	r0, [pc, #64]	@ (8000b98 <HAL_CAN_MspInit+0x17c>)
 8000b56:	f002 fe69 	bl	800382c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2040      	movs	r0, #64	@ 0x40
 8000b60:	f002 fa2b 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000b64:	2040      	movs	r0, #64	@ 0x40
 8000b66:	f002 fa44 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2041      	movs	r0, #65	@ 0x41
 8000b70:	f002 fa23 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000b74:	2041      	movs	r0, #65	@ 0x41
 8000b76:	f002 fa3c 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
}
 8000b7a:	bf00      	nop
 8000b7c:	3730      	adds	r7, #48	@ 0x30
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40006400 	.word	0x40006400
 8000b88:	200002b8 	.word	0x200002b8
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	40006800 	.word	0x40006800
 8000b98:	40020400 	.word	0x40020400

08000b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <MX_DMA_Init+0x4c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a0f      	ldr	r2, [pc, #60]	@ (8000be8 <MX_DMA_Init+0x4c>)
 8000bac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <MX_DMA_Init+0x4c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2010      	movs	r0, #16
 8000bc4:	f002 f9f9 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000bc8:	2010      	movs	r0, #16
 8000bca:	f002 fa12 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2011      	movs	r0, #17
 8000bd4:	f002 f9f1 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000bd8:	2011      	movs	r0, #17
 8000bda:	f002 fa0a 	bl	8002ff2 <HAL_NVIC_EnableIRQ>

}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800

08000bec <Enable_CAN2>:
        ptr ->given_current		= (uint16_t)((data)[4] << 8 | (data)[5]);
        ptr ->temperature 		= (data)[6];
    }
/* ------------------------------ Initialization of CAN, filter Setup）------------------------------ */
void Enable_CAN2(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	@ 0x28
 8000bf0:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef CAN_Filter;

    CAN_Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
    CAN_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61fb      	str	r3, [r7, #28]
    CAN_Filter.FilterBank = 14;             // start filters for CAN2 here
 8000bfa:	230e      	movs	r3, #14
 8000bfc:	617b      	str	r3, [r7, #20]
    CAN_Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
    CAN_Filter.SlaveStartFilterBank = 14;   // 0–13 for CAN1, 14–27 for CAN2
 8000c02:	230e      	movs	r3, #14
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
    CAN_Filter.FilterActivation = CAN_FILTER_ENABLE;
 8000c06:	2301      	movs	r3, #1
 8000c08:	623b      	str	r3, [r7, #32]
    CAN_Filter.FilterIdHigh = 0x0000;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
    CAN_Filter.FilterIdLow = 0x0000;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
    CAN_Filter.FilterMaskIdHigh = 0x0000;   // accept all IDs
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
    CAN_Filter.FilterMaskIdLow = 0x0000;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]

    if (HAL_CAN_ConfigFilter(&hcan2, &CAN_Filter) != HAL_OK){
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4812      	ldr	r0, [pc, #72]	@ (8000c68 <Enable_CAN2+0x7c>)
 8000c20:	f001 fb86 	bl	8002330 <HAL_CAN_ConfigFilter>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <Enable_CAN2+0x42>
        Error_Handler();
 8000c2a:	f000 ffb9 	bl	8001ba0 <Error_Handler>
    }
    // 👇 Add this check here
    if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 8000c2e:	480e      	ldr	r0, [pc, #56]	@ (8000c68 <Enable_CAN2+0x7c>)
 8000c30:	f001 fc5c 	bl	80024ec <HAL_CAN_Start>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <Enable_CAN2+0x52>
    	Error_Handler();
 8000c3a:	f000 ffb1 	bl	8001ba0 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000c3e:	2102      	movs	r1, #2
 8000c40:	4809      	ldr	r0, [pc, #36]	@ (8000c68 <Enable_CAN2+0x7c>)
 8000c42:	f001 fe89 	bl	8002958 <HAL_CAN_ActivateNotification>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <Enable_CAN2+0x64>
    	Error_Handler();
 8000c4c:	f000 ffa8 	bl	8001ba0 <Error_Handler>
    }

    HAL_CAN_Start(&hcan2);
 8000c50:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <Enable_CAN2+0x7c>)
 8000c52:	f001 fc4b 	bl	80024ec <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000c56:	2102      	movs	r1, #2
 8000c58:	4803      	ldr	r0, [pc, #12]	@ (8000c68 <Enable_CAN2+0x7c>)
 8000c5a:	f001 fe7d 	bl	8002958 <HAL_CAN_ActivateNotification>
}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	@ 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000290 	.word	0x20000290

08000c6c <Set_GM6020_Voltage>:


/* ------------------------------ 发送函数 ------------------------------ */
void Set_GM6020_Voltage(int16_t q1, int16_t q2, int16_t q3)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	@ 0x30
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
 8000c76:	460b      	mov	r3, r1
 8000c78:	80bb      	strh	r3, [r7, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	807b      	strh	r3, [r7, #2]
    uint8_t TxData[8];
    TxData[0] = (uint8_t)(q1>>8);
 8000c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c82:	121b      	asrs	r3, r3, #8
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    TxData[1] = (uint8_t)q1;
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    TxData[2] = (uint8_t)(q2>>8);
 8000c94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c98:	121b      	asrs	r3, r3, #8
 8000c9a:	b21b      	sxth	r3, r3
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    TxData[3] = (uint8_t)q2;
 8000ca2:	88bb      	ldrh	r3, [r7, #4]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    TxData[4] = (uint8_t)(q3>>8);
 8000caa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cae:	121b      	asrs	r3, r3, #8
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    TxData[5] = (uint8_t)q3;
 8000cb8:	887b      	ldrh	r3, [r7, #2]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    TxData[6] = (uint8_t)0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    TxData[7] = (uint8_t)0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    CAN_TxHeaderTypeDef TxHeader = {
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	615a      	str	r2, [r3, #20]
 8000cde:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	623b      	str	r3, [r7, #32]
            .DLC = 8,
            .IDE = CAN_ID_STD,    // 标准帧
            .RTR = CAN_RTR_DATA,  // 数据帧
            .StdId = 0x2ff
    };
    uint32_t TxBox = CAN_TX_MAILBOX0;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
    if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxBox) != HAL_OK){
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000cf4:	f107 0110 	add.w	r1, r7, #16
 8000cf8:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <Set_GM6020_Voltage+0xac>)
 8000cfa:	f001 fc3b 	bl	8002574 <HAL_CAN_AddTxMessage>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <Set_GM6020_Voltage+0xa4>
        HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);//错误处理
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d0a:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <Set_GM6020_Voltage+0xb0>)
 8000d0c:	f002 ff2a 	bl	8003b64 <HAL_GPIO_WritePin>
    }
}
 8000d10:	bf00      	nop
 8000d12:	3730      	adds	r7, #48	@ 0x30
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000290 	.word	0x20000290
 8000d1c:	40021c00 	.word	0x40021c00

08000d20 <Set_C620_Current>:


void Set_C620_Current(int16_t q1, int16_t q2, int16_t q3)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08c      	sub	sp, #48	@ 0x30
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	80fb      	strh	r3, [r7, #6]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	80bb      	strh	r3, [r7, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	807b      	strh	r3, [r7, #2]
    uint8_t TxData[8];
    TxData[0] = (uint8_t)(q1>>8);
 8000d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d36:	121b      	asrs	r3, r3, #8
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    TxData[1] = (uint8_t)q1;
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    TxData[2] = (uint8_t)(q2>>8);
 8000d48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d4c:	121b      	asrs	r3, r3, #8
 8000d4e:	b21b      	sxth	r3, r3
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    TxData[3] = (uint8_t)q2;
 8000d56:	88bb      	ldrh	r3, [r7, #4]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    TxData[4] = (uint8_t)(q3>>8);
 8000d5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d62:	121b      	asrs	r3, r3, #8
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    TxData[5] = (uint8_t)q3;
 8000d6c:	887b      	ldrh	r3, [r7, #2]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    TxData[6] = (uint8_t)0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    TxData[7] = (uint8_t)0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    CAN_TxHeaderTypeDef TxHeader = {
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
 8000d90:	615a      	str	r2, [r3, #20]
 8000d92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	2308      	movs	r3, #8
 8000d9a:	623b      	str	r3, [r7, #32]
            .DLC = 8,
            .IDE = CAN_ID_STD,    //standard frame
            .RTR = CAN_RTR_DATA,  //data frame
            .StdId = 0x200
    };
    uint32_t TxBox = CAN_TX_MAILBOX0;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
    if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxBox) != HAL_OK){
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000da8:	f107 0110 	add.w	r1, r7, #16
 8000dac:	4807      	ldr	r0, [pc, #28]	@ (8000dcc <Set_C620_Current+0xac>)
 8000dae:	f001 fbe1 	bl	8002574 <HAL_CAN_AddTxMessage>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d005      	beq.n	8000dc4 <Set_C620_Current+0xa4>
        HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);//错误处理
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dbe:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <Set_C620_Current+0xb0>)
 8000dc0:	f002 fed0 	bl	8003b64 <HAL_GPIO_WritePin>
    }
}
 8000dc4:	bf00      	nop
 8000dc6:	3730      	adds	r7, #48	@ 0x30
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000290 	.word	0x20000290
 8000dd0:	40021c00 	.word	0x40021c00

08000dd4 <motor_index_from_id>:
 * 0x205 --> 4
 * 0x206 --> 5
 * 0x207 --> 6
 * */
static int8_t motor_index_from_id(uint16_t id)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80fb      	strh	r3, [r7, #6]
	switch (id)
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000de4:	2b0a      	cmp	r3, #10
 8000de6:	d825      	bhi.n	8000e34 <motor_index_from_id+0x60>
 8000de8:	a201      	add	r2, pc, #4	@ (adr r2, 8000df0 <motor_index_from_id+0x1c>)
 8000dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dee:	bf00      	nop
 8000df0:	08000e1d 	.word	0x08000e1d
 8000df4:	08000e21 	.word	0x08000e21
 8000df8:	08000e25 	.word	0x08000e25
 8000dfc:	08000e35 	.word	0x08000e35
 8000e00:	08000e35 	.word	0x08000e35
 8000e04:	08000e35 	.word	0x08000e35
 8000e08:	08000e35 	.word	0x08000e35
 8000e0c:	08000e35 	.word	0x08000e35
 8000e10:	08000e29 	.word	0x08000e29
 8000e14:	08000e2d 	.word	0x08000e2d
 8000e18:	08000e31 	.word	0x08000e31
	{
		case CAN_M2006_M1_ID: return 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	e00b      	b.n	8000e38 <motor_index_from_id+0x64>
		case CAN_M2006_M2_ID: return 1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e009      	b.n	8000e38 <motor_index_from_id+0x64>
		case CAN_M2006_M3_ID: return 2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	e007      	b.n	8000e38 <motor_index_from_id+0x64>
		case CAN_GM6020_M5_ID: return 3;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e005      	b.n	8000e38 <motor_index_from_id+0x64>
		case CAN_GM6020_M6_ID: return 4;
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	e003      	b.n	8000e38 <motor_index_from_id+0x64>
		case CAN_GM6020_M7_ID: return 5;
 8000e30:	2305      	movs	r3, #5
 8000e32:	e001      	b.n	8000e38 <motor_index_from_id+0x64>

		default: return -1; //safety, filters any noise
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08c      	sub	sp, #48	@ 0x30
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	f107 0210 	add.w	r2, r7, #16
 8000e54:	2100      	movs	r1, #0
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f001 fc5c 	bl	8002714 <HAL_CAN_GetRxMessage>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d119      	bne.n	8000e96 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
    {
        int idx = motor_index_from_id(rxHeader.StdId);
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ffb4 	bl	8000dd4 <motor_index_from_id>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (idx >= 0 && idx < MOTOR_COUNT)
 8000e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db0f      	blt.n	8000e96 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 8000e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e78:	2b05      	cmp	r3, #5
 8000e7a:	dc0c      	bgt.n	8000e96 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
        {
            Motor_CAN_RxCpltCallback(&motors[idx], rxData);
 8000e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e7e:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8000e82:	fb02 f303 	mul.w	r3, r2, r3
 8000e86:	4a06      	ldr	r2, [pc, #24]	@ (8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000e88:	4413      	add	r3, r2
 8000e8a:	f107 0208 	add.w	r2, r7, #8
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 f9e3 	bl	800125c <Motor_CAN_RxCpltCallback>
        }
    }
}
 8000e96:	bf00      	nop
 8000e98:	3730      	adds	r7, #48	@ 0x30
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000350 	.word	0x20000350

08000ea4 <protocol_init>:
    0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};

static uint8_t sequence_number = 0;

void protocol_init(void) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
    sequence_number = 0;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	@ (8000eb8 <protocol_init+0x14>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	200002bc 	.word	0x200002bc

08000ebc <get_CRC8_check_sum>:

uint8_t get_CRC8_check_sum(uint8_t *pch_message, uint32_t dw_length, uint8_t ucCRC8) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	71fb      	strb	r3, [r7, #7]
    uint8_t uc_index;
    while (dw_length--) {
 8000eca:	e00a      	b.n	8000ee2 <get_CRC8_check_sum+0x26>
        uc_index = ucCRC8 ^ (*pch_message++);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	60fa      	str	r2, [r7, #12]
 8000ed2:	781a      	ldrb	r2, [r3, #0]
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	4053      	eors	r3, r2
 8000ed8:	75fb      	strb	r3, [r7, #23]
        ucCRC8 = CRC8_table[uc_index];
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
 8000edc:	4a07      	ldr	r2, [pc, #28]	@ (8000efc <get_CRC8_check_sum+0x40>)
 8000ede:	5cd3      	ldrb	r3, [r2, r3]
 8000ee0:	71fb      	strb	r3, [r7, #7]
    while (dw_length--) {
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1e5a      	subs	r2, r3, #1
 8000ee6:	60ba      	str	r2, [r7, #8]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1ef      	bne.n	8000ecc <get_CRC8_check_sum+0x10>
    }
    return ucCRC8;
 8000eec:	79fb      	ldrb	r3, [r7, #7]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	371c      	adds	r7, #28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	08005fa8 	.word	0x08005fa8

08000f00 <append_CRC8_check_sum>:
    }
    ucExpected = get_CRC8_check_sum(pch_message, dw_length - 1, CRC8_INIT);
    return (ucExpected == pch_message[dw_length - 1]);
}

void append_CRC8_check_sum(uint8_t *pch_message, uint32_t dw_length) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
    uint8_t ucCRC = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73fb      	strb	r3, [r7, #15]
    if ((pch_message == 0) || (dw_length <= 2)) {
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d012      	beq.n	8000f3a <append_CRC8_check_sum+0x3a>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d90f      	bls.n	8000f3a <append_CRC8_check_sum+0x3a>
        return;
    }
    ucCRC = get_CRC8_check_sum(pch_message, dw_length - 1, CRC8_INIT);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	22ff      	movs	r2, #255	@ 0xff
 8000f20:	4619      	mov	r1, r3
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffca 	bl	8000ebc <get_CRC8_check_sum>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
    pch_message[dw_length - 1] = ucCRC;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	4413      	add	r3, r2
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	701a      	strb	r2, [r3, #0]
 8000f38:	e000      	b.n	8000f3c <append_CRC8_check_sum+0x3c>
        return;
 8000f3a:	bf00      	nop
}
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <get_CRC16_check_sum>:

uint16_t get_CRC16_check_sum(uint8_t *pch_message, uint32_t dw_length, uint16_t wCRC) {
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	80fb      	strh	r3, [r7, #6]
    uint8_t chData;
    if (pch_message == NULL) {
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d113      	bne.n	8000f80 <get_CRC16_check_sum+0x3c>
        return 0xFFFF;
 8000f58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f5c:	e016      	b.n	8000f8c <get_CRC16_check_sum+0x48>
    }
    while(dw_length--) {
        chData = *pch_message++;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	60fa      	str	r2, [r7, #12]
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	75fb      	strb	r3, [r7, #23]
        wCRC = (wCRC >> 8) ^ wCRC_table[(wCRC ^ chData) & 0x00FF];
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	0a1b      	lsrs	r3, r3, #8
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	88f9      	ldrh	r1, [r7, #6]
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	404b      	eors	r3, r1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	@ (8000f98 <get_CRC16_check_sum+0x54>)
 8000f78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f7c:	4053      	eors	r3, r2
 8000f7e:	80fb      	strh	r3, [r7, #6]
    while(dw_length--) {
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	1e5a      	subs	r2, r3, #1
 8000f84:	60ba      	str	r2, [r7, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1e9      	bne.n	8000f5e <get_CRC16_check_sum+0x1a>
    }
    return wCRC;
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	080060a8 	.word	0x080060a8

08000f9c <append_CRC16_check_sum>:
    wExpected = get_CRC16_check_sum(pchMessage, dwLength - 2, CRC16_INIT);
    return ((wExpected & 0xFF) == pchMessage[dwLength - 2] &&
            ((wExpected >> 8) & 0xFF) == pchMessage[dwLength - 1]);
}

void append_CRC16_check_sum(uint8_t *pchMessage, uint32_t dwLength) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
    uint16_t wCRC = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	81fb      	strh	r3, [r7, #14]
    if ((pchMessage == NULL) || (dwLength <= 2)) {
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d01d      	beq.n	8000fec <append_CRC16_check_sum+0x50>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d91a      	bls.n	8000fec <append_CRC16_check_sum+0x50>
        return;
    }
    wCRC = get_CRC16_check_sum(pchMessage, dwLength - 2, CRC16_INIT);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ffbf 	bl	8000f44 <get_CRC16_check_sum>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	81fb      	strh	r3, [r7, #14]
    pchMessage[dwLength - 2] = (uint8_t)(wCRC & 0x00FF);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	3b02      	subs	r3, #2
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	89fa      	ldrh	r2, [r7, #14]
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength - 1] = (uint8_t)((wCRC >> 8) & 0x00FF);
 8000fd8:	89fb      	ldrh	r3, [r7, #14]
 8000fda:	0a1b      	lsrs	r3, r3, #8
 8000fdc:	b299      	uxth	r1, r3
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b2ca      	uxtb	r2, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	e000      	b.n	8000fee <append_CRC16_check_sum+0x52>
        return;
 8000fec:	bf00      	nop
}
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <protocol_concatenate_data>:

void protocol_concatenate_data(const AnglesAndButtons_t* sensor_data, ControllerFrame_t* tx_frame) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
    // Frame header
    tx_frame->frame_header.sof = 0xA5;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	22a5      	movs	r2, #165	@ 0xa5
 8001002:	701a      	strb	r2, [r3, #0]
    tx_frame->frame_header.data_length = DATA_LENGTH;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2200      	movs	r2, #0
 8001008:	f042 021e 	orr.w	r2, r2, #30
 800100c:	705a      	strb	r2, [r3, #1]
 800100e:	2200      	movs	r2, #0
 8001010:	709a      	strb	r2, [r3, #2]
    tx_frame->frame_header.seq = sequence_number++;
 8001012:	4b12      	ldr	r3, [pc, #72]	@ (800105c <protocol_concatenate_data+0x68>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	b2d1      	uxtb	r1, r2
 800101a:	4a10      	ldr	r2, [pc, #64]	@ (800105c <protocol_concatenate_data+0x68>)
 800101c:	7011      	strb	r1, [r2, #0]
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	70d3      	strb	r3, [r2, #3]
    
    // Calculate header CRC (only on the first 4 bytes, CRC goes in 5th)
    append_CRC8_check_sum((uint8_t*)&tx_frame->frame_header, FRAME_HEADER_LENGTH);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2105      	movs	r1, #5
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff6a 	bl	8000f00 <append_CRC8_check_sum>
    
    // Command ID
    tx_frame->cmd_id = CONTROLLER_CMD_ID;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2200      	movs	r2, #0
 8001030:	f042 0202 	orr.w	r2, r2, #2
 8001034:	715a      	strb	r2, [r3, #5]
 8001036:	2200      	movs	r2, #0
 8001038:	f042 0203 	orr.w	r2, r2, #3
 800103c:	719a      	strb	r2, [r3, #6]
    
    // Copy data (ensure it fits in 30 bytes)
    memcpy(tx_frame->data, sensor_data, DATA_LENGTH); // Copy 27 bytes
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	3307      	adds	r3, #7
 8001042:	221e      	movs	r2, #30
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4618      	mov	r0, r3
 8001048:	f004 ff8c 	bl	8005f64 <memcpy>
    
    // Calculate frame CRC (on entire frame except the last 2 CRC bytes)
    append_CRC16_check_sum((uint8_t*)tx_frame, DATA_FRAME_LENGTH);
 800104c:	2127      	movs	r1, #39	@ 0x27
 800104e:	6838      	ldr	r0, [r7, #0]
 8001050:	f7ff ffa4 	bl	8000f9c <append_CRC16_check_sum>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200002bc 	.word	0x200002bc

08001060 <HAL_UARTEx_RxEventCallback>:
 *
 * @param huart UART编号
 * @param Size 长度
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
    //选择回调函数
    if (huart->Instance == USART1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a3f      	ldr	r2, [pc, #252]	@ (8001170 <HAL_UARTEx_RxEventCallback+0x110>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d10f      	bne.n	8001096 <HAL_UARTEx_RxEventCallback+0x36>
    {
        UART1_Manage_Object.Callback_Function(UART1_Manage_Object.Rx_Buffer, Size);
 8001076:	4b3f      	ldr	r3, [pc, #252]	@ (8001174 <HAL_UARTEx_RxEventCallback+0x114>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4a3e      	ldr	r2, [pc, #248]	@ (8001174 <HAL_UARTEx_RxEventCallback+0x114>)
 800107c:	6892      	ldr	r2, [r2, #8]
 800107e:	8879      	ldrh	r1, [r7, #2]
 8001080:	4610      	mov	r0, r2
 8001082:	4798      	blx	r3
        HAL_UARTEx_ReceiveToIdle_DMA(huart, UART1_Manage_Object.Rx_Buffer, UART1_Manage_Object.Rx_Buffer_Length);
 8001084:	4b3b      	ldr	r3, [pc, #236]	@ (8001174 <HAL_UARTEx_RxEventCallback+0x114>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	4a3a      	ldr	r2, [pc, #232]	@ (8001174 <HAL_UARTEx_RxEventCallback+0x114>)
 800108a:	8992      	ldrh	r2, [r2, #12]
 800108c:	4619      	mov	r1, r3
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f003 fddd 	bl	8004c4e <HAL_UARTEx_ReceiveToIdle_DMA>
    else if (huart->Instance == USART6)
    {
        UART6_Manage_Object.Callback_Function(UART6_Manage_Object.Rx_Buffer, Size);
        HAL_UARTEx_ReceiveToIdle_DMA(huart, UART6_Manage_Object.Rx_Buffer, UART6_Manage_Object.Rx_Buffer_Length);
    }
}
 8001094:	e067      	b.n	8001166 <HAL_UARTEx_RxEventCallback+0x106>
    else if (huart->Instance == USART2)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a37      	ldr	r2, [pc, #220]	@ (8001178 <HAL_UARTEx_RxEventCallback+0x118>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d10f      	bne.n	80010c0 <HAL_UARTEx_RxEventCallback+0x60>
        UART2_Manage_Object.Callback_Function(UART2_Manage_Object.Rx_Buffer, Size);
 80010a0:	4b36      	ldr	r3, [pc, #216]	@ (800117c <HAL_UARTEx_RxEventCallback+0x11c>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	4a35      	ldr	r2, [pc, #212]	@ (800117c <HAL_UARTEx_RxEventCallback+0x11c>)
 80010a6:	6892      	ldr	r2, [r2, #8]
 80010a8:	8879      	ldrh	r1, [r7, #2]
 80010aa:	4610      	mov	r0, r2
 80010ac:	4798      	blx	r3
        HAL_UARTEx_ReceiveToIdle_DMA(huart, UART2_Manage_Object.Rx_Buffer, UART2_Manage_Object.Rx_Buffer_Length);
 80010ae:	4b33      	ldr	r3, [pc, #204]	@ (800117c <HAL_UARTEx_RxEventCallback+0x11c>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	4a32      	ldr	r2, [pc, #200]	@ (800117c <HAL_UARTEx_RxEventCallback+0x11c>)
 80010b4:	8992      	ldrh	r2, [r2, #12]
 80010b6:	4619      	mov	r1, r3
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f003 fdc8 	bl	8004c4e <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80010be:	e052      	b.n	8001166 <HAL_UARTEx_RxEventCallback+0x106>
    else if (huart->Instance == USART3)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001180 <HAL_UARTEx_RxEventCallback+0x120>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d10f      	bne.n	80010ea <HAL_UARTEx_RxEventCallback+0x8a>
        UART3_Manage_Object.Callback_Function(UART3_Manage_Object.Rx_Buffer, Size);
 80010ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001184 <HAL_UARTEx_RxEventCallback+0x124>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001184 <HAL_UARTEx_RxEventCallback+0x124>)
 80010d0:	6892      	ldr	r2, [r2, #8]
 80010d2:	8879      	ldrh	r1, [r7, #2]
 80010d4:	4610      	mov	r0, r2
 80010d6:	4798      	blx	r3
        HAL_UARTEx_ReceiveToIdle_DMA(huart, UART3_Manage_Object.Rx_Buffer, UART3_Manage_Object.Rx_Buffer_Length);
 80010d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001184 <HAL_UARTEx_RxEventCallback+0x124>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4a29      	ldr	r2, [pc, #164]	@ (8001184 <HAL_UARTEx_RxEventCallback+0x124>)
 80010de:	8992      	ldrh	r2, [r2, #12]
 80010e0:	4619      	mov	r1, r3
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f003 fdb3 	bl	8004c4e <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80010e8:	e03d      	b.n	8001166 <HAL_UARTEx_RxEventCallback+0x106>
    else if (huart->Instance == UART4)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a26      	ldr	r2, [pc, #152]	@ (8001188 <HAL_UARTEx_RxEventCallback+0x128>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d10f      	bne.n	8001114 <HAL_UARTEx_RxEventCallback+0xb4>
        UART4_Manage_Object.Callback_Function(UART4_Manage_Object.Rx_Buffer, Size);
 80010f4:	4b25      	ldr	r3, [pc, #148]	@ (800118c <HAL_UARTEx_RxEventCallback+0x12c>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4a24      	ldr	r2, [pc, #144]	@ (800118c <HAL_UARTEx_RxEventCallback+0x12c>)
 80010fa:	6892      	ldr	r2, [r2, #8]
 80010fc:	8879      	ldrh	r1, [r7, #2]
 80010fe:	4610      	mov	r0, r2
 8001100:	4798      	blx	r3
        HAL_UARTEx_ReceiveToIdle_DMA(huart, UART4_Manage_Object.Rx_Buffer, UART4_Manage_Object.Rx_Buffer_Length);
 8001102:	4b22      	ldr	r3, [pc, #136]	@ (800118c <HAL_UARTEx_RxEventCallback+0x12c>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	4a21      	ldr	r2, [pc, #132]	@ (800118c <HAL_UARTEx_RxEventCallback+0x12c>)
 8001108:	8992      	ldrh	r2, [r2, #12]
 800110a:	4619      	mov	r1, r3
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f003 fd9e 	bl	8004c4e <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001112:	e028      	b.n	8001166 <HAL_UARTEx_RxEventCallback+0x106>
    else if (huart->Instance == UART5)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1d      	ldr	r2, [pc, #116]	@ (8001190 <HAL_UARTEx_RxEventCallback+0x130>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d10f      	bne.n	800113e <HAL_UARTEx_RxEventCallback+0xde>
        UART5_Manage_Object.Callback_Function(UART5_Manage_Object.Rx_Buffer, Size);
 800111e:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <HAL_UARTEx_RxEventCallback+0x134>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	4a1c      	ldr	r2, [pc, #112]	@ (8001194 <HAL_UARTEx_RxEventCallback+0x134>)
 8001124:	6892      	ldr	r2, [r2, #8]
 8001126:	8879      	ldrh	r1, [r7, #2]
 8001128:	4610      	mov	r0, r2
 800112a:	4798      	blx	r3
        HAL_UARTEx_ReceiveToIdle_DMA(huart, UART5_Manage_Object.Rx_Buffer, UART5_Manage_Object.Rx_Buffer_Length);
 800112c:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <HAL_UARTEx_RxEventCallback+0x134>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4a18      	ldr	r2, [pc, #96]	@ (8001194 <HAL_UARTEx_RxEventCallback+0x134>)
 8001132:	8992      	ldrh	r2, [r2, #12]
 8001134:	4619      	mov	r1, r3
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f003 fd89 	bl	8004c4e <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800113c:	e013      	b.n	8001166 <HAL_UARTEx_RxEventCallback+0x106>
    else if (huart->Instance == USART6)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a15      	ldr	r2, [pc, #84]	@ (8001198 <HAL_UARTEx_RxEventCallback+0x138>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d10e      	bne.n	8001166 <HAL_UARTEx_RxEventCallback+0x106>
        UART6_Manage_Object.Callback_Function(UART6_Manage_Object.Rx_Buffer, Size);
 8001148:	4b14      	ldr	r3, [pc, #80]	@ (800119c <HAL_UARTEx_RxEventCallback+0x13c>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4a13      	ldr	r2, [pc, #76]	@ (800119c <HAL_UARTEx_RxEventCallback+0x13c>)
 800114e:	6892      	ldr	r2, [r2, #8]
 8001150:	8879      	ldrh	r1, [r7, #2]
 8001152:	4610      	mov	r0, r2
 8001154:	4798      	blx	r3
        HAL_UARTEx_ReceiveToIdle_DMA(huart, UART6_Manage_Object.Rx_Buffer, UART6_Manage_Object.Rx_Buffer_Length);
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <HAL_UARTEx_RxEventCallback+0x13c>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	4a10      	ldr	r2, [pc, #64]	@ (800119c <HAL_UARTEx_RxEventCallback+0x13c>)
 800115c:	8992      	ldrh	r2, [r2, #12]
 800115e:	4619      	mov	r1, r3
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f003 fd74 	bl	8004c4e <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40011000 	.word	0x40011000
 8001174:	200002c0 	.word	0x200002c0
 8001178:	40004400 	.word	0x40004400
 800117c:	200002d8 	.word	0x200002d8
 8001180:	40004800 	.word	0x40004800
 8001184:	200002f0 	.word	0x200002f0
 8001188:	40004c00 	.word	0x40004c00
 800118c:	20000308 	.word	0x20000308
 8001190:	40005000 	.word	0x40005000
 8001194:	20000320 	.word	0x20000320
 8001198:	40011400 	.word	0x40011400
 800119c:	20000338 	.word	0x20000338

080011a0 <allocate_tx_data>:
/**
 * @brief Allocate CAN Tx data pointer based on CAN ID.
 * @note Requires global buffers (e.g., CAN1_0x200_Tx_Data[]) defined elsewhere.
 */
static uint8_t* allocate_tx_data(CAN_HandleTypeDef *hcan, Enum_CAN_Motor_ID id)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
    // TODO: Map to actual global Tx buffers depending on hcan and id.
    // For now, return NULL as placeholder.
    return NULL;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <Motor_Init>:
                Enum_Control_Method method,
                float gearbox_rate,
                float torque_max,
                float omega_max,
                int32_t encoder_offset)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6178      	str	r0, [r7, #20]
 80011c2:	6139      	str	r1, [r7, #16]
 80011c4:	4611      	mov	r1, r2
 80011c6:	461a      	mov	r2, r3
 80011c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80011cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80011d0:	ed87 1a00 	vstr	s2, [r7]
 80011d4:	460b      	mov	r3, r1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	4613      	mov	r3, r2
 80011da:	73bb      	strb	r3, [r7, #14]
    memset(motor, 0, sizeof(Motor_t));
 80011dc:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 80011e0:	2100      	movs	r1, #0
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f004 fe92 	bl	8005f0c <memset>

    motor->hcan = hcan;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	601a      	str	r2, [r3, #0]
    motor->CAN_ID = id;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	7bfa      	ldrb	r2, [r7, #15]
 80011f2:	721a      	strb	r2, [r3, #8]
    motor->Control_Method = method;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	7bba      	ldrb	r2, [r7, #14]
 80011f8:	725a      	strb	r2, [r3, #9]
    motor->Gearbox_Rate = gearbox_rate;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	60da      	str	r2, [r3, #12]
    motor->Torque_Max = torque_max;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	611a      	str	r2, [r3, #16]
    motor->Omega_Max = omega_max;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	615a      	str	r2, [r3, #20]
    motor->Encoder_Offset = encoder_offset;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	6a3a      	ldr	r2, [r7, #32]
 8001210:	619a      	str	r2, [r3, #24]

    motor->CAN_Tx_Data = allocate_tx_data(hcan, id);
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	4619      	mov	r1, r3
 8001216:	6938      	ldr	r0, [r7, #16]
 8001218:	f7ff ffc2 	bl	80011a0 <allocate_tx_data>
 800121c:	4602      	mov	r2, r0
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	605a      	str	r2, [r3, #4]

    motor->Output_Max = 16384;   // example limit
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001228:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    motor->Encoder_Num_Per_Round = 8192; // depends on motor
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001232:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <Motor_Set_Target_Angle>:
float Motor_Get_Out(Motor_t *motor) { return motor->Out; }

/* ---------------- Setters ---------------- */

void Motor_Set_Control_Method(Motor_t *motor, Enum_Control_Method method) { motor->Control_Method = method; }
void Motor_Set_Target_Angle(Motor_t *motor, float angle) { motor->Target_Angle = angle; }
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	ed87 0a00 	vstr	s0, [r7]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <Motor_CAN_RxCpltCallback>:
void Motor_Set_Out(Motor_t *motor, float out) { motor->Out = out; }

/* ---------------- Callbacks ---------------- */

void Motor_CAN_RxCpltCallback(Motor_t *motor, uint8_t *rx_data)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
    int16_t delta_encoder;
    motor->Flag++;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	649a      	str	r2, [r3, #72]	@ 0x48

    motor->Pre_Encoder = motor->Rx_Encoder;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	87da      	strh	r2, [r3, #62]	@ 0x3e

    motor->Rx_Encoder   = (rx_data[0] << 8) | rx_data[1];
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b21b      	sxth	r3, r3
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	b21a      	sxth	r2, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b21b      	sxth	r3, r3
 800128a:	4313      	orrs	r3, r2
 800128c:	b21b      	sxth	r3, r3
 800128e:	b29a      	uxth	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	879a      	strh	r2, [r3, #60]	@ 0x3c
    int16_t rx_omega    = (rx_data[2] << 8) | rx_data[3];
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	3302      	adds	r3, #2
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b21b      	sxth	r3, r3
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21a      	sxth	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	3303      	adds	r3, #3
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	81fb      	strh	r3, [r7, #14]
    int16_t rx_torque   = (rx_data[4] << 8) | rx_data[5];
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	3304      	adds	r3, #4
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	3305      	adds	r3, #5
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b21b      	sxth	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	81bb      	strh	r3, [r7, #12]
    uint8_t rx_temp     = rx_data[6];
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	799b      	ldrb	r3, [r3, #6]
 80012c8:	72fb      	strb	r3, [r7, #11]

    delta_encoder = motor->Rx_Encoder - motor->Pre_Encoder;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	813b      	strh	r3, [r7, #8]
    if (delta_encoder < -4096) {
 80012d8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012dc:	f513 5f80 	cmn.w	r3, #4096	@ 0x1000
 80012e0:	da05      	bge.n	80012ee <Motor_CAN_RxCpltCallback+0x92>
        motor->Total_Round++;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80012ec:	e009      	b.n	8001302 <Motor_CAN_RxCpltCallback+0xa6>
    } else if (delta_encoder > 4096) {
 80012ee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012f6:	dd04      	ble.n	8001302 <Motor_CAN_RxCpltCallback+0xa6>
        motor->Total_Round--;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	1e5a      	subs	r2, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    motor->Total_Encoder = motor->Total_Round * motor->Encoder_Num_Per_Round
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 800130c:	fb02 f303 	mul.w	r3, r2, r3
                         + motor->Rx_Encoder + motor->Encoder_Offset;
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	8f92      	ldrh	r2, [r2, #60]	@ 0x3c
 8001314:	441a      	add	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	441a      	add	r2, r3
    motor->Total_Encoder = motor->Total_Round * motor->Encoder_Num_Per_Round
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	645a      	str	r2, [r3, #68]	@ 0x44

    motor->Now_Angle = (float)motor->Total_Encoder / (float)motor->Encoder_Num_Per_Round
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800133a:	eec6 7a87 	vdiv.f32	s15, s13, s14
                     * 2.0f * PI / motor->Gearbox_Rate;
 800133e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001342:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80013a4 <Motor_CAN_RxCpltCallback+0x148>
 8001346:	ee67 6a87 	vmul.f32	s13, s15, s14
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001350:	eec6 7a87 	vdiv.f32	s15, s13, s14
    motor->Now_Angle = (float)motor->Total_Encoder / (float)motor->Encoder_Num_Per_Round
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	edc3 7a07 	vstr	s15, [r3, #28]
    motor->Now_Omega = (float)rx_omega * RPM_TO_RADPS / motor->Gearbox_Rate;
 800135a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001366:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80013a8 <Motor_CAN_RxCpltCallback+0x14c>
 800136a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	ed93 7a03 	vldr	s14, [r3, #12]
 8001374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	edc3 7a08 	vstr	s15, [r3, #32]
    motor->Now_Torque = rx_torque;
 800137e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    motor->Now_Temperature = rx_temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7afa      	ldrb	r2, [r7, #11]
 8001394:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40490fdb 	.word	0x40490fdb
 80013a8:	3dd67750 	.word	0x3dd67750

080013ac <Motor_TIM_PID_PeriodElapsedCallback>:
    }
    motor->Pre_Flag = motor->Flag;
}

void Motor_TIM_PID_PeriodElapsedCallback(Motor_t *motor)
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
    switch (motor->Control_Method) {
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7a5b      	ldrb	r3, [r3, #9]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	f200 80b5 	bhi.w	8001528 <Motor_TIM_PID_PeriodElapsedCallback+0x17c>
 80013be:	a201      	add	r2, pc, #4	@ (adr r2, 80013c4 <Motor_TIM_PID_PeriodElapsedCallback+0x18>)
 80013c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c4:	080013d5 	.word	0x080013d5
 80013c8:	080013ff 	.word	0x080013ff
 80013cc:	0800144f 	.word	0x0800144f
 80013d0:	0800149b 	.word	0x0800149b
    case Control_Method_OPENLOOP:
        motor->Out = motor->Target_Torque / motor->Torque_Max * motor->Output_Max;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80013e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        break;
 80013fc:	e099      	b.n	8001532 <Motor_TIM_PID_PeriodElapsedCallback+0x186>

    case Control_Method_TORQUE:
        pid_set_target(&motor->PID_Torque, motor->Target_Torque);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800140a:	eeb0 0a67 	vmov.f32	s0, s15
 800140e:	4610      	mov	r0, r2
 8001410:	f7ff f8da 	bl	80005c8 <pid_set_target>
        pid_set_now(&motor->PID_Torque, motor->Now_Torque);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001420:	eeb0 0a67 	vmov.f32	s0, s15
 8001424:	4610      	mov	r0, r2
 8001426:	f7ff f8de 	bl	80005e6 <pid_set_now>
        pid_tick(&motor->PID_Torque);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f8e7 	bl	8000604 <pid_tick>
        motor->Out = pid_get_out(&motor->PID_Torque);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fa71 	bl	8000924 <pid_get_out>
 8001442:	eef0 7a40 	vmov.f32	s15, s0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        break;
 800144c:	e071      	b.n	8001532 <Motor_TIM_PID_PeriodElapsedCallback+0x186>

    case Control_Method_OMEGA:
        pid_set_target(&motor->PID_Omega, motor->Target_Omega);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800145a:	eeb0 0a67 	vmov.f32	s0, s15
 800145e:	4610      	mov	r0, r2
 8001460:	f7ff f8b2 	bl	80005c8 <pid_set_target>
        pid_set_now(&motor->PID_Omega, motor->Now_Omega);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001470:	eeb0 0a67 	vmov.f32	s0, s15
 8001474:	4610      	mov	r0, r2
 8001476:	f7ff f8b6 	bl	80005e6 <pid_set_now>
        pid_tick(&motor->PID_Omega);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	33ac      	adds	r3, #172	@ 0xac
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f8c0 	bl	8000604 <pid_tick>
        motor->Out = pid_get_out(&motor->PID_Omega);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	33ac      	adds	r3, #172	@ 0xac
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fa4b 	bl	8000924 <pid_get_out>
 800148e:	eef0 7a40 	vmov.f32	s15, s0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        break;
 8001498:	e04b      	b.n	8001532 <Motor_TIM_PID_PeriodElapsedCallback+0x186>

    case Control_Method_ANGLE:
        pid_set_target(&motor->PID_Angle, motor->Target_Angle);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80014a6:	eeb0 0a67 	vmov.f32	s0, s15
 80014aa:	4610      	mov	r0, r2
 80014ac:	f7ff f88c 	bl	80005c8 <pid_set_target>
        pid_set_now(&motor->PID_Angle, motor->Now_Angle);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	4610      	mov	r0, r2
 80014c2:	f7ff f890 	bl	80005e6 <pid_set_now>
        pid_tick(&motor->PID_Angle);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3358      	adds	r3, #88	@ 0x58
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f89a 	bl	8000604 <pid_tick>

        pid_set_target(&motor->PID_Torque, pid_get_out(&motor->PID_Angle));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f503 7480 	add.w	r4, r3, #256	@ 0x100
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3358      	adds	r3, #88	@ 0x58
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fa22 	bl	8000924 <pid_get_out>
 80014e0:	eef0 7a40 	vmov.f32	s15, s0
 80014e4:	eeb0 0a67 	vmov.f32	s0, s15
 80014e8:	4620      	mov	r0, r4
 80014ea:	f7ff f86d 	bl	80005c8 <pid_set_target>
        pid_set_now(&motor->PID_Torque, motor->Now_Torque);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80014fa:	eeb0 0a67 	vmov.f32	s0, s15
 80014fe:	4610      	mov	r0, r2
 8001500:	f7ff f871 	bl	80005e6 <pid_set_now>
        pid_tick(&motor->PID_Torque);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f87a 	bl	8000604 <pid_tick>

        motor->Out = pid_get_out(&motor->PID_Torque);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fa04 	bl	8000924 <pid_get_out>
 800151c:	eef0 7a40 	vmov.f32	s15, s0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        break;
 8001526:	e004      	b.n	8001532 <Motor_TIM_PID_PeriodElapsedCallback+0x186>

    default:
        motor->Out = 0.0f;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8001530:	bf00      	nop
    }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bd90      	pop	{r4, r7, pc}
 800153a:	bf00      	nop

0800153c <Motors_Init>:


Motor_t motors[MOTOR_COUNT];

void Motors_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08e      	sub	sp, #56	@ 0x38
 8001540:	af02      	add	r7, sp, #8
    // Example CAN IDs and methods per motor
    Enum_CAN_Motor_ID motor_ids[MOTOR_COUNT] = {
 8001542:	4ab8      	ldr	r2, [pc, #736]	@ (8001824 <Motors_Init+0x2e8>)
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800154c:	6018      	str	r0, [r3, #0]
 800154e:	3304      	adds	r3, #4
 8001550:	8019      	strh	r1, [r3, #0]
        CAN_Motor_ID_0x209, // motor3
        CAN_Motor_ID_0x20A, // motor4
        CAN_Motor_ID_0x20B  // motor5
    };

    Enum_Control_Method methods[MOTOR_COUNT] = {
 8001552:	4ab5      	ldr	r2, [pc, #724]	@ (8001828 <Motors_Init+0x2ec>)
 8001554:	f107 0318 	add.w	r3, r7, #24
 8001558:	e892 0003 	ldmia.w	r2, {r0, r1}
 800155c:	6018      	str	r0, [r3, #0]
 800155e:	3304      	adds	r3, #4
 8001560:	8019      	strh	r1, [r3, #0]
        Control_Method_ANGLE,  // motor3
        Control_Method_ANGLE,  // motor4
        Control_Method_ANGLE   // motor5
    };

	float encoder_offsets[MOTOR_COUNT] = {
 8001562:	463b      	mov	r3, r7
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
 8001570:	615a      	str	r2, [r3, #20]
		0.0f, // motor3
		0.0f, // motor4
		0.0f  // motor5
	};

	for (int i = 0; i < MOTOR_COUNT; i++) {
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001576:	e14c      	b.n	8001812 <Motors_Init+0x2d6>
	    // Set gearbox ratio: 36.0 when i is 0, 1, or 2; else 0.0
	    float gearbox_ratio = (i <= 2) ? 36.0f : 1.0f;
 8001578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157a:	2b02      	cmp	r3, #2
 800157c:	dc01      	bgt.n	8001582 <Motors_Init+0x46>
 800157e:	4bab      	ldr	r3, [pc, #684]	@ (800182c <Motors_Init+0x2f0>)
 8001580:	e001      	b.n	8001586 <Motors_Init+0x4a>
 8001582:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001586:	62bb      	str	r3, [r7, #40]	@ 0x28

	    // Init motor struct
	    Motor_Init(&motors[i],
 8001588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800158a:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	4aa7      	ldr	r2, [pc, #668]	@ (8001830 <Motors_Init+0x2f4>)
 8001594:	1898      	adds	r0, r3, r2
 8001596:	f107 0220 	add.w	r2, r7, #32
 800159a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800159c:	4413      	add	r3, r2
 800159e:	7819      	ldrb	r1, [r3, #0]
 80015a0:	f107 0218 	add.w	r2, r7, #24
 80015a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015a6:	4413      	add	r3, r2
 80015a8:	781a      	ldrb	r2, [r3, #0]
	               motor_ids[i],
	               methods[i],
	               gearbox_ratio,        // gearbox ratio (36.0 for i=0,1,2; 0.0 otherwise)
	               1.0f,                 // torque_max
	               400.0f,               // omega_max
	               encoder_offsets[i]);
 80015aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	3330      	adds	r3, #48	@ 0x30
 80015b0:	443b      	add	r3, r7
 80015b2:	3b30      	subs	r3, #48	@ 0x30
 80015b4:	edd3 7a00 	vldr	s15, [r3]
	    Motor_Init(&motors[i],
 80015b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015bc:	ee17 3a90 	vmov	r3, s15
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 8001834 <Motors_Init+0x2f8>
 80015c6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80015ca:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80015ce:	4613      	mov	r3, r2
 80015d0:	460a      	mov	r2, r1
 80015d2:	4999      	ldr	r1, [pc, #612]	@ (8001838 <Motors_Init+0x2fc>)
 80015d4:	f7ff fdf1 	bl	80011ba <Motor_Init>

        // Angle PID
        pid_init(&motors[i].PID_Angle,
 80015d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015da:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	3358      	adds	r3, #88	@ 0x58
 80015e4:	4a92      	ldr	r2, [pc, #584]	@ (8001830 <Motors_Init+0x2f4>)
 80015e6:	1898      	adds	r0, r3, r2
 80015e8:	4994      	ldr	r1, [pc, #592]	@ (800183c <Motors_Init+0x300>)
 80015ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	015b      	lsls	r3, r3, #5
 80015f4:	440b      	add	r3, r1
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	4990      	ldr	r1, [pc, #576]	@ (800183c <Motors_Init+0x300>)
 80015fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	015b      	lsls	r3, r3, #5
 8001606:	440b      	add	r3, r1
 8001608:	3304      	adds	r3, #4
 800160a:	ed93 7a00 	vldr	s14, [r3]
 800160e:	498b      	ldr	r1, [pc, #556]	@ (800183c <Motors_Init+0x300>)
 8001610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	015b      	lsls	r3, r3, #5
 800161a:	440b      	add	r3, r1
 800161c:	330c      	adds	r3, #12
 800161e:	edd3 6a00 	vldr	s13, [r3]
 8001622:	4986      	ldr	r1, [pc, #536]	@ (800183c <Motors_Init+0x300>)
 8001624:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	015b      	lsls	r3, r3, #5
 800162e:	440b      	add	r3, r1
 8001630:	3308      	adds	r3, #8
 8001632:	ed93 6a00 	vldr	s12, [r3]
 8001636:	4981      	ldr	r1, [pc, #516]	@ (800183c <Motors_Init+0x300>)
 8001638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	015b      	lsls	r3, r3, #5
 8001642:	440b      	add	r3, r1
 8001644:	3310      	adds	r3, #16
 8001646:	edd3 5a00 	vldr	s11, [r3]
 800164a:	497c      	ldr	r1, [pc, #496]	@ (800183c <Motors_Init+0x300>)
 800164c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	015b      	lsls	r3, r3, #5
 8001656:	440b      	add	r3, r1
 8001658:	3314      	adds	r3, #20
 800165a:	edd3 2a00 	vldr	s5, [r3]
 800165e:	4977      	ldr	r1, [pc, #476]	@ (800183c <Motors_Init+0x300>)
 8001660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	015b      	lsls	r3, r3, #5
 800166a:	440b      	add	r3, r1
 800166c:	3318      	adds	r3, #24
 800166e:	ed93 3a00 	vldr	s6, [r3]
 8001672:	4972      	ldr	r1, [pc, #456]	@ (800183c <Motors_Init+0x300>)
 8001674:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	015b      	lsls	r3, r3, #5
 800167e:	440b      	add	r3, r1
 8001680:	331c      	adds	r3, #28
 8001682:	edd3 3a00 	vldr	s7, [r3]
 8001686:	496d      	ldr	r1, [pc, #436]	@ (800183c <Motors_Init+0x300>)
 8001688:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	015b      	lsls	r3, r3, #5
 8001692:	440b      	add	r3, r1
 8001694:	3320      	adds	r3, #32
 8001696:	ed93 4a00 	vldr	s8, [r3]
 800169a:	4968      	ldr	r1, [pc, #416]	@ (800183c <Motors_Init+0x300>)
 800169c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	015b      	lsls	r3, r3, #5
 80016a6:	440b      	add	r3, r1
 80016a8:	3324      	adds	r3, #36	@ 0x24
 80016aa:	edd3 4a00 	vldr	s9, [r3]
 80016ae:	4963      	ldr	r1, [pc, #396]	@ (800183c <Motors_Init+0x300>)
 80016b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	015b      	lsls	r3, r3, #5
 80016ba:	440b      	add	r3, r1
 80016bc:	3328      	adds	r3, #40	@ 0x28
 80016be:	ed93 5a00 	vldr	s10, [r3]
                 motor_pid_cfg[i].angle.dt,
                 motor_pid_cfg[i].angle.dead_zone,
                 motor_pid_cfg[i].angle.i_var_a,
                 motor_pid_cfg[i].angle.i_var_b,
                 motor_pid_cfg[i].angle.i_sep_threshold,
                 motor_pid_cfg[i].angle.d_first);
 80016c2:	495e      	ldr	r1, [pc, #376]	@ (800183c <Motors_Init+0x300>)
 80016c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	015b      	lsls	r3, r3, #5
 80016ce:	440b      	add	r3, r1
 80016d0:	332c      	adds	r3, #44	@ 0x2c
 80016d2:	681b      	ldr	r3, [r3, #0]
        pid_init(&motors[i].PID_Angle,
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	4619      	mov	r1, r3
 80016d8:	eeb0 2a65 	vmov.f32	s4, s11
 80016dc:	eef0 1a46 	vmov.f32	s3, s12
 80016e0:	eeb0 1a66 	vmov.f32	s2, s13
 80016e4:	eef0 0a47 	vmov.f32	s1, s14
 80016e8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ec:	f7fe ff02 	bl	80004f4 <pid_init>

        // Torque PID
        pid_init(&motors[i].PID_Torque,
 80016f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016f2:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 80016f6:	fb02 f303 	mul.w	r3, r2, r3
 80016fa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80016fe:	4a4c      	ldr	r2, [pc, #304]	@ (8001830 <Motors_Init+0x2f4>)
 8001700:	1898      	adds	r0, r3, r2
 8001702:	494e      	ldr	r1, [pc, #312]	@ (800183c <Motors_Init+0x300>)
 8001704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	015b      	lsls	r3, r3, #5
 800170e:	440b      	add	r3, r1
 8001710:	3330      	adds	r3, #48	@ 0x30
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	4949      	ldr	r1, [pc, #292]	@ (800183c <Motors_Init+0x300>)
 8001718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	015b      	lsls	r3, r3, #5
 8001722:	440b      	add	r3, r1
 8001724:	3334      	adds	r3, #52	@ 0x34
 8001726:	ed93 7a00 	vldr	s14, [r3]
 800172a:	4944      	ldr	r1, [pc, #272]	@ (800183c <Motors_Init+0x300>)
 800172c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	015b      	lsls	r3, r3, #5
 8001736:	440b      	add	r3, r1
 8001738:	333c      	adds	r3, #60	@ 0x3c
 800173a:	edd3 6a00 	vldr	s13, [r3]
 800173e:	493f      	ldr	r1, [pc, #252]	@ (800183c <Motors_Init+0x300>)
 8001740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	015b      	lsls	r3, r3, #5
 800174a:	440b      	add	r3, r1
 800174c:	3308      	adds	r3, #8
 800174e:	ed93 6a00 	vldr	s12, [r3]
 8001752:	493a      	ldr	r1, [pc, #232]	@ (800183c <Motors_Init+0x300>)
 8001754:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	015b      	lsls	r3, r3, #5
 800175e:	440b      	add	r3, r1
 8001760:	3340      	adds	r3, #64	@ 0x40
 8001762:	edd3 5a00 	vldr	s11, [r3]
 8001766:	4935      	ldr	r1, [pc, #212]	@ (800183c <Motors_Init+0x300>)
 8001768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	015b      	lsls	r3, r3, #5
 8001772:	440b      	add	r3, r1
 8001774:	3344      	adds	r3, #68	@ 0x44
 8001776:	edd3 2a00 	vldr	s5, [r3]
 800177a:	4930      	ldr	r1, [pc, #192]	@ (800183c <Motors_Init+0x300>)
 800177c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800177e:	4613      	mov	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	015b      	lsls	r3, r3, #5
 8001786:	440b      	add	r3, r1
 8001788:	3348      	adds	r3, #72	@ 0x48
 800178a:	ed93 3a00 	vldr	s6, [r3]
 800178e:	492b      	ldr	r1, [pc, #172]	@ (800183c <Motors_Init+0x300>)
 8001790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	015b      	lsls	r3, r3, #5
 800179a:	440b      	add	r3, r1
 800179c:	334c      	adds	r3, #76	@ 0x4c
 800179e:	edd3 3a00 	vldr	s7, [r3]
 80017a2:	4926      	ldr	r1, [pc, #152]	@ (800183c <Motors_Init+0x300>)
 80017a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017a6:	4613      	mov	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	015b      	lsls	r3, r3, #5
 80017ae:	440b      	add	r3, r1
 80017b0:	3350      	adds	r3, #80	@ 0x50
 80017b2:	ed93 4a00 	vldr	s8, [r3]
 80017b6:	4921      	ldr	r1, [pc, #132]	@ (800183c <Motors_Init+0x300>)
 80017b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	015b      	lsls	r3, r3, #5
 80017c2:	440b      	add	r3, r1
 80017c4:	3354      	adds	r3, #84	@ 0x54
 80017c6:	edd3 4a00 	vldr	s9, [r3]
 80017ca:	491c      	ldr	r1, [pc, #112]	@ (800183c <Motors_Init+0x300>)
 80017cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ce:	4613      	mov	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	015b      	lsls	r3, r3, #5
 80017d6:	440b      	add	r3, r1
 80017d8:	3358      	adds	r3, #88	@ 0x58
 80017da:	ed93 5a00 	vldr	s10, [r3]
                 motor_pid_cfg[i].torque.dt,
                 motor_pid_cfg[i].torque.dead_zone,
                 motor_pid_cfg[i].torque.i_var_a,
                 motor_pid_cfg[i].torque.i_var_b,
                 motor_pid_cfg[i].torque.i_sep_threshold,
                 motor_pid_cfg[i].torque.d_first);
 80017de:	4917      	ldr	r1, [pc, #92]	@ (800183c <Motors_Init+0x300>)
 80017e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	440b      	add	r3, r1
 80017ec:	335c      	adds	r3, #92	@ 0x5c
 80017ee:	681b      	ldr	r3, [r3, #0]
        pid_init(&motors[i].PID_Torque,
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	4619      	mov	r1, r3
 80017f4:	eeb0 2a65 	vmov.f32	s4, s11
 80017f8:	eef0 1a46 	vmov.f32	s3, s12
 80017fc:	eeb0 1a66 	vmov.f32	s2, s13
 8001800:	eef0 0a47 	vmov.f32	s1, s14
 8001804:	eeb0 0a67 	vmov.f32	s0, s15
 8001808:	f7fe fe74 	bl	80004f4 <pid_init>
	for (int i = 0; i < MOTOR_COUNT; i++) {
 800180c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800180e:	3301      	adds	r3, #1
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001814:	2b05      	cmp	r3, #5
 8001816:	f77f aeaf 	ble.w	8001578 <Motors_Init+0x3c>
    }
}
 800181a:	bf00      	nop
 800181c:	bf00      	nop
 800181e:	3730      	adds	r7, #48	@ 0x30
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	08005f98 	.word	0x08005f98
 8001828:	08005fa0 	.word	0x08005fa0
 800182c:	42100000 	.word	0x42100000
 8001830:	20000350 	.word	0x20000350
 8001834:	43c80000 	.word	0x43c80000
 8001838:	20000290 	.word	0x20000290
 800183c:	20000000 	.word	0x20000000

08001840 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	@ 0x28
 8001844:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b27      	ldr	r3, [pc, #156]	@ (80018f8 <MX_GPIO_Init+0xb8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a26      	ldr	r2, [pc, #152]	@ (80018f8 <MX_GPIO_Init+0xb8>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b24      	ldr	r3, [pc, #144]	@ (80018f8 <MX_GPIO_Init+0xb8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b20      	ldr	r3, [pc, #128]	@ (80018f8 <MX_GPIO_Init+0xb8>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a1f      	ldr	r2, [pc, #124]	@ (80018f8 <MX_GPIO_Init+0xb8>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <MX_GPIO_Init+0xb8>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <MX_GPIO_Init+0xb8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a18      	ldr	r2, [pc, #96]	@ (80018f8 <MX_GPIO_Init+0xb8>)
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <MX_GPIO_Init+0xb8>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <MX_GPIO_Init+0xb8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a11      	ldr	r2, [pc, #68]	@ (80018f8 <MX_GPIO_Init+0xb8>)
 80018b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <MX_GPIO_Init+0xb8>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80018c6:	2200      	movs	r2, #0
 80018c8:	f641 413c 	movw	r1, #7228	@ 0x1c3c
 80018cc:	480b      	ldr	r0, [pc, #44]	@ (80018fc <MX_GPIO_Init+0xbc>)
 80018ce:	f002 f949 	bl	8003b64 <HAL_GPIO_WritePin>
                          |LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PH2 PH3 PH4 PH5
                           LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80018d2:	f641 433c 	movw	r3, #7228	@ 0x1c3c
 80018d6:	617b      	str	r3, [r7, #20]
                          |LED_R_Pin|LED_G_Pin|LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	4804      	ldr	r0, [pc, #16]	@ (80018fc <MX_GPIO_Init+0xbc>)
 80018ec:	f001 ff9e 	bl	800382c <HAL_GPIO_Init>

}
 80018f0:	bf00      	nop
 80018f2:	3728      	adds	r7, #40	@ 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40021c00 	.word	0x40021c00

08001900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001904:	f000 fb82 	bl	800200c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001908:	f000 f8e0 	bl	8001acc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800190c:	f7ff ff98 	bl	8001840 <MX_GPIO_Init>
  MX_DMA_Init();
 8001910:	f7ff f944 	bl	8000b9c <MX_DMA_Init>
  MX_CAN1_Init();
 8001914:	f7ff f816 	bl	8000944 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001918:	f7ff f84a 	bl	80009b0 <MX_CAN2_Init>
  MX_USART2_UART_Init();
 800191c:	f000 fa6e 	bl	8001dfc <MX_USART2_UART_Init>
  MX_TIM6_Init();                    // init TIM6 first
 8001920:	f000 fa0e 	bl	8001d40 <MX_TIM6_Init>
  HAL_TIM_Base_Start_IT(&htim6);     // then start it with interrupt enabled
 8001924:	4811      	ldr	r0, [pc, #68]	@ (800196c <main+0x6c>)
 8001926:	f002 fdf9 	bl	800451c <HAL_TIM_Base_Start_IT>
  protocol_init();
 800192a:	f7ff fabb 	bl	8000ea4 <protocol_init>

  /* USER CODE BEGIN 2 */
  Enable_CAN2();
 800192e:	f7ff f95d 	bl	8000bec <Enable_CAN2>
  Motors_Init();
 8001932:	f7ff fe03 	bl	800153c <Motors_Init>
  Motor_Set_Target_Angle(&motors[3], -1.8f);
 8001936:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001970 <main+0x70>
 800193a:	480e      	ldr	r0, [pc, #56]	@ (8001974 <main+0x74>)
 800193c:	f7ff fc7f 	bl	800123e <Motor_Set_Target_Angle>
  Motor_Set_Target_Angle(&motors[4], -2.0f);
 8001940:	eeb8 0a00 	vmov.f32	s0, #128	@ 0xc0000000 -2.0
 8001944:	480c      	ldr	r0, [pc, #48]	@ (8001978 <main+0x78>)
 8001946:	f7ff fc7a 	bl	800123e <Motor_Set_Target_Angle>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Check if it's time to send data (every 100ms)
    if (HAL_GetTick() - last_send_time >= SEND_INTERVAL_MS) {
 800194a:	f000 fbc5 	bl	80020d8 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <main+0x7c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b63      	cmp	r3, #99	@ 0x63
 8001958:	d9f7      	bls.n	800194a <main+0x4a>
        collect_and_send_data();
 800195a:	f000 f823 	bl	80019a4 <collect_and_send_data>
        last_send_time = HAL_GetTick();
 800195e:	f000 fbbb 	bl	80020d8 <HAL_GetTick>
 8001962:	4603      	mov	r3, r0
 8001964:	4a05      	ldr	r2, [pc, #20]	@ (800197c <main+0x7c>)
 8001966:	6013      	str	r3, [r2, #0]
    if (HAL_GetTick() - last_send_time >= SEND_INTERVAL_MS) {
 8001968:	e7ef      	b.n	800194a <main+0x4a>
 800196a:	bf00      	nop
 800196c:	20000b90 	.word	0x20000b90
 8001970:	bfe66666 	.word	0xbfe66666
 8001974:	2000074c 	.word	0x2000074c
 8001978:	200008a0 	.word	0x200008a0
 800197c:	20000b8c 	.word	0x20000b8c

08001980 <send_to_vtm>:
  }
  /* USER CODE END 3 */
}


void send_to_vtm(const ControllerFrame_t* frame) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
    // Transmit via UART (blocking)
    HAL_UART_Transmit(&huart2, (uint8_t*)frame, DATA_FRAME_LENGTH, HAL_MAX_DELAY);
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
 800198c:	2227      	movs	r2, #39	@ 0x27
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4803      	ldr	r0, [pc, #12]	@ (80019a0 <send_to_vtm+0x20>)
 8001992:	f003 f8d1 	bl	8004b38 <HAL_UART_Transmit>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000bd8 	.word	0x20000bd8

080019a4 <collect_and_send_data>:
  * @brief Collect angle data and send via UART
  * @retval None
  *
  *
  */
void collect_and_send_data(void) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
    // Populate sensor_data with motor angles and button statuses
    for (int i = 0; i < 6; i++) {
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	e010      	b.n	80019d2 <collect_and_send_data+0x2e>
        sensor_data.angle_data[i] = motors[i].Now_Angle; // Assuming motors[i].Angle exists
 80019b0:	4a13      	ldr	r2, [pc, #76]	@ (8001a00 <collect_and_send_data+0x5c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	331c      	adds	r3, #28
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4910      	ldr	r1, [pc, #64]	@ (8001a04 <collect_and_send_data+0x60>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 6; i++) {
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3301      	adds	r3, #1
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	ddeb      	ble.n	80019b0 <collect_and_send_data+0xc>
    }
    // Set button statuses (example: all buttons off; modify as needed)
    sensor_data.button_status[0] = 0;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <collect_and_send_data+0x60>)
 80019da:	2200      	movs	r2, #0
 80019dc:	761a      	strb	r2, [r3, #24]
    sensor_data.button_status[1] = 0;
 80019de:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <collect_and_send_data+0x60>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	765a      	strb	r2, [r3, #25]
    sensor_data.button_status[2] = 0;
 80019e4:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <collect_and_send_data+0x60>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	769a      	strb	r2, [r3, #26]

    // Prepare the frame
    protocol_concatenate_data(&sensor_data, &tx_frame);
 80019ea:	4907      	ldr	r1, [pc, #28]	@ (8001a08 <collect_and_send_data+0x64>)
 80019ec:	4805      	ldr	r0, [pc, #20]	@ (8001a04 <collect_and_send_data+0x60>)
 80019ee:	f7ff fb01 	bl	8000ff4 <protocol_concatenate_data>

    // Send the frame via UART
    send_to_vtm(&tx_frame);
 80019f2:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <collect_and_send_data+0x64>)
 80019f4:	f7ff ffc4 	bl	8001980 <send_to_vtm>
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000350 	.word	0x20000350
 8001a04:	20000b48 	.word	0x20000b48
 8001a08:	20000b64 	.word	0x20000b64

08001a0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d14e      	bne.n	8001abc <HAL_TIM_PeriodElapsedCallback+0xb0>
    {
        for (int i = 0; i < MOTOR_COUNT; i++) {
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	e00c      	b.n	8001a3e <HAL_TIM_PeriodElapsedCallback+0x32>
            Motor_TIM_PID_PeriodElapsedCallback(&motors[i]);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	4a26      	ldr	r2, [pc, #152]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a30:	4413      	add	r3, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fcba 	bl	80013ac <Motor_TIM_PID_PeriodElapsedCallback>
        for (int i = 0; i < MOTOR_COUNT; i++) {
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	ddef      	ble.n	8001a24 <HAL_TIM_PeriodElapsedCallback+0x18>
        }

        Set_C620_Current((int16_t)motors[0].Out,
 8001a44:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a46:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001a4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4e:	ee17 3a90 	vmov	r3, s15
 8001a52:	b21b      	sxth	r3, r3
                         (int16_t)motors[1].Out,
 8001a54:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a56:	edd2 7a63 	vldr	s15, [r2, #396]	@ 0x18c
        Set_C620_Current((int16_t)motors[0].Out,
 8001a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a5e:	ee17 2a90 	vmov	r2, s15
 8001a62:	b211      	sxth	r1, r2
                         (int16_t)motors[2].Out);
 8001a64:	4a18      	ldr	r2, [pc, #96]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a66:	edd2 7ab8 	vldr	s15, [r2, #736]	@ 0x2e0
        Set_C620_Current((int16_t)motors[0].Out,
 8001a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a6e:	ee17 2a90 	vmov	r2, s15
 8001a72:	b212      	sxth	r2, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff f953 	bl	8000d20 <Set_C620_Current>

        Set_GM6020_Voltage((int16_t)motors[3].Out,
 8001a7a:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a7c:	f203 4334 	addw	r3, r3, #1076	@ 0x434
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a88:	ee17 3a90 	vmov	r3, s15
 8001a8c:	b218      	sxth	r0, r3
                           (int16_t)motors[4].Out,
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a90:	f503 63b1 	add.w	r3, r3, #1416	@ 0x588
 8001a94:	edd3 7a00 	vldr	s15, [r3]
        Set_GM6020_Voltage((int16_t)motors[3].Out,
 8001a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a9c:	ee17 3a90 	vmov	r3, s15
 8001aa0:	b219      	sxth	r1, r3
                           (int16_t)motors[5].Out);
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001aa4:	f203 63dc 	addw	r3, r3, #1756	@ 0x6dc
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
        Set_GM6020_Voltage((int16_t)motors[3].Out,
 8001aac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab0:	ee17 3a90 	vmov	r3, s15
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f7ff f8d8 	bl	8000c6c <Set_GM6020_Voltage>
    }
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40001000 	.word	0x40001000
 8001ac8:	20000350 	.word	0x20000350

08001acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b094      	sub	sp, #80	@ 0x50
 8001ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad2:	f107 0320 	add.w	r3, r7, #32
 8001ad6:	2230      	movs	r2, #48	@ 0x30
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f004 fa16 	bl	8005f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	4b28      	ldr	r3, [pc, #160]	@ (8001b98 <SystemClock_Config+0xcc>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	4a27      	ldr	r2, [pc, #156]	@ (8001b98 <SystemClock_Config+0xcc>)
 8001afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001afe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b00:	4b25      	ldr	r3, [pc, #148]	@ (8001b98 <SystemClock_Config+0xcc>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	4b22      	ldr	r3, [pc, #136]	@ (8001b9c <SystemClock_Config+0xd0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a21      	ldr	r2, [pc, #132]	@ (8001b9c <SystemClock_Config+0xd0>)
 8001b16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b9c <SystemClock_Config+0xd0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b32:	2302      	movs	r3, #2
 8001b34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b36:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001b3c:	230c      	movs	r3, #12
 8001b3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b40:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001b44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b46:	2302      	movs	r3, #2
 8001b48:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b4e:	f107 0320 	add.w	r3, r7, #32
 8001b52:	4618      	mov	r0, r3
 8001b54:	f002 f83a 	bl	8003bcc <HAL_RCC_OscConfig>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b5e:	f000 f81f 	bl	8001ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b62:	230f      	movs	r3, #15
 8001b64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b66:	2302      	movs	r3, #2
 8001b68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b6e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	2105      	movs	r1, #5
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fa9b 	bl	80040bc <HAL_RCC_ClockConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b8c:	f000 f808 	bl	8001ba0 <Error_Handler>
  }
}
 8001b90:	bf00      	nop
 8001b92:	3750      	adds	r7, #80	@ 0x50
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40007000 	.word	0x40007000

08001ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001baa:	4807      	ldr	r0, [pc, #28]	@ (8001bc8 <Error_Handler+0x28>)
 8001bac:	f001 ffda 	bl	8003b64 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb0:	b672      	cpsid	i
}
 8001bb2:	bf00      	nop
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8001bb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bb8:	4803      	ldr	r0, [pc, #12]	@ (8001bc8 <Error_Handler+0x28>)
 8001bba:	f001 ffec 	bl	8003b96 <HAL_GPIO_TogglePin>
      HAL_Delay(250); // blink every 250ms
 8001bbe:	20fa      	movs	r0, #250	@ 0xfa
 8001bc0:	f000 fa96 	bl	80020f0 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8001bc4:	bf00      	nop
 8001bc6:	e7f5      	b.n	8001bb4 <Error_Handler+0x14>
 8001bc8:	40021c00 	.word	0x40021c00

08001bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <HAL_MspInit+0x4c>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bda:	4a0f      	ldr	r2, [pc, #60]	@ (8001c18 <HAL_MspInit+0x4c>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c18 <HAL_MspInit+0x4c>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <HAL_MspInit+0x4c>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	4a08      	ldr	r2, [pc, #32]	@ (8001c18 <HAL_MspInit+0x4c>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_MspInit+0x4c>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800

08001c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <NMI_Handler+0x4>

08001c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <HardFault_Handler+0x4>

08001c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <MemManage_Handler+0x4>

08001c34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c72:	f000 fa1d 	bl	80020b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c80:	4802      	ldr	r0, [pc, #8]	@ (8001c8c <DMA1_Stream5_IRQHandler+0x10>)
 8001c82:	f001 fb69 	bl	8003358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000c20 	.word	0x20000c20

08001c90 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c94:	4802      	ldr	r0, [pc, #8]	@ (8001ca0 <DMA1_Stream6_IRQHandler+0x10>)
 8001c96:	f001 fb5f 	bl	8003358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000c80 	.word	0x20000c80

08001ca4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ca8:	4802      	ldr	r0, [pc, #8]	@ (8001cb4 <CAN1_RX0_IRQHandler+0x10>)
 8001caa:	f000 fe7b 	bl	80029a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000268 	.word	0x20000268

08001cb8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cbc:	4802      	ldr	r0, [pc, #8]	@ (8001cc8 <CAN1_RX1_IRQHandler+0x10>)
 8001cbe:	f000 fe71 	bl	80029a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000268 	.word	0x20000268

08001ccc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cd0:	4802      	ldr	r0, [pc, #8]	@ (8001cdc <USART2_IRQHandler+0x10>)
 8001cd2:	f003 f815 	bl	8004d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000bd8 	.word	0x20000bd8

08001ce0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ce4:	4802      	ldr	r0, [pc, #8]	@ (8001cf0 <TIM6_DAC_IRQHandler+0x10>)
 8001ce6:	f002 fc89 	bl	80045fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000b90 	.word	0x20000b90

08001cf4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <CAN2_RX0_IRQHandler+0x10>)
 8001cfa:	f000 fe53 	bl	80029a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000290 	.word	0x20000290

08001d08 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <CAN2_RX1_IRQHandler+0x10>)
 8001d0e:	f000 fe49 	bl	80029a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000290 	.word	0x20000290

08001d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <SystemInit+0x20>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d26:	4a05      	ldr	r2, [pc, #20]	@ (8001d3c <SystemInit+0x20>)
 8001d28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d46:	463b      	mov	r3, r7
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <MX_TIM6_Init+0x64>)
 8001d50:	4a15      	ldr	r2, [pc, #84]	@ (8001da8 <MX_TIM6_Init+0x68>)
 8001d52:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <MX_TIM6_Init+0x64>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <MX_TIM6_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001d60:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <MX_TIM6_Init+0x64>)
 8001d62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d66:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d68:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <MX_TIM6_Init+0x64>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d6e:	480d      	ldr	r0, [pc, #52]	@ (8001da4 <MX_TIM6_Init+0x64>)
 8001d70:	f002 fb84 	bl	800447c <HAL_TIM_Base_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001d7a:	f7ff ff11 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d86:	463b      	mov	r3, r7
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4806      	ldr	r0, [pc, #24]	@ (8001da4 <MX_TIM6_Init+0x64>)
 8001d8c:	f002 fdf4 	bl	8004978 <HAL_TIMEx_MasterConfigSynchronization>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001d96:	f7ff ff03 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000b90 	.word	0x20000b90
 8001da8:	40001000 	.word	0x40001000

08001dac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0e      	ldr	r2, [pc, #56]	@ (8001df4 <HAL_TIM_Base_MspInit+0x48>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d115      	bne.n	8001dea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001df8 <HAL_TIM_Base_MspInit+0x4c>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001df8 <HAL_TIM_Base_MspInit+0x4c>)
 8001dc8:	f043 0310 	orr.w	r3, r3, #16
 8001dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dce:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <HAL_TIM_Base_MspInit+0x4c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2036      	movs	r0, #54	@ 0x36
 8001de0:	f001 f8eb 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001de4:	2036      	movs	r0, #54	@ 0x36
 8001de6:	f001 f904 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40001000 	.word	0x40001000
 8001df8:	40023800 	.word	0x40023800

08001dfc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e00:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e02:	4a12      	ldr	r2, [pc, #72]	@ (8001e4c <MX_USART2_UART_Init+0x50>)
 8001e04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e06:	4b10      	ldr	r3, [pc, #64]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e20:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e22:	220c      	movs	r2, #12
 8001e24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e26:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e32:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e34:	f002 fe30 	bl	8004a98 <HAL_UART_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e3e:	f7ff feaf 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000bd8 	.word	0x20000bd8
 8001e4c:	40004400 	.word	0x40004400

08001e50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	@ 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f9c <HAL_UART_MspInit+0x14c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	f040 8090 	bne.w	8001f94 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	4b49      	ldr	r3, [pc, #292]	@ (8001fa0 <HAL_UART_MspInit+0x150>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	4a48      	ldr	r2, [pc, #288]	@ (8001fa0 <HAL_UART_MspInit+0x150>)
 8001e7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e84:	4b46      	ldr	r3, [pc, #280]	@ (8001fa0 <HAL_UART_MspInit+0x150>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	4b42      	ldr	r3, [pc, #264]	@ (8001fa0 <HAL_UART_MspInit+0x150>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e98:	4a41      	ldr	r2, [pc, #260]	@ (8001fa0 <HAL_UART_MspInit+0x150>)
 8001e9a:	f043 0308 	orr.w	r3, r3, #8
 8001e9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea0:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa0 <HAL_UART_MspInit+0x150>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001eac:	2360      	movs	r3, #96	@ 0x60
 8001eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ebc:	2307      	movs	r3, #7
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4837      	ldr	r0, [pc, #220]	@ (8001fa4 <HAL_UART_MspInit+0x154>)
 8001ec8:	f001 fcb0 	bl	800382c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ecc:	4b36      	ldr	r3, [pc, #216]	@ (8001fa8 <HAL_UART_MspInit+0x158>)
 8001ece:	4a37      	ldr	r2, [pc, #220]	@ (8001fac <HAL_UART_MspInit+0x15c>)
 8001ed0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ed2:	4b35      	ldr	r3, [pc, #212]	@ (8001fa8 <HAL_UART_MspInit+0x158>)
 8001ed4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ed8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eda:	4b33      	ldr	r3, [pc, #204]	@ (8001fa8 <HAL_UART_MspInit+0x158>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ee0:	4b31      	ldr	r3, [pc, #196]	@ (8001fa8 <HAL_UART_MspInit+0x158>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ee6:	4b30      	ldr	r3, [pc, #192]	@ (8001fa8 <HAL_UART_MspInit+0x158>)
 8001ee8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eee:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa8 <HAL_UART_MspInit+0x158>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa8 <HAL_UART_MspInit+0x158>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001efa:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa8 <HAL_UART_MspInit+0x158>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f00:	4b29      	ldr	r3, [pc, #164]	@ (8001fa8 <HAL_UART_MspInit+0x158>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f06:	4b28      	ldr	r3, [pc, #160]	@ (8001fa8 <HAL_UART_MspInit+0x158>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f0c:	4826      	ldr	r0, [pc, #152]	@ (8001fa8 <HAL_UART_MspInit+0x158>)
 8001f0e:	f001 f88b 	bl	8003028 <HAL_DMA_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001f18:	f7ff fe42 	bl	8001ba0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a22      	ldr	r2, [pc, #136]	@ (8001fa8 <HAL_UART_MspInit+0x158>)
 8001f20:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f22:	4a21      	ldr	r2, [pc, #132]	@ (8001fa8 <HAL_UART_MspInit+0x158>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001f28:	4b21      	ldr	r3, [pc, #132]	@ (8001fb0 <HAL_UART_MspInit+0x160>)
 8001f2a:	4a22      	ldr	r2, [pc, #136]	@ (8001fb4 <HAL_UART_MspInit+0x164>)
 8001f2c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001f2e:	4b20      	ldr	r3, [pc, #128]	@ (8001fb0 <HAL_UART_MspInit+0x160>)
 8001f30:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f34:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f36:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb0 <HAL_UART_MspInit+0x160>)
 8001f38:	2240      	movs	r2, #64	@ 0x40
 8001f3a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb0 <HAL_UART_MspInit+0x160>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f42:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb0 <HAL_UART_MspInit+0x160>)
 8001f44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f48:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f4a:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <HAL_UART_MspInit+0x160>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f50:	4b17      	ldr	r3, [pc, #92]	@ (8001fb0 <HAL_UART_MspInit+0x160>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f56:	4b16      	ldr	r3, [pc, #88]	@ (8001fb0 <HAL_UART_MspInit+0x160>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f5c:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <HAL_UART_MspInit+0x160>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f62:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <HAL_UART_MspInit+0x160>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f68:	4811      	ldr	r0, [pc, #68]	@ (8001fb0 <HAL_UART_MspInit+0x160>)
 8001f6a:	f001 f85d 	bl	8003028 <HAL_DMA_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001f74:	f7ff fe14 	bl	8001ba0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb0 <HAL_UART_MspInit+0x160>)
 8001f7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb0 <HAL_UART_MspInit+0x160>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	2026      	movs	r0, #38	@ 0x26
 8001f8a:	f001 f816 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f8e:	2026      	movs	r0, #38	@ 0x26
 8001f90:	f001 f82f 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f94:	bf00      	nop
 8001f96:	3728      	adds	r7, #40	@ 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40004400 	.word	0x40004400
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020c00 	.word	0x40020c00
 8001fa8:	20000c20 	.word	0x20000c20
 8001fac:	40026088 	.word	0x40026088
 8001fb0:	20000c80 	.word	0x20000c80
 8001fb4:	400260a0 	.word	0x400260a0

08001fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ff0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fbc:	f7ff feae 	bl	8001d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc0:	480c      	ldr	r0, [pc, #48]	@ (8001ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fc2:	490d      	ldr	r1, [pc, #52]	@ (8001ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc8:	e002      	b.n	8001fd0 <LoopCopyDataInit>

08001fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fce:	3304      	adds	r3, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd4:	d3f9      	bcc.n	8001fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8002004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fdc:	e001      	b.n	8001fe2 <LoopFillZerobss>

08001fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe0:	3204      	adds	r2, #4

08001fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe4:	d3fb      	bcc.n	8001fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fe6:	f003 ff99 	bl	8005f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fea:	f7ff fc89 	bl	8001900 <main>
  bx  lr    
 8001fee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ff0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff8:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8001ffc:	080062d8 	.word	0x080062d8
  ldr r2, =_sbss
 8002000:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8002004:	20000ce4 	.word	0x20000ce4

08002008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC_IRQHandler>
	...

0800200c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002010:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <HAL_Init+0x40>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <HAL_Init+0x40>)
 8002016:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800201a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800201c:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <HAL_Init+0x40>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <HAL_Init+0x40>)
 8002022:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <HAL_Init+0x40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a07      	ldr	r2, [pc, #28]	@ (800204c <HAL_Init+0x40>)
 800202e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002034:	2003      	movs	r0, #3
 8002036:	f000 ffb5 	bl	8002fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800203a:	200f      	movs	r0, #15
 800203c:	f000 f808 	bl	8002050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002040:	f7ff fdc4 	bl	8001bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023c00 	.word	0x40023c00

08002050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002058:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <HAL_InitTick+0x54>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <HAL_InitTick+0x58>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002066:	fbb3 f3f1 	udiv	r3, r3, r1
 800206a:	fbb2 f3f3 	udiv	r3, r2, r3
 800206e:	4618      	mov	r0, r3
 8002070:	f000 ffcd 	bl	800300e <HAL_SYSTICK_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e00e      	b.n	800209c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	d80a      	bhi.n	800209a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002084:	2200      	movs	r2, #0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f000 ff95 	bl	8002fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002090:	4a06      	ldr	r2, [pc, #24]	@ (80020ac <HAL_InitTick+0x5c>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000240 	.word	0x20000240
 80020a8:	20000248 	.word	0x20000248
 80020ac:	20000244 	.word	0x20000244

080020b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b4:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_IncTick+0x20>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <HAL_IncTick+0x24>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <HAL_IncTick+0x24>)
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000248 	.word	0x20000248
 80020d4:	20000ce0 	.word	0x20000ce0

080020d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return uwTick;
 80020dc:	4b03      	ldr	r3, [pc, #12]	@ (80020ec <HAL_GetTick+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000ce0 	.word	0x20000ce0

080020f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f8:	f7ff ffee 	bl	80020d8 <HAL_GetTick>
 80020fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d005      	beq.n	8002116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800210a:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <HAL_Delay+0x44>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002116:	bf00      	nop
 8002118:	f7ff ffde 	bl	80020d8 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	429a      	cmp	r2, r3
 8002126:	d8f7      	bhi.n	8002118 <HAL_Delay+0x28>
  {
  }
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000248 	.word	0x20000248

08002138 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e0ed      	b.n	8002326 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7fe fc60 	bl	8000a1c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800216c:	f7ff ffb4 	bl	80020d8 <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002172:	e012      	b.n	800219a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002174:	f7ff ffb0 	bl	80020d8 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b0a      	cmp	r3, #10
 8002180:	d90b      	bls.n	800219a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002186:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2205      	movs	r2, #5
 8002192:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e0c5      	b.n	8002326 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0e5      	beq.n	8002174 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0202 	bic.w	r2, r2, #2
 80021b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021b8:	f7ff ff8e 	bl	80020d8 <HAL_GetTick>
 80021bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021be:	e012      	b.n	80021e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021c0:	f7ff ff8a 	bl	80020d8 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b0a      	cmp	r3, #10
 80021cc:	d90b      	bls.n	80021e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2205      	movs	r2, #5
 80021de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e09f      	b.n	8002326 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1e5      	bne.n	80021c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7e1b      	ldrb	r3, [r3, #24]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d108      	bne.n	800220e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	e007      	b.n	800221e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800221c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7e5b      	ldrb	r3, [r3, #25]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d108      	bne.n	8002238 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	e007      	b.n	8002248 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002246:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7e9b      	ldrb	r3, [r3, #26]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d108      	bne.n	8002262 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0220 	orr.w	r2, r2, #32
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	e007      	b.n	8002272 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0220 	bic.w	r2, r2, #32
 8002270:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7edb      	ldrb	r3, [r3, #27]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d108      	bne.n	800228c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0210 	bic.w	r2, r2, #16
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e007      	b.n	800229c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0210 	orr.w	r2, r2, #16
 800229a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7f1b      	ldrb	r3, [r3, #28]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d108      	bne.n	80022b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0208 	orr.w	r2, r2, #8
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e007      	b.n	80022c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0208 	bic.w	r2, r2, #8
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7f5b      	ldrb	r3, [r3, #29]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d108      	bne.n	80022e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0204 	orr.w	r2, r2, #4
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e007      	b.n	80022f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0204 	bic.w	r2, r2, #4
 80022ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	ea42 0103 	orr.w	r1, r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	1e5a      	subs	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002340:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8002342:	7dfb      	ldrb	r3, [r7, #23]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d003      	beq.n	8002350 <HAL_CAN_ConfigFilter+0x20>
 8002348:	7dfb      	ldrb	r3, [r7, #23]
 800234a:	2b02      	cmp	r3, #2
 800234c:	f040 80be 	bne.w	80024cc <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002350:	4b65      	ldr	r3, [pc, #404]	@ (80024e8 <HAL_CAN_ConfigFilter+0x1b8>)
 8002352:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800235a:	f043 0201 	orr.w	r2, r3, #1
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800236a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	431a      	orrs	r2, r3
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2201      	movs	r2, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	401a      	ands	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d123      	bne.n	80023fa <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	401a      	ands	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023d4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	3248      	adds	r2, #72	@ 0x48
 80023da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023ee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023f0:	6939      	ldr	r1, [r7, #16]
 80023f2:	3348      	adds	r3, #72	@ 0x48
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	440b      	add	r3, r1
 80023f8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d122      	bne.n	8002448 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	431a      	orrs	r2, r3
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002422:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	3248      	adds	r2, #72	@ 0x48
 8002428:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800243c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800243e:	6939      	ldr	r1, [r7, #16]
 8002440:	3348      	adds	r3, #72	@ 0x48
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	440b      	add	r3, r1
 8002446:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d109      	bne.n	8002464 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	43db      	mvns	r3, r3
 800245a:	401a      	ands	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002462:	e007      	b.n	8002474 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	431a      	orrs	r2, r3
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d109      	bne.n	8002490 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	43db      	mvns	r3, r3
 8002486:	401a      	ands	r2, r3
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800248e:	e007      	b.n	80024a0 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	431a      	orrs	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d107      	bne.n	80024b8 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	431a      	orrs	r2, r3
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024be:	f023 0201 	bic.w	r2, r3, #1
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e006      	b.n	80024da <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
  }
}
 80024da:	4618      	mov	r0, r3
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40006400 	.word	0x40006400

080024ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d12e      	bne.n	800255e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002518:	f7ff fdde 	bl	80020d8 <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800251e:	e012      	b.n	8002546 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002520:	f7ff fdda 	bl	80020d8 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b0a      	cmp	r3, #10
 800252c:	d90b      	bls.n	8002546 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2205      	movs	r2, #5
 800253e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e012      	b.n	800256c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e5      	bne.n	8002520 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e006      	b.n	800256c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
  }
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	@ 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002588:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002592:	7ffb      	ldrb	r3, [r7, #31]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d003      	beq.n	80025a0 <HAL_CAN_AddTxMessage+0x2c>
 8002598:	7ffb      	ldrb	r3, [r7, #31]
 800259a:	2b02      	cmp	r3, #2
 800259c:	f040 80ad 	bne.w	80026fa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10a      	bne.n	80025c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d105      	bne.n	80025c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8095 	beq.w	80026ea <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	0e1b      	lsrs	r3, r3, #24
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80025ca:	2201      	movs	r2, #1
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10d      	bne.n	80025f8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025e6:	68f9      	ldr	r1, [r7, #12]
 80025e8:	6809      	ldr	r1, [r1, #0]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3318      	adds	r3, #24
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	440b      	add	r3, r1
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e00f      	b.n	8002618 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002602:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002608:	68f9      	ldr	r1, [r7, #12]
 800260a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800260c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3318      	adds	r3, #24
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	440b      	add	r3, r1
 8002616:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6819      	ldr	r1, [r3, #0]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	3318      	adds	r3, #24
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	440b      	add	r3, r1
 8002628:	3304      	adds	r3, #4
 800262a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	7d1b      	ldrb	r3, [r3, #20]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d111      	bne.n	8002658 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3318      	adds	r3, #24
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	4413      	add	r3, r2
 8002640:	3304      	adds	r3, #4
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	6811      	ldr	r1, [r2, #0]
 8002648:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3318      	adds	r3, #24
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	440b      	add	r3, r1
 8002654:	3304      	adds	r3, #4
 8002656:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3307      	adds	r3, #7
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	061a      	lsls	r2, r3, #24
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3306      	adds	r3, #6
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	041b      	lsls	r3, r3, #16
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3305      	adds	r3, #5
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	4313      	orrs	r3, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	3204      	adds	r2, #4
 8002678:	7812      	ldrb	r2, [r2, #0]
 800267a:	4610      	mov	r0, r2
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	6811      	ldr	r1, [r2, #0]
 8002680:	ea43 0200 	orr.w	r2, r3, r0
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	440b      	add	r3, r1
 800268a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800268e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3303      	adds	r3, #3
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	061a      	lsls	r2, r3, #24
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3302      	adds	r3, #2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	041b      	lsls	r3, r3, #16
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3301      	adds	r3, #1
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	4313      	orrs	r3, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	7812      	ldrb	r2, [r2, #0]
 80026b0:	4610      	mov	r0, r2
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	6811      	ldr	r1, [r2, #0]
 80026b6:	ea43 0200 	orr.w	r2, r3, r0
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	440b      	add	r3, r1
 80026c0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80026c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	3318      	adds	r3, #24
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	4413      	add	r3, r2
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	6811      	ldr	r1, [r2, #0]
 80026d8:	f043 0201 	orr.w	r2, r3, #1
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3318      	adds	r3, #24
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	440b      	add	r3, r1
 80026e4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e00e      	b.n	8002708 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e006      	b.n	8002708 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	@ 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002728:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800272a:	7dfb      	ldrb	r3, [r7, #23]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d003      	beq.n	8002738 <HAL_CAN_GetRxMessage+0x24>
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	2b02      	cmp	r3, #2
 8002734:	f040 8103 	bne.w	800293e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10e      	bne.n	800275c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d116      	bne.n	800277a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0f7      	b.n	800294c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d107      	bne.n	800277a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e0e8      	b.n	800294c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	331b      	adds	r3, #27
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	4413      	add	r3, r2
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0204 	and.w	r2, r3, #4
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10c      	bne.n	80027b2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	331b      	adds	r3, #27
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	4413      	add	r3, r2
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	0d5b      	lsrs	r3, r3, #21
 80027a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e00b      	b.n	80027ca <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	331b      	adds	r3, #27
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	4413      	add	r3, r2
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	08db      	lsrs	r3, r3, #3
 80027c2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	331b      	adds	r3, #27
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	4413      	add	r3, r2
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0202 	and.w	r2, r3, #2
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	331b      	adds	r3, #27
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	4413      	add	r3, r2
 80027ec:	3304      	adds	r3, #4
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2208      	movs	r2, #8
 80027fc:	611a      	str	r2, [r3, #16]
 80027fe:	e00b      	b.n	8002818 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	331b      	adds	r3, #27
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	4413      	add	r3, r2
 800280c:	3304      	adds	r3, #4
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 020f 	and.w	r2, r3, #15
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	331b      	adds	r3, #27
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	4413      	add	r3, r2
 8002824:	3304      	adds	r3, #4
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	0a1b      	lsrs	r3, r3, #8
 800282a:	b2da      	uxtb	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	331b      	adds	r3, #27
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	4413      	add	r3, r2
 800283c:	3304      	adds	r3, #4
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	b29a      	uxth	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	4413      	add	r3, r2
 8002852:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	4413      	add	r3, r2
 8002868:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	0a1a      	lsrs	r2, r3, #8
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	3301      	adds	r3, #1
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	4413      	add	r3, r2
 8002882:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0c1a      	lsrs	r2, r3, #16
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	3302      	adds	r3, #2
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	4413      	add	r3, r2
 800289c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	0e1a      	lsrs	r2, r3, #24
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	3303      	adds	r3, #3
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	3304      	adds	r3, #4
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	0a1a      	lsrs	r2, r3, #8
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	3305      	adds	r3, #5
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	0c1a      	lsrs	r2, r3, #16
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	3306      	adds	r3, #6
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	4413      	add	r3, r2
 8002902:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	0e1a      	lsrs	r2, r3, #24
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	3307      	adds	r3, #7
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d108      	bne.n	800292a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0220 	orr.w	r2, r2, #32
 8002926:	60da      	str	r2, [r3, #12]
 8002928:	e007      	b.n	800293a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0220 	orr.w	r2, r2, #32
 8002938:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e006      	b.n	800294c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002942:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
  }
}
 800294c:	4618      	mov	r0, r3
 800294e:	371c      	adds	r7, #28
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002968:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d002      	beq.n	8002976 <HAL_CAN_ActivateNotification+0x1e>
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d109      	bne.n	800298a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6959      	ldr	r1, [r3, #20]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e006      	b.n	8002998 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
  }
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	@ 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80029ac:	2300      	movs	r3, #0
 80029ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d07c      	beq.n	8002ae4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d023      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2201      	movs	r2, #1
 80029fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f983 	bl	8002d12 <HAL_CAN_TxMailbox0CompleteCallback>
 8002a0c:	e016      	b.n	8002a3c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d004      	beq.n	8002a22 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a20:	e00c      	b.n	8002a3c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d004      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a34:	e002      	b.n	8002a3c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f989 	bl	8002d4e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d024      	beq.n	8002a90 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f963 	bl	8002d26 <HAL_CAN_TxMailbox1CompleteCallback>
 8002a60:	e016      	b.n	8002a90 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a74:	e00c      	b.n	8002a90 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d004      	beq.n	8002a8a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a88:	e002      	b.n	8002a90 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f969 	bl	8002d62 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d024      	beq.n	8002ae4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002aa2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f943 	bl	8002d3a <HAL_CAN_TxMailbox2CompleteCallback>
 8002ab4:	e016      	b.n	8002ae4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d004      	beq.n	8002aca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac8:	e00c      	b.n	8002ae4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d004      	beq.n	8002ade <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8002adc:	e002      	b.n	8002ae4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f949 	bl	8002d76 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00c      	beq.n	8002b08 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2210      	movs	r2, #16
 8002b06:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2208      	movs	r2, #8
 8002b22:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f930 	bl	8002d8a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe f97e 	bl	8000e44 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00c      	beq.n	8002b6c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d007      	beq.n	8002b6c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2210      	movs	r2, #16
 8002b6a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00b      	beq.n	8002b8e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d006      	beq.n	8002b8e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2208      	movs	r2, #8
 8002b86:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f912 	bl	8002db2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d009      	beq.n	8002bac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f8f9 	bl	8002d9e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d006      	beq.n	8002bce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f8fc 	bl	8002dc6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00b      	beq.n	8002bf0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d006      	beq.n	8002bf0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2208      	movs	r2, #8
 8002be8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f8f5 	bl	8002dda <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d07b      	beq.n	8002cf2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d072      	beq.n	8002cea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c36:	f043 0302 	orr.w	r3, r3, #2
 8002c3a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	f043 0304 	orr.w	r3, r3, #4
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d043      	beq.n	8002cea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d03e      	beq.n	8002cea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c72:	2b60      	cmp	r3, #96	@ 0x60
 8002c74:	d02b      	beq.n	8002cce <HAL_CAN_IRQHandler+0x32a>
 8002c76:	2b60      	cmp	r3, #96	@ 0x60
 8002c78:	d82e      	bhi.n	8002cd8 <HAL_CAN_IRQHandler+0x334>
 8002c7a:	2b50      	cmp	r3, #80	@ 0x50
 8002c7c:	d022      	beq.n	8002cc4 <HAL_CAN_IRQHandler+0x320>
 8002c7e:	2b50      	cmp	r3, #80	@ 0x50
 8002c80:	d82a      	bhi.n	8002cd8 <HAL_CAN_IRQHandler+0x334>
 8002c82:	2b40      	cmp	r3, #64	@ 0x40
 8002c84:	d019      	beq.n	8002cba <HAL_CAN_IRQHandler+0x316>
 8002c86:	2b40      	cmp	r3, #64	@ 0x40
 8002c88:	d826      	bhi.n	8002cd8 <HAL_CAN_IRQHandler+0x334>
 8002c8a:	2b30      	cmp	r3, #48	@ 0x30
 8002c8c:	d010      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0x30c>
 8002c8e:	2b30      	cmp	r3, #48	@ 0x30
 8002c90:	d822      	bhi.n	8002cd8 <HAL_CAN_IRQHandler+0x334>
 8002c92:	2b10      	cmp	r3, #16
 8002c94:	d002      	beq.n	8002c9c <HAL_CAN_IRQHandler+0x2f8>
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d005      	beq.n	8002ca6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002c9a:	e01d      	b.n	8002cd8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	f043 0308 	orr.w	r3, r3, #8
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ca4:	e019      	b.n	8002cda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	f043 0310 	orr.w	r3, r3, #16
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cae:	e014      	b.n	8002cda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	f043 0320 	orr.w	r3, r3, #32
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cb8:	e00f      	b.n	8002cda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cc2:	e00a      	b.n	8002cda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ccc:	e005      	b.n	8002cda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cd6:	e000      	b.n	8002cda <HAL_CAN_IRQHandler+0x336>
            break;
 8002cd8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699a      	ldr	r2, [r3, #24]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ce8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f872 	bl	8002dee <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	3728      	adds	r7, #40	@ 0x28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e14:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <__NVIC_SetPriorityGrouping+0x44>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e20:	4013      	ands	r3, r2
 8002e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e36:	4a04      	ldr	r2, [pc, #16]	@ (8002e48 <__NVIC_SetPriorityGrouping+0x44>)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	60d3      	str	r3, [r2, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e50:	4b04      	ldr	r3, [pc, #16]	@ (8002e64 <__NVIC_GetPriorityGrouping+0x18>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	0a1b      	lsrs	r3, r3, #8
 8002e56:	f003 0307 	and.w	r3, r3, #7
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	db0b      	blt.n	8002e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	f003 021f 	and.w	r2, r3, #31
 8002e80:	4907      	ldr	r1, [pc, #28]	@ (8002ea0 <__NVIC_EnableIRQ+0x38>)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	2001      	movs	r0, #1
 8002e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	e000e100 	.word	0xe000e100

08002ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	6039      	str	r1, [r7, #0]
 8002eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	db0a      	blt.n	8002ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	490c      	ldr	r1, [pc, #48]	@ (8002ef0 <__NVIC_SetPriority+0x4c>)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	0112      	lsls	r2, r2, #4
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ecc:	e00a      	b.n	8002ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	4908      	ldr	r1, [pc, #32]	@ (8002ef4 <__NVIC_SetPriority+0x50>)
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	3b04      	subs	r3, #4
 8002edc:	0112      	lsls	r2, r2, #4
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	761a      	strb	r2, [r3, #24]
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000e100 	.word	0xe000e100
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b089      	sub	sp, #36	@ 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f1c3 0307 	rsb	r3, r3, #7
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	bf28      	it	cs
 8002f16:	2304      	movcs	r3, #4
 8002f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	2b06      	cmp	r3, #6
 8002f20:	d902      	bls.n	8002f28 <NVIC_EncodePriority+0x30>
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3b03      	subs	r3, #3
 8002f26:	e000      	b.n	8002f2a <NVIC_EncodePriority+0x32>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43da      	mvns	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f40:	f04f 31ff 	mov.w	r1, #4294967295
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	43d9      	mvns	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	4313      	orrs	r3, r2
         );
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3724      	adds	r7, #36	@ 0x24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f70:	d301      	bcc.n	8002f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f72:	2301      	movs	r3, #1
 8002f74:	e00f      	b.n	8002f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f76:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa0 <SysTick_Config+0x40>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f7e:	210f      	movs	r1, #15
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295
 8002f84:	f7ff ff8e 	bl	8002ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f88:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <SysTick_Config+0x40>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f8e:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <SysTick_Config+0x40>)
 8002f90:	2207      	movs	r2, #7
 8002f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	e000e010 	.word	0xe000e010

08002fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ff29 	bl	8002e04 <__NVIC_SetPriorityGrouping>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fcc:	f7ff ff3e 	bl	8002e4c <__NVIC_GetPriorityGrouping>
 8002fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	6978      	ldr	r0, [r7, #20]
 8002fd8:	f7ff ff8e 	bl	8002ef8 <NVIC_EncodePriority>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff5d 	bl	8002ea4 <__NVIC_SetPriority>
}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ff31 	bl	8002e68 <__NVIC_EnableIRQ>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ffa2 	bl	8002f60 <SysTick_Config>
 800301c:	4603      	mov	r3, r0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003034:	f7ff f850 	bl	80020d8 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e099      	b.n	8003178 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003064:	e00f      	b.n	8003086 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003066:	f7ff f837 	bl	80020d8 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b05      	cmp	r3, #5
 8003072:	d908      	bls.n	8003086 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2203      	movs	r2, #3
 800307e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e078      	b.n	8003178 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e8      	bne.n	8003066 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4b38      	ldr	r3, [pc, #224]	@ (8003180 <HAL_DMA_Init+0x158>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d107      	bne.n	80030f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e8:	4313      	orrs	r3, r2
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f023 0307 	bic.w	r3, r3, #7
 8003106:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	2b04      	cmp	r3, #4
 8003118:	d117      	bne.n	800314a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00e      	beq.n	800314a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fb01 	bl	8003734 <DMA_CheckFifoParam>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2240      	movs	r2, #64	@ 0x40
 800313c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003146:	2301      	movs	r3, #1
 8003148:	e016      	b.n	8003178 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fab8 	bl	80036c8 <DMA_CalcBaseAndBitshift>
 8003158:	4603      	mov	r3, r0
 800315a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003160:	223f      	movs	r2, #63	@ 0x3f
 8003162:	409a      	lsls	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	f010803f 	.word	0xf010803f

08003184 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_DMA_Start_IT+0x26>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e040      	b.n	800322c <HAL_DMA_Start_IT+0xa8>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d12f      	bne.n	800321e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fa4a 	bl	800366c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031dc:	223f      	movs	r2, #63	@ 0x3f
 80031de:	409a      	lsls	r2, r3
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0216 	orr.w	r2, r2, #22
 80031f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0208 	orr.w	r2, r2, #8
 800320a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e005      	b.n	800322a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003226:	2302      	movs	r3, #2
 8003228:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800322a:	7dfb      	ldrb	r3, [r7, #23]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003240:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003242:	f7fe ff49 	bl	80020d8 <HAL_GetTick>
 8003246:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d008      	beq.n	8003266 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2280      	movs	r2, #128	@ 0x80
 8003258:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e052      	b.n	800330c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0216 	bic.w	r2, r2, #22
 8003274:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003284:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d103      	bne.n	8003296 <HAL_DMA_Abort+0x62>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0208 	bic.w	r2, r2, #8
 80032a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b6:	e013      	b.n	80032e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032b8:	f7fe ff0e 	bl	80020d8 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d90c      	bls.n	80032e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2203      	movs	r2, #3
 80032d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e015      	b.n	800330c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e4      	bne.n	80032b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f2:	223f      	movs	r2, #63	@ 0x3f
 80032f4:	409a      	lsls	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d004      	beq.n	8003332 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2280      	movs	r2, #128	@ 0x80
 800332c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e00c      	b.n	800334c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2205      	movs	r2, #5
 8003336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003364:	4b8e      	ldr	r3, [pc, #568]	@ (80035a0 <HAL_DMA_IRQHandler+0x248>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a8e      	ldr	r2, [pc, #568]	@ (80035a4 <HAL_DMA_IRQHandler+0x24c>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	0a9b      	lsrs	r3, r3, #10
 8003370:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003376:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003382:	2208      	movs	r2, #8
 8003384:	409a      	lsls	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01a      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0204 	bic.w	r2, r2, #4
 80033aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b0:	2208      	movs	r2, #8
 80033b2:	409a      	lsls	r2, r3
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033bc:	f043 0201 	orr.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c8:	2201      	movs	r2, #1
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d012      	beq.n	80033fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e6:	2201      	movs	r2, #1
 80033e8:	409a      	lsls	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f2:	f043 0202 	orr.w	r2, r3, #2
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fe:	2204      	movs	r2, #4
 8003400:	409a      	lsls	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d012      	beq.n	8003430 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341c:	2204      	movs	r2, #4
 800341e:	409a      	lsls	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003434:	2210      	movs	r2, #16
 8003436:	409a      	lsls	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d043      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d03c      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003452:	2210      	movs	r2, #16
 8003454:	409a      	lsls	r2, r3
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d018      	beq.n	800349a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d108      	bne.n	8003488 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d024      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4798      	blx	r3
 8003486:	e01f      	b.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01b      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
 8003498:	e016      	b.n	80034c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0208 	bic.w	r2, r2, #8
 80034b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034cc:	2220      	movs	r2, #32
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 808f 	beq.w	80035f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8087 	beq.w	80035f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ee:	2220      	movs	r2, #32
 80034f0:	409a      	lsls	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b05      	cmp	r3, #5
 8003500:	d136      	bne.n	8003570 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0216 	bic.w	r2, r2, #22
 8003510:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003520:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <HAL_DMA_IRQHandler+0x1da>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0208 	bic.w	r2, r2, #8
 8003540:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003546:	223f      	movs	r2, #63	@ 0x3f
 8003548:	409a      	lsls	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003562:	2b00      	cmp	r3, #0
 8003564:	d07e      	beq.n	8003664 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
        }
        return;
 800356e:	e079      	b.n	8003664 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d01d      	beq.n	80035ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10d      	bne.n	80035a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003590:	2b00      	cmp	r3, #0
 8003592:	d031      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
 800359c:	e02c      	b.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
 800359e:	bf00      	nop
 80035a0:	20000240 	.word	0x20000240
 80035a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d023      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
 80035b8:	e01e      	b.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10f      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0210 	bic.w	r2, r2, #16
 80035d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d032      	beq.n	8003666 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d022      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2205      	movs	r2, #5
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	3301      	adds	r3, #1
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	429a      	cmp	r2, r3
 800362e:	d307      	bcc.n	8003640 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f2      	bne.n	8003624 <HAL_DMA_IRQHandler+0x2cc>
 800363e:	e000      	b.n	8003642 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003640:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	4798      	blx	r3
 8003662:	e000      	b.n	8003666 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003664:	bf00      	nop
    }
  }
}
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003688:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b40      	cmp	r3, #64	@ 0x40
 8003698:	d108      	bne.n	80036ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036aa:	e007      	b.n	80036bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	60da      	str	r2, [r3, #12]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	3b10      	subs	r3, #16
 80036d8:	4a14      	ldr	r2, [pc, #80]	@ (800372c <DMA_CalcBaseAndBitshift+0x64>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036e2:	4a13      	ldr	r2, [pc, #76]	@ (8003730 <DMA_CalcBaseAndBitshift+0x68>)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d909      	bls.n	800370a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	1d1a      	adds	r2, r3, #4
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	659a      	str	r2, [r3, #88]	@ 0x58
 8003708:	e007      	b.n	800371a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	aaaaaaab 	.word	0xaaaaaaab
 8003730:	080062c0 	.word	0x080062c0

08003734 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003744:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d11f      	bne.n	800378e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d856      	bhi.n	8003802 <DMA_CheckFifoParam+0xce>
 8003754:	a201      	add	r2, pc, #4	@ (adr r2, 800375c <DMA_CheckFifoParam+0x28>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	0800376d 	.word	0x0800376d
 8003760:	0800377f 	.word	0x0800377f
 8003764:	0800376d 	.word	0x0800376d
 8003768:	08003803 	.word	0x08003803
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003770:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d046      	beq.n	8003806 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377c:	e043      	b.n	8003806 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003782:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003786:	d140      	bne.n	800380a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378c:	e03d      	b.n	800380a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003796:	d121      	bne.n	80037dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b03      	cmp	r3, #3
 800379c:	d837      	bhi.n	800380e <DMA_CheckFifoParam+0xda>
 800379e:	a201      	add	r2, pc, #4	@ (adr r2, 80037a4 <DMA_CheckFifoParam+0x70>)
 80037a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a4:	080037b5 	.word	0x080037b5
 80037a8:	080037bb 	.word	0x080037bb
 80037ac:	080037b5 	.word	0x080037b5
 80037b0:	080037cd 	.word	0x080037cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      break;
 80037b8:	e030      	b.n	800381c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d025      	beq.n	8003812 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ca:	e022      	b.n	8003812 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037d4:	d11f      	bne.n	8003816 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037da:	e01c      	b.n	8003816 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d903      	bls.n	80037ea <DMA_CheckFifoParam+0xb6>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d003      	beq.n	80037f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037e8:	e018      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
      break;
 80037ee:	e015      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00e      	beq.n	800381a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003800:	e00b      	b.n	800381a <DMA_CheckFifoParam+0xe6>
      break;
 8003802:	bf00      	nop
 8003804:	e00a      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 8003806:	bf00      	nop
 8003808:	e008      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800380a:	bf00      	nop
 800380c:	e006      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800380e:	bf00      	nop
 8003810:	e004      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 8003812:	bf00      	nop
 8003814:	e002      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;   
 8003816:	bf00      	nop
 8003818:	e000      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800381a:	bf00      	nop
    }
  } 
  
  return status; 
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop

0800382c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	@ 0x24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e16b      	b.n	8003b20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003848:	2201      	movs	r2, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	f040 815a 	bne.w	8003b1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d005      	beq.n	800387e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387a:	2b02      	cmp	r3, #2
 800387c:	d130      	bne.n	80038e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b4:	2201      	movs	r2, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 0201 	and.w	r2, r3, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d017      	beq.n	800391c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	2203      	movs	r2, #3
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d123      	bne.n	8003970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	08da      	lsrs	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3208      	adds	r2, #8
 8003930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	220f      	movs	r2, #15
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	08da      	lsrs	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	69b9      	ldr	r1, [r7, #24]
 800396c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0203 	and.w	r2, r3, #3
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80b4 	beq.w	8003b1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	4b60      	ldr	r3, [pc, #384]	@ (8003b38 <HAL_GPIO_Init+0x30c>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003b38 <HAL_GPIO_Init+0x30c>)
 80039bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003b38 <HAL_GPIO_Init+0x30c>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ce:	4a5b      	ldr	r2, [pc, #364]	@ (8003b3c <HAL_GPIO_Init+0x310>)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	3302      	adds	r3, #2
 80039d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	220f      	movs	r2, #15
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a52      	ldr	r2, [pc, #328]	@ (8003b40 <HAL_GPIO_Init+0x314>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d02b      	beq.n	8003a52 <HAL_GPIO_Init+0x226>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a51      	ldr	r2, [pc, #324]	@ (8003b44 <HAL_GPIO_Init+0x318>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d025      	beq.n	8003a4e <HAL_GPIO_Init+0x222>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a50      	ldr	r2, [pc, #320]	@ (8003b48 <HAL_GPIO_Init+0x31c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d01f      	beq.n	8003a4a <HAL_GPIO_Init+0x21e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a4f      	ldr	r2, [pc, #316]	@ (8003b4c <HAL_GPIO_Init+0x320>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d019      	beq.n	8003a46 <HAL_GPIO_Init+0x21a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a4e      	ldr	r2, [pc, #312]	@ (8003b50 <HAL_GPIO_Init+0x324>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <HAL_GPIO_Init+0x216>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a4d      	ldr	r2, [pc, #308]	@ (8003b54 <HAL_GPIO_Init+0x328>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00d      	beq.n	8003a3e <HAL_GPIO_Init+0x212>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a4c      	ldr	r2, [pc, #304]	@ (8003b58 <HAL_GPIO_Init+0x32c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d007      	beq.n	8003a3a <HAL_GPIO_Init+0x20e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a4b      	ldr	r2, [pc, #300]	@ (8003b5c <HAL_GPIO_Init+0x330>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d101      	bne.n	8003a36 <HAL_GPIO_Init+0x20a>
 8003a32:	2307      	movs	r3, #7
 8003a34:	e00e      	b.n	8003a54 <HAL_GPIO_Init+0x228>
 8003a36:	2308      	movs	r3, #8
 8003a38:	e00c      	b.n	8003a54 <HAL_GPIO_Init+0x228>
 8003a3a:	2306      	movs	r3, #6
 8003a3c:	e00a      	b.n	8003a54 <HAL_GPIO_Init+0x228>
 8003a3e:	2305      	movs	r3, #5
 8003a40:	e008      	b.n	8003a54 <HAL_GPIO_Init+0x228>
 8003a42:	2304      	movs	r3, #4
 8003a44:	e006      	b.n	8003a54 <HAL_GPIO_Init+0x228>
 8003a46:	2303      	movs	r3, #3
 8003a48:	e004      	b.n	8003a54 <HAL_GPIO_Init+0x228>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e002      	b.n	8003a54 <HAL_GPIO_Init+0x228>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <HAL_GPIO_Init+0x228>
 8003a52:	2300      	movs	r3, #0
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	f002 0203 	and.w	r2, r2, #3
 8003a5a:	0092      	lsls	r2, r2, #2
 8003a5c:	4093      	lsls	r3, r2
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a64:	4935      	ldr	r1, [pc, #212]	@ (8003b3c <HAL_GPIO_Init+0x310>)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a72:	4b3b      	ldr	r3, [pc, #236]	@ (8003b60 <HAL_GPIO_Init+0x334>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a96:	4a32      	ldr	r2, [pc, #200]	@ (8003b60 <HAL_GPIO_Init+0x334>)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a9c:	4b30      	ldr	r3, [pc, #192]	@ (8003b60 <HAL_GPIO_Init+0x334>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ac0:	4a27      	ldr	r2, [pc, #156]	@ (8003b60 <HAL_GPIO_Init+0x334>)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ac6:	4b26      	ldr	r3, [pc, #152]	@ (8003b60 <HAL_GPIO_Init+0x334>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aea:	4a1d      	ldr	r2, [pc, #116]	@ (8003b60 <HAL_GPIO_Init+0x334>)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003af0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b60 <HAL_GPIO_Init+0x334>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b14:	4a12      	ldr	r2, [pc, #72]	@ (8003b60 <HAL_GPIO_Init+0x334>)
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b0f      	cmp	r3, #15
 8003b24:	f67f ae90 	bls.w	8003848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	3724      	adds	r7, #36	@ 0x24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	40013800 	.word	0x40013800
 8003b40:	40020000 	.word	0x40020000
 8003b44:	40020400 	.word	0x40020400
 8003b48:	40020800 	.word	0x40020800
 8003b4c:	40020c00 	.word	0x40020c00
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40021400 	.word	0x40021400
 8003b58:	40021800 	.word	0x40021800
 8003b5c:	40021c00 	.word	0x40021c00
 8003b60:	40013c00 	.word	0x40013c00

08003b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]
 8003b70:	4613      	mov	r3, r2
 8003b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b74:	787b      	ldrb	r3, [r7, #1]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b80:	e003      	b.n	8003b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b82:	887b      	ldrh	r3, [r7, #2]
 8003b84:	041a      	lsls	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	619a      	str	r2, [r3, #24]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b085      	sub	sp, #20
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ba8:	887a      	ldrh	r2, [r7, #2]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4013      	ands	r3, r2
 8003bae:	041a      	lsls	r2, r3, #16
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	43d9      	mvns	r1, r3
 8003bb4:	887b      	ldrh	r3, [r7, #2]
 8003bb6:	400b      	ands	r3, r1
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	619a      	str	r2, [r3, #24]
}
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e267      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d075      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bea:	4b88      	ldr	r3, [pc, #544]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d00c      	beq.n	8003c10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bf6:	4b85      	ldr	r3, [pc, #532]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d112      	bne.n	8003c28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c02:	4b82      	ldr	r3, [pc, #520]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c0e:	d10b      	bne.n	8003c28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c10:	4b7e      	ldr	r3, [pc, #504]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d05b      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x108>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d157      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e242      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c30:	d106      	bne.n	8003c40 <HAL_RCC_OscConfig+0x74>
 8003c32:	4b76      	ldr	r3, [pc, #472]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a75      	ldr	r2, [pc, #468]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e01d      	b.n	8003c7c <HAL_RCC_OscConfig+0xb0>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x98>
 8003c4a:	4b70      	ldr	r3, [pc, #448]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a6f      	ldr	r2, [pc, #444]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	4b6d      	ldr	r3, [pc, #436]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a6c      	ldr	r2, [pc, #432]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	e00b      	b.n	8003c7c <HAL_RCC_OscConfig+0xb0>
 8003c64:	4b69      	ldr	r3, [pc, #420]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a68      	ldr	r2, [pc, #416]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	4b66      	ldr	r3, [pc, #408]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a65      	ldr	r2, [pc, #404]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003c76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d013      	beq.n	8003cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7fe fa28 	bl	80020d8 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c8c:	f7fe fa24 	bl	80020d8 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b64      	cmp	r3, #100	@ 0x64
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e207      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9e:	4b5b      	ldr	r3, [pc, #364]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0xc0>
 8003caa:	e014      	b.n	8003cd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe fa14 	bl	80020d8 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fe fa10 	bl	80020d8 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	@ 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e1f3      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc6:	4b51      	ldr	r3, [pc, #324]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0xe8>
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d063      	beq.n	8003daa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00b      	beq.n	8003d06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cee:	4b47      	ldr	r3, [pc, #284]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d11c      	bne.n	8003d34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfa:	4b44      	ldr	r3, [pc, #272]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d116      	bne.n	8003d34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d06:	4b41      	ldr	r3, [pc, #260]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d005      	beq.n	8003d1e <HAL_RCC_OscConfig+0x152>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d001      	beq.n	8003d1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e1c7      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4937      	ldr	r1, [pc, #220]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d32:	e03a      	b.n	8003daa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d020      	beq.n	8003d7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d3c:	4b34      	ldr	r3, [pc, #208]	@ (8003e10 <HAL_RCC_OscConfig+0x244>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d42:	f7fe f9c9 	bl	80020d8 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d4a:	f7fe f9c5 	bl	80020d8 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e1a8      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0f0      	beq.n	8003d4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d68:	4b28      	ldr	r3, [pc, #160]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4925      	ldr	r1, [pc, #148]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	600b      	str	r3, [r1, #0]
 8003d7c:	e015      	b.n	8003daa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d7e:	4b24      	ldr	r3, [pc, #144]	@ (8003e10 <HAL_RCC_OscConfig+0x244>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fe f9a8 	bl	80020d8 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d8c:	f7fe f9a4 	bl	80020d8 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e187      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d036      	beq.n	8003e24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d016      	beq.n	8003dec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dbe:	4b15      	ldr	r3, [pc, #84]	@ (8003e14 <HAL_RCC_OscConfig+0x248>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7fe f988 	bl	80020d8 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dcc:	f7fe f984 	bl	80020d8 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e167      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dde:	4b0b      	ldr	r3, [pc, #44]	@ (8003e0c <HAL_RCC_OscConfig+0x240>)
 8003de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0x200>
 8003dea:	e01b      	b.n	8003e24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dec:	4b09      	ldr	r3, [pc, #36]	@ (8003e14 <HAL_RCC_OscConfig+0x248>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df2:	f7fe f971 	bl	80020d8 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df8:	e00e      	b.n	8003e18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfa:	f7fe f96d 	bl	80020d8 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d907      	bls.n	8003e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e150      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	42470000 	.word	0x42470000
 8003e14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e18:	4b88      	ldr	r3, [pc, #544]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1ea      	bne.n	8003dfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8097 	beq.w	8003f60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e32:	2300      	movs	r3, #0
 8003e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e36:	4b81      	ldr	r3, [pc, #516]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10f      	bne.n	8003e62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	4b7d      	ldr	r3, [pc, #500]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	4a7c      	ldr	r2, [pc, #496]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e52:	4b7a      	ldr	r3, [pc, #488]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e62:	4b77      	ldr	r3, [pc, #476]	@ (8004040 <HAL_RCC_OscConfig+0x474>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d118      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e6e:	4b74      	ldr	r3, [pc, #464]	@ (8004040 <HAL_RCC_OscConfig+0x474>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a73      	ldr	r2, [pc, #460]	@ (8004040 <HAL_RCC_OscConfig+0x474>)
 8003e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e7a:	f7fe f92d 	bl	80020d8 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e82:	f7fe f929 	bl	80020d8 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e10c      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e94:	4b6a      	ldr	r3, [pc, #424]	@ (8004040 <HAL_RCC_OscConfig+0x474>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d106      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x2ea>
 8003ea8:	4b64      	ldr	r3, [pc, #400]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eac:	4a63      	ldr	r2, [pc, #396]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb4:	e01c      	b.n	8003ef0 <HAL_RCC_OscConfig+0x324>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b05      	cmp	r3, #5
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x30c>
 8003ebe:	4b5f      	ldr	r3, [pc, #380]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec2:	4a5e      	ldr	r2, [pc, #376]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003ec4:	f043 0304 	orr.w	r3, r3, #4
 8003ec8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eca:	4b5c      	ldr	r3, [pc, #368]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ece:	4a5b      	ldr	r2, [pc, #364]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ed6:	e00b      	b.n	8003ef0 <HAL_RCC_OscConfig+0x324>
 8003ed8:	4b58      	ldr	r3, [pc, #352]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003edc:	4a57      	ldr	r2, [pc, #348]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003ede:	f023 0301 	bic.w	r3, r3, #1
 8003ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ee4:	4b55      	ldr	r3, [pc, #340]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee8:	4a54      	ldr	r2, [pc, #336]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003eea:	f023 0304 	bic.w	r3, r3, #4
 8003eee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d015      	beq.n	8003f24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef8:	f7fe f8ee 	bl	80020d8 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efe:	e00a      	b.n	8003f16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f00:	f7fe f8ea 	bl	80020d8 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e0cb      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f16:	4b49      	ldr	r3, [pc, #292]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0ee      	beq.n	8003f00 <HAL_RCC_OscConfig+0x334>
 8003f22:	e014      	b.n	8003f4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f24:	f7fe f8d8 	bl	80020d8 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2a:	e00a      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2c:	f7fe f8d4 	bl	80020d8 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e0b5      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f42:	4b3e      	ldr	r3, [pc, #248]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1ee      	bne.n	8003f2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f4e:	7dfb      	ldrb	r3, [r7, #23]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d105      	bne.n	8003f60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f54:	4b39      	ldr	r3, [pc, #228]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f58:	4a38      	ldr	r2, [pc, #224]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003f5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80a1 	beq.w	80040ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f6a:	4b34      	ldr	r3, [pc, #208]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d05c      	beq.n	8004030 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d141      	bne.n	8004002 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7e:	4b31      	ldr	r3, [pc, #196]	@ (8004044 <HAL_RCC_OscConfig+0x478>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f84:	f7fe f8a8 	bl	80020d8 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8c:	f7fe f8a4 	bl	80020d8 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e087      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9e:	4b27      	ldr	r3, [pc, #156]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	019b      	lsls	r3, r3, #6
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	041b      	lsls	r3, r3, #16
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fcc:	061b      	lsls	r3, r3, #24
 8003fce:	491b      	ldr	r1, [pc, #108]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8004044 <HAL_RCC_OscConfig+0x478>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fda:	f7fe f87d 	bl	80020d8 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe2:	f7fe f879 	bl	80020d8 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e05c      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff4:	4b11      	ldr	r3, [pc, #68]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0f0      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x416>
 8004000:	e054      	b.n	80040ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004002:	4b10      	ldr	r3, [pc, #64]	@ (8004044 <HAL_RCC_OscConfig+0x478>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fe f866 	bl	80020d8 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004010:	f7fe f862 	bl	80020d8 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e045      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004022:	4b06      	ldr	r3, [pc, #24]	@ (800403c <HAL_RCC_OscConfig+0x470>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x444>
 800402e:	e03d      	b.n	80040ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d107      	bne.n	8004048 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e038      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
 800403c:	40023800 	.word	0x40023800
 8004040:	40007000 	.word	0x40007000
 8004044:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004048:	4b1b      	ldr	r3, [pc, #108]	@ (80040b8 <HAL_RCC_OscConfig+0x4ec>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d028      	beq.n	80040a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d121      	bne.n	80040a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d11a      	bne.n	80040a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004078:	4013      	ands	r3, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800407e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004080:	4293      	cmp	r3, r2
 8004082:	d111      	bne.n	80040a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	3b01      	subs	r3, #1
 8004092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d107      	bne.n	80040a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e000      	b.n	80040ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40023800 	.word	0x40023800

080040bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0cc      	b.n	800426a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040d0:	4b68      	ldr	r3, [pc, #416]	@ (8004274 <HAL_RCC_ClockConfig+0x1b8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d90c      	bls.n	80040f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040de:	4b65      	ldr	r3, [pc, #404]	@ (8004274 <HAL_RCC_ClockConfig+0x1b8>)
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e6:	4b63      	ldr	r3, [pc, #396]	@ (8004274 <HAL_RCC_ClockConfig+0x1b8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0b8      	b.n	800426a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d020      	beq.n	8004146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004110:	4b59      	ldr	r3, [pc, #356]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	4a58      	ldr	r2, [pc, #352]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800411a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004128:	4b53      	ldr	r3, [pc, #332]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	4a52      	ldr	r2, [pc, #328]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004134:	4b50      	ldr	r3, [pc, #320]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	494d      	ldr	r1, [pc, #308]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	4313      	orrs	r3, r2
 8004144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d044      	beq.n	80041dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d107      	bne.n	800416a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415a:	4b47      	ldr	r3, [pc, #284]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d119      	bne.n	800419a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e07f      	b.n	800426a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d003      	beq.n	800417a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004176:	2b03      	cmp	r3, #3
 8004178:	d107      	bne.n	800418a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417a:	4b3f      	ldr	r3, [pc, #252]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e06f      	b.n	800426a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418a:	4b3b      	ldr	r3, [pc, #236]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e067      	b.n	800426a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419a:	4b37      	ldr	r3, [pc, #220]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f023 0203 	bic.w	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4934      	ldr	r1, [pc, #208]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041ac:	f7fd ff94 	bl	80020d8 <HAL_GetTick>
 80041b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	e00a      	b.n	80041ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b4:	f7fd ff90 	bl	80020d8 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e04f      	b.n	800426a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 020c 	and.w	r2, r3, #12
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	429a      	cmp	r2, r3
 80041da:	d1eb      	bne.n	80041b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041dc:	4b25      	ldr	r3, [pc, #148]	@ (8004274 <HAL_RCC_ClockConfig+0x1b8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d20c      	bcs.n	8004204 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ea:	4b22      	ldr	r3, [pc, #136]	@ (8004274 <HAL_RCC_ClockConfig+0x1b8>)
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f2:	4b20      	ldr	r3, [pc, #128]	@ (8004274 <HAL_RCC_ClockConfig+0x1b8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d001      	beq.n	8004204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e032      	b.n	800426a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004210:	4b19      	ldr	r3, [pc, #100]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4916      	ldr	r1, [pc, #88]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	4313      	orrs	r3, r2
 8004220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800422e:	4b12      	ldr	r3, [pc, #72]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	490e      	ldr	r1, [pc, #56]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	4313      	orrs	r3, r2
 8004240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004242:	f000 f821 	bl	8004288 <HAL_RCC_GetSysClockFreq>
 8004246:	4602      	mov	r2, r0
 8004248:	4b0b      	ldr	r3, [pc, #44]	@ (8004278 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	490a      	ldr	r1, [pc, #40]	@ (800427c <HAL_RCC_ClockConfig+0x1c0>)
 8004254:	5ccb      	ldrb	r3, [r1, r3]
 8004256:	fa22 f303 	lsr.w	r3, r2, r3
 800425a:	4a09      	ldr	r2, [pc, #36]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 800425c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800425e:	4b09      	ldr	r3, [pc, #36]	@ (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd fef4 	bl	8002050 <HAL_InitTick>

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40023c00 	.word	0x40023c00
 8004278:	40023800 	.word	0x40023800
 800427c:	080062a8 	.word	0x080062a8
 8004280:	20000240 	.word	0x20000240
 8004284:	20000244 	.word	0x20000244

08004288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800428c:	b090      	sub	sp, #64	@ 0x40
 800428e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042a0:	4b59      	ldr	r3, [pc, #356]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x180>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 030c 	and.w	r3, r3, #12
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d00d      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0x40>
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	f200 80a1 	bhi.w	80043f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_RCC_GetSysClockFreq+0x34>
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d003      	beq.n	80042c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ba:	e09b      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042bc:	4b53      	ldr	r3, [pc, #332]	@ (800440c <HAL_RCC_GetSysClockFreq+0x184>)
 80042be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042c0:	e09b      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042c2:	4b53      	ldr	r3, [pc, #332]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x188>)
 80042c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042c6:	e098      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042c8:	4b4f      	ldr	r3, [pc, #316]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042d2:	4b4d      	ldr	r3, [pc, #308]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x180>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d028      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042de:	4b4a      	ldr	r3, [pc, #296]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x180>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	099b      	lsrs	r3, r3, #6
 80042e4:	2200      	movs	r2, #0
 80042e6:	623b      	str	r3, [r7, #32]
 80042e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042f0:	2100      	movs	r1, #0
 80042f2:	4b47      	ldr	r3, [pc, #284]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x188>)
 80042f4:	fb03 f201 	mul.w	r2, r3, r1
 80042f8:	2300      	movs	r3, #0
 80042fa:	fb00 f303 	mul.w	r3, r0, r3
 80042fe:	4413      	add	r3, r2
 8004300:	4a43      	ldr	r2, [pc, #268]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x188>)
 8004302:	fba0 1202 	umull	r1, r2, r0, r2
 8004306:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004308:	460a      	mov	r2, r1
 800430a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800430c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800430e:	4413      	add	r3, r2
 8004310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004314:	2200      	movs	r2, #0
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	61fa      	str	r2, [r7, #28]
 800431a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800431e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004322:	f7fb ff51 	bl	80001c8 <__aeabi_uldivmod>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4613      	mov	r3, r2
 800432c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800432e:	e053      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004330:	4b35      	ldr	r3, [pc, #212]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x180>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	099b      	lsrs	r3, r3, #6
 8004336:	2200      	movs	r2, #0
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	617a      	str	r2, [r7, #20]
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004342:	f04f 0b00 	mov.w	fp, #0
 8004346:	4652      	mov	r2, sl
 8004348:	465b      	mov	r3, fp
 800434a:	f04f 0000 	mov.w	r0, #0
 800434e:	f04f 0100 	mov.w	r1, #0
 8004352:	0159      	lsls	r1, r3, #5
 8004354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004358:	0150      	lsls	r0, r2, #5
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	ebb2 080a 	subs.w	r8, r2, sl
 8004362:	eb63 090b 	sbc.w	r9, r3, fp
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004372:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004376:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800437a:	ebb2 0408 	subs.w	r4, r2, r8
 800437e:	eb63 0509 	sbc.w	r5, r3, r9
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	00eb      	lsls	r3, r5, #3
 800438c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004390:	00e2      	lsls	r2, r4, #3
 8004392:	4614      	mov	r4, r2
 8004394:	461d      	mov	r5, r3
 8004396:	eb14 030a 	adds.w	r3, r4, sl
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	eb45 030b 	adc.w	r3, r5, fp
 80043a0:	607b      	str	r3, [r7, #4]
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043ae:	4629      	mov	r1, r5
 80043b0:	028b      	lsls	r3, r1, #10
 80043b2:	4621      	mov	r1, r4
 80043b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043b8:	4621      	mov	r1, r4
 80043ba:	028a      	lsls	r2, r1, #10
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c2:	2200      	movs	r2, #0
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	60fa      	str	r2, [r7, #12]
 80043c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043cc:	f7fb fefc 	bl	80001c8 <__aeabi_uldivmod>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4613      	mov	r3, r2
 80043d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x180>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	0c1b      	lsrs	r3, r3, #16
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	3301      	adds	r3, #1
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80043e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043f2:	e002      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043f4:	4b05      	ldr	r3, [pc, #20]	@ (800440c <HAL_RCC_GetSysClockFreq+0x184>)
 80043f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3740      	adds	r7, #64	@ 0x40
 8004400:	46bd      	mov	sp, r7
 8004402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800
 800440c:	00f42400 	.word	0x00f42400
 8004410:	00b71b00 	.word	0x00b71b00

08004414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004418:	4b03      	ldr	r3, [pc, #12]	@ (8004428 <HAL_RCC_GetHCLKFreq+0x14>)
 800441a:	681b      	ldr	r3, [r3, #0]
}
 800441c:	4618      	mov	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000240 	.word	0x20000240

0800442c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004430:	f7ff fff0 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b05      	ldr	r3, [pc, #20]	@ (800444c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	0a9b      	lsrs	r3, r3, #10
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	4903      	ldr	r1, [pc, #12]	@ (8004450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004448:	4618      	mov	r0, r3
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40023800 	.word	0x40023800
 8004450:	080062b8 	.word	0x080062b8

08004454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004458:	f7ff ffdc 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 800445c:	4602      	mov	r2, r0
 800445e:	4b05      	ldr	r3, [pc, #20]	@ (8004474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	0b5b      	lsrs	r3, r3, #13
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	4903      	ldr	r1, [pc, #12]	@ (8004478 <HAL_RCC_GetPCLK2Freq+0x24>)
 800446a:	5ccb      	ldrb	r3, [r1, r3]
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004470:	4618      	mov	r0, r3
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40023800 	.word	0x40023800
 8004478:	080062b8 	.word	0x080062b8

0800447c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e041      	b.n	8004512 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fd fc82 	bl	8001dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3304      	adds	r3, #4
 80044b8:	4619      	mov	r1, r3
 80044ba:	4610      	mov	r0, r2
 80044bc:	f000 f9b6 	bl	800482c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d001      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e04e      	b.n	80045d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a23      	ldr	r2, [pc, #140]	@ (80045e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d022      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800455e:	d01d      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1f      	ldr	r2, [pc, #124]	@ (80045e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d018      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1e      	ldr	r2, [pc, #120]	@ (80045e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d013      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1c      	ldr	r2, [pc, #112]	@ (80045ec <HAL_TIM_Base_Start_IT+0xd0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00e      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1b      	ldr	r2, [pc, #108]	@ (80045f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d009      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a19      	ldr	r2, [pc, #100]	@ (80045f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d004      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a18      	ldr	r2, [pc, #96]	@ (80045f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d111      	bne.n	80045c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b06      	cmp	r3, #6
 80045ac:	d010      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0201 	orr.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045be:	e007      	b.n	80045d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800
 80045ec:	40000c00 	.word	0x40000c00
 80045f0:	40010400 	.word	0x40010400
 80045f4:	40014000 	.word	0x40014000
 80045f8:	40001800 	.word	0x40001800

080045fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d020      	beq.n	8004660 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01b      	beq.n	8004660 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0202 	mvn.w	r2, #2
 8004630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f8d2 	bl	80047f0 <HAL_TIM_IC_CaptureCallback>
 800464c:	e005      	b.n	800465a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f8c4 	bl	80047dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f8d5 	bl	8004804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d020      	beq.n	80046ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01b      	beq.n	80046ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0204 	mvn.w	r2, #4
 800467c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2202      	movs	r2, #2
 8004682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f8ac 	bl	80047f0 <HAL_TIM_IC_CaptureCallback>
 8004698:	e005      	b.n	80046a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f89e 	bl	80047dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f8af 	bl	8004804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d020      	beq.n	80046f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01b      	beq.n	80046f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0208 	mvn.w	r2, #8
 80046c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2204      	movs	r2, #4
 80046ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f886 	bl	80047f0 <HAL_TIM_IC_CaptureCallback>
 80046e4:	e005      	b.n	80046f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f878 	bl	80047dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f889 	bl	8004804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d020      	beq.n	8004744 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01b      	beq.n	8004744 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0210 	mvn.w	r2, #16
 8004714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2208      	movs	r2, #8
 800471a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f860 	bl	80047f0 <HAL_TIM_IC_CaptureCallback>
 8004730:	e005      	b.n	800473e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f852 	bl	80047dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f863 	bl	8004804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00c      	beq.n	8004768 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0201 	mvn.w	r2, #1
 8004760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fd f952 	bl	8001a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00c      	beq.n	800478c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f97c 	bl	8004a84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00c      	beq.n	80047b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f834 	bl	8004818 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00c      	beq.n	80047d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d007      	beq.n	80047d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0220 	mvn.w	r2, #32
 80047cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f94e 	bl	8004a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a43      	ldr	r2, [pc, #268]	@ (800494c <TIM_Base_SetConfig+0x120>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d013      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800484a:	d00f      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a40      	ldr	r2, [pc, #256]	@ (8004950 <TIM_Base_SetConfig+0x124>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00b      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a3f      	ldr	r2, [pc, #252]	@ (8004954 <TIM_Base_SetConfig+0x128>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d007      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a3e      	ldr	r2, [pc, #248]	@ (8004958 <TIM_Base_SetConfig+0x12c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a3d      	ldr	r2, [pc, #244]	@ (800495c <TIM_Base_SetConfig+0x130>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d108      	bne.n	800487e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a32      	ldr	r2, [pc, #200]	@ (800494c <TIM_Base_SetConfig+0x120>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d02b      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800488c:	d027      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a2f      	ldr	r2, [pc, #188]	@ (8004950 <TIM_Base_SetConfig+0x124>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d023      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a2e      	ldr	r2, [pc, #184]	@ (8004954 <TIM_Base_SetConfig+0x128>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01f      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004958 <TIM_Base_SetConfig+0x12c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d01b      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2c      	ldr	r2, [pc, #176]	@ (800495c <TIM_Base_SetConfig+0x130>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d017      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004960 <TIM_Base_SetConfig+0x134>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004964 <TIM_Base_SetConfig+0x138>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00f      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a29      	ldr	r2, [pc, #164]	@ (8004968 <TIM_Base_SetConfig+0x13c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00b      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a28      	ldr	r2, [pc, #160]	@ (800496c <TIM_Base_SetConfig+0x140>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a27      	ldr	r2, [pc, #156]	@ (8004970 <TIM_Base_SetConfig+0x144>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d003      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a26      	ldr	r2, [pc, #152]	@ (8004974 <TIM_Base_SetConfig+0x148>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d108      	bne.n	80048f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a0e      	ldr	r2, [pc, #56]	@ (800494c <TIM_Base_SetConfig+0x120>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d003      	beq.n	800491e <TIM_Base_SetConfig+0xf2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a10      	ldr	r2, [pc, #64]	@ (800495c <TIM_Base_SetConfig+0x130>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d103      	bne.n	8004926 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f043 0204 	orr.w	r2, r3, #4
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	601a      	str	r2, [r3, #0]
}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40010000 	.word	0x40010000
 8004950:	40000400 	.word	0x40000400
 8004954:	40000800 	.word	0x40000800
 8004958:	40000c00 	.word	0x40000c00
 800495c:	40010400 	.word	0x40010400
 8004960:	40014000 	.word	0x40014000
 8004964:	40014400 	.word	0x40014400
 8004968:	40014800 	.word	0x40014800
 800496c:	40001800 	.word	0x40001800
 8004970:	40001c00 	.word	0x40001c00
 8004974:	40002000 	.word	0x40002000

08004978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800498c:	2302      	movs	r3, #2
 800498e:	e05a      	b.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a21      	ldr	r2, [pc, #132]	@ (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d022      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049dc:	d01d      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d018      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1b      	ldr	r2, [pc, #108]	@ (8004a5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d013      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004a60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d00e      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a18      	ldr	r2, [pc, #96]	@ (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d009      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a17      	ldr	r2, [pc, #92]	@ (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d004      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a15      	ldr	r2, [pc, #84]	@ (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d10c      	bne.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40010000 	.word	0x40010000
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	40000800 	.word	0x40000800
 8004a60:	40000c00 	.word	0x40000c00
 8004a64:	40010400 	.word	0x40010400
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40001800 	.word	0x40001800

08004a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e042      	b.n	8004b30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fd f9c6 	bl	8001e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2224      	movs	r2, #36	@ 0x24
 8004ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 ffa1 	bl	8005a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08a      	sub	sp, #40	@ 0x28
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	4613      	mov	r3, r2
 8004b46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d175      	bne.n	8004c44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_UART_Transmit+0x2c>
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e06e      	b.n	8004c46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2221      	movs	r2, #33	@ 0x21
 8004b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b76:	f7fd faaf 	bl	80020d8 <HAL_GetTick>
 8004b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	88fa      	ldrh	r2, [r7, #6]
 8004b80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	88fa      	ldrh	r2, [r7, #6]
 8004b86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b90:	d108      	bne.n	8004ba4 <HAL_UART_Transmit+0x6c>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d104      	bne.n	8004ba4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	e003      	b.n	8004bac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bac:	e02e      	b.n	8004c0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2180      	movs	r1, #128	@ 0x80
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 fc71 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e03a      	b.n	8004c46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10b      	bne.n	8004bee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	3302      	adds	r3, #2
 8004bea:	61bb      	str	r3, [r7, #24]
 8004bec:	e007      	b.n	8004bfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	781a      	ldrb	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1cb      	bne.n	8004bae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2140      	movs	r1, #64	@ 0x40
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 fc3d 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e006      	b.n	8004c46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	e000      	b.n	8004c46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c44:	2302      	movs	r3, #2
  }
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b08c      	sub	sp, #48	@ 0x30
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d146      	bne.n	8004cf6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e03f      	b.n	8004cf8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	461a      	mov	r2, r3
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 fc62 	bl	8005554 <UART_Start_Receive_DMA>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d125      	bne.n	8004cea <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	617b      	str	r3, [r7, #20]
   return(result);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f043 0310 	orr.w	r3, r3, #16
 8004cca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	6a39      	ldr	r1, [r7, #32]
 8004cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e5      	bne.n	8004cb4 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8004ce8:	e002      	b.n	8004cf0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8004cf0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004cf4:	e000      	b.n	8004cf8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8004cf6:	2302      	movs	r3, #2
  }
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3730      	adds	r7, #48	@ 0x30
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b0ba      	sub	sp, #232	@ 0xe8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10f      	bne.n	8004d66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d009      	beq.n	8004d66 <HAL_UART_IRQHandler+0x66>
 8004d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fda2 	bl	80058a8 <UART_Receive_IT>
      return;
 8004d64:	e273      	b.n	800524e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 80de 	beq.w	8004f2c <HAL_UART_IRQHandler+0x22c>
 8004d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80d1 	beq.w	8004f2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00b      	beq.n	8004dae <HAL_UART_IRQHandler+0xae>
 8004d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da6:	f043 0201 	orr.w	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004db2:	f003 0304 	and.w	r3, r3, #4
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00b      	beq.n	8004dd2 <HAL_UART_IRQHandler+0xd2>
 8004dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d005      	beq.n	8004dd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dca:	f043 0202 	orr.w	r2, r3, #2
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00b      	beq.n	8004df6 <HAL_UART_IRQHandler+0xf6>
 8004dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dee:	f043 0204 	orr.w	r2, r3, #4
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d011      	beq.n	8004e26 <HAL_UART_IRQHandler+0x126>
 8004e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d105      	bne.n	8004e1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1e:	f043 0208 	orr.w	r2, r3, #8
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 820a 	beq.w	8005244 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d008      	beq.n	8004e4e <HAL_UART_IRQHandler+0x14e>
 8004e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fd2d 	bl	80058a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e58:	2b40      	cmp	r3, #64	@ 0x40
 8004e5a:	bf0c      	ite	eq
 8004e5c:	2301      	moveq	r3, #1
 8004e5e:	2300      	movne	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d103      	bne.n	8004e7a <HAL_UART_IRQHandler+0x17a>
 8004e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d04f      	beq.n	8004f1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fc38 	bl	80056f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e8a:	2b40      	cmp	r3, #64	@ 0x40
 8004e8c:	d141      	bne.n	8004f12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3314      	adds	r3, #20
 8004e94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ea8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3314      	adds	r3, #20
 8004eb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004eba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ec6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1d9      	bne.n	8004e8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d013      	beq.n	8004f0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee6:	4a8a      	ldr	r2, [pc, #552]	@ (8005110 <HAL_UART_IRQHandler+0x410>)
 8004ee8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fe fa10 	bl	8003314 <HAL_DMA_Abort_IT>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d016      	beq.n	8004f28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f04:	4610      	mov	r0, r2
 8004f06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f08:	e00e      	b.n	8004f28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f9c0 	bl	8005290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f10:	e00a      	b.n	8004f28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f9bc 	bl	8005290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f18:	e006      	b.n	8004f28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f9b8 	bl	8005290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f26:	e18d      	b.n	8005244 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f28:	bf00      	nop
    return;
 8004f2a:	e18b      	b.n	8005244 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	f040 8167 	bne.w	8005204 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3a:	f003 0310 	and.w	r3, r3, #16
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 8160 	beq.w	8005204 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 8159 	beq.w	8005204 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f52:	2300      	movs	r3, #0
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	60bb      	str	r3, [r7, #8]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	60bb      	str	r3, [r7, #8]
 8004f66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f72:	2b40      	cmp	r3, #64	@ 0x40
 8004f74:	f040 80ce 	bne.w	8005114 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80a9 	beq.w	80050e0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f96:	429a      	cmp	r2, r3
 8004f98:	f080 80a2 	bcs.w	80050e0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fa2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fae:	f000 8088 	beq.w	80050c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004fc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	330c      	adds	r3, #12
 8004fda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004fde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fe2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004fea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1d9      	bne.n	8004fb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3314      	adds	r3, #20
 8005004:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005006:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005008:	e853 3f00 	ldrex	r3, [r3]
 800500c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800500e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005010:	f023 0301 	bic.w	r3, r3, #1
 8005014:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3314      	adds	r3, #20
 800501e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005022:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005026:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800502a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005034:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e1      	bne.n	8004ffe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3314      	adds	r3, #20
 8005040:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800504a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800504c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005050:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3314      	adds	r3, #20
 800505a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800505e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005060:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005062:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005064:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005066:	e841 2300 	strex	r3, r2, [r1]
 800506a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800506c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e3      	bne.n	800503a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	330c      	adds	r3, #12
 8005086:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800508a:	e853 3f00 	ldrex	r3, [r3]
 800508e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005090:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005092:	f023 0310 	bic.w	r3, r3, #16
 8005096:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	330c      	adds	r3, #12
 80050a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80050a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80050a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e3      	bne.n	8005080 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fe f8b9 	bl	8003234 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7fb ffc1 	bl	8001060 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80050de:	e0b3      	b.n	8005248 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050e8:	429a      	cmp	r2, r3
 80050ea:	f040 80ad 	bne.w	8005248 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050f8:	f040 80a6 	bne.w	8005248 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005106:	4619      	mov	r1, r3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7fb ffa9 	bl	8001060 <HAL_UARTEx_RxEventCallback>
      return;
 800510e:	e09b      	b.n	8005248 <HAL_UART_IRQHandler+0x548>
 8005110:	080057b7 	.word	0x080057b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800511c:	b29b      	uxth	r3, r3
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 808e 	beq.w	800524c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8089 	beq.w	800524c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	330c      	adds	r3, #12
 8005140:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800514a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800514c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005150:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	330c      	adds	r3, #12
 800515a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800515e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005160:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005164:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800516c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e3      	bne.n	800513a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3314      	adds	r3, #20
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	e853 3f00 	ldrex	r3, [r3]
 8005180:	623b      	str	r3, [r7, #32]
   return(result);
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	f023 0301 	bic.w	r3, r3, #1
 8005188:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3314      	adds	r3, #20
 8005192:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005196:	633a      	str	r2, [r7, #48]	@ 0x30
 8005198:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800519c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e3      	bne.n	8005172 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	330c      	adds	r3, #12
 80051be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0310 	bic.w	r3, r3, #16
 80051ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	330c      	adds	r3, #12
 80051d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80051dc:	61fa      	str	r2, [r7, #28]
 80051de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	69b9      	ldr	r1, [r7, #24]
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	617b      	str	r3, [r7, #20]
   return(result);
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e3      	bne.n	80051b8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051fa:	4619      	mov	r1, r3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7fb ff2f 	bl	8001060 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005202:	e023      	b.n	800524c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800520c:	2b00      	cmp	r3, #0
 800520e:	d009      	beq.n	8005224 <HAL_UART_IRQHandler+0x524>
 8005210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fadb 	bl	80057d8 <UART_Transmit_IT>
    return;
 8005222:	e014      	b.n	800524e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00e      	beq.n	800524e <HAL_UART_IRQHandler+0x54e>
 8005230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005238:	2b00      	cmp	r3, #0
 800523a:	d008      	beq.n	800524e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fb1b 	bl	8005878 <UART_EndTransmit_IT>
    return;
 8005242:	e004      	b.n	800524e <HAL_UART_IRQHandler+0x54e>
    return;
 8005244:	bf00      	nop
 8005246:	e002      	b.n	800524e <HAL_UART_IRQHandler+0x54e>
      return;
 8005248:	bf00      	nop
 800524a:	e000      	b.n	800524e <HAL_UART_IRQHandler+0x54e>
      return;
 800524c:	bf00      	nop
  }
}
 800524e:	37e8      	adds	r7, #232	@ 0xe8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b09c      	sub	sp, #112	@ 0x70
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d172      	bne.n	80053a6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80052c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052c2:	2200      	movs	r2, #0
 80052c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	330c      	adds	r3, #12
 80052cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	330c      	adds	r3, #12
 80052e4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80052e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80052e8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e5      	bne.n	80052c6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3314      	adds	r3, #20
 8005300:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800530a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	667b      	str	r3, [r7, #100]	@ 0x64
 8005312:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3314      	adds	r3, #20
 8005318:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800531a:	647a      	str	r2, [r7, #68]	@ 0x44
 800531c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005320:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e5      	bne.n	80052fa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800532e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3314      	adds	r3, #20
 8005334:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	623b      	str	r3, [r7, #32]
   return(result);
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005344:	663b      	str	r3, [r7, #96]	@ 0x60
 8005346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3314      	adds	r3, #20
 800534c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800534e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005350:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e5      	bne.n	800532e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005364:	2220      	movs	r2, #32
 8005366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800536a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800536c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536e:	2b01      	cmp	r3, #1
 8005370:	d119      	bne.n	80053a6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	330c      	adds	r3, #12
 8005378:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	60fb      	str	r3, [r7, #12]
   return(result);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f023 0310 	bic.w	r3, r3, #16
 8005388:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800538a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	330c      	adds	r3, #12
 8005390:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005392:	61fa      	str	r2, [r7, #28]
 8005394:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	69b9      	ldr	r1, [r7, #24]
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	617b      	str	r3, [r7, #20]
   return(result);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e5      	bne.n	8005372 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053a8:	2200      	movs	r2, #0
 80053aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d106      	bne.n	80053c2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053b8:	4619      	mov	r1, r3
 80053ba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80053bc:	f7fb fe50 	bl	8001060 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053c0:	e002      	b.n	80053c8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80053c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80053c4:	f7ff ff50 	bl	8005268 <HAL_UART_RxCpltCallback>
}
 80053c8:	bf00      	nop
 80053ca:	3770      	adds	r7, #112	@ 0x70
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d108      	bne.n	80053fe <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	4619      	mov	r1, r3
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f7fb fe32 	bl	8001060 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053fc:	e002      	b.n	8005404 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7ff ff3c 	bl	800527c <HAL_UART_RxHalfCpltCallback>
}
 8005404:	bf00      	nop
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005414:	2300      	movs	r3, #0
 8005416:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005428:	2b80      	cmp	r3, #128	@ 0x80
 800542a:	bf0c      	ite	eq
 800542c:	2301      	moveq	r3, #1
 800542e:	2300      	movne	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b21      	cmp	r3, #33	@ 0x21
 800543e:	d108      	bne.n	8005452 <UART_DMAError+0x46>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2200      	movs	r2, #0
 800544a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800544c:	68b8      	ldr	r0, [r7, #8]
 800544e:	f000 f927 	bl	80056a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545c:	2b40      	cmp	r3, #64	@ 0x40
 800545e:	bf0c      	ite	eq
 8005460:	2301      	moveq	r3, #1
 8005462:	2300      	movne	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b22      	cmp	r3, #34	@ 0x22
 8005472:	d108      	bne.n	8005486 <UART_DMAError+0x7a>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d005      	beq.n	8005486 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2200      	movs	r2, #0
 800547e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005480:	68b8      	ldr	r0, [r7, #8]
 8005482:	f000 f935 	bl	80056f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548a:	f043 0210 	orr.w	r2, r3, #16
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005492:	68b8      	ldr	r0, [r7, #8]
 8005494:	f7ff fefc 	bl	8005290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005498:	bf00      	nop
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b0:	e03b      	b.n	800552a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d037      	beq.n	800552a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ba:	f7fc fe0d 	bl	80020d8 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	6a3a      	ldr	r2, [r7, #32]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e03a      	b.n	800554a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d023      	beq.n	800552a <UART_WaitOnFlagUntilTimeout+0x8a>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b80      	cmp	r3, #128	@ 0x80
 80054e6:	d020      	beq.n	800552a <UART_WaitOnFlagUntilTimeout+0x8a>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b40      	cmp	r3, #64	@ 0x40
 80054ec:	d01d      	beq.n	800552a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d116      	bne.n	800552a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f8ec 	bl	80056f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2208      	movs	r2, #8
 800551c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e00f      	b.n	800554a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4013      	ands	r3, r2
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	bf0c      	ite	eq
 800553a:	2301      	moveq	r3, #1
 800553c:	2300      	movne	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	429a      	cmp	r2, r3
 8005546:	d0b4      	beq.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b098      	sub	sp, #96	@ 0x60
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	4613      	mov	r3, r2
 8005560:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	88fa      	ldrh	r2, [r7, #6]
 800556c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2222      	movs	r2, #34	@ 0x22
 8005578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005580:	4a44      	ldr	r2, [pc, #272]	@ (8005694 <UART_Start_Receive_DMA+0x140>)
 8005582:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005588:	4a43      	ldr	r2, [pc, #268]	@ (8005698 <UART_Start_Receive_DMA+0x144>)
 800558a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005590:	4a42      	ldr	r2, [pc, #264]	@ (800569c <UART_Start_Receive_DMA+0x148>)
 8005592:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005598:	2200      	movs	r2, #0
 800559a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800559c:	f107 0308 	add.w	r3, r7, #8
 80055a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3304      	adds	r3, #4
 80055ac:	4619      	mov	r1, r3
 80055ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	f7fd fde6 	bl	8003184 <HAL_DMA_Start_IT>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2210      	movs	r2, #16
 80055c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e05d      	b.n	800568c <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d019      	beq.n	8005622 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	330c      	adds	r3, #12
 80055f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055f8:	e853 3f00 	ldrex	r3, [r3]
 80055fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005604:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	330c      	adds	r3, #12
 800560c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800560e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005610:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005612:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005614:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005616:	e841 2300 	strex	r3, r2, [r1]
 800561a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800561c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1e5      	bne.n	80055ee <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3314      	adds	r3, #20
 8005628:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	657b      	str	r3, [r7, #84]	@ 0x54
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3314      	adds	r3, #20
 8005640:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005642:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005644:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005648:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e5      	bne.n	8005622 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3314      	adds	r3, #20
 800565c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	617b      	str	r3, [r7, #20]
   return(result);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800566c:	653b      	str	r3, [r7, #80]	@ 0x50
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3314      	adds	r3, #20
 8005674:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005676:	627a      	str	r2, [r7, #36]	@ 0x24
 8005678:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6a39      	ldr	r1, [r7, #32]
 800567c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	61fb      	str	r3, [r7, #28]
   return(result);
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e5      	bne.n	8005656 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3760      	adds	r7, #96	@ 0x60
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	080052a5 	.word	0x080052a5
 8005698:	080053d1 	.word	0x080053d1
 800569c:	0800540d 	.word	0x0800540d

080056a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b089      	sub	sp, #36	@ 0x24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	330c      	adds	r3, #12
 80056ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80056be:	61fb      	str	r3, [r7, #28]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	61ba      	str	r2, [r7, #24]
 80056ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6979      	ldr	r1, [r7, #20]
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	613b      	str	r3, [r7, #16]
   return(result);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e5      	bne.n	80056a8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80056e4:	bf00      	nop
 80056e6:	3724      	adds	r7, #36	@ 0x24
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b095      	sub	sp, #84	@ 0x54
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	330c      	adds	r3, #12
 80056fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800570e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	330c      	adds	r3, #12
 8005716:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005718:	643a      	str	r2, [r7, #64]	@ 0x40
 800571a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800571e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e5      	bne.n	80056f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3314      	adds	r3, #20
 8005732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	61fb      	str	r3, [r7, #28]
   return(result);
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f023 0301 	bic.w	r3, r3, #1
 8005742:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3314      	adds	r3, #20
 800574a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800574c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800574e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e5      	bne.n	800572c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005764:	2b01      	cmp	r3, #1
 8005766:	d119      	bne.n	800579c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	330c      	adds	r3, #12
 800576e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	e853 3f00 	ldrex	r3, [r3]
 8005776:	60bb      	str	r3, [r7, #8]
   return(result);
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f023 0310 	bic.w	r3, r3, #16
 800577e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	330c      	adds	r3, #12
 8005786:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005788:	61ba      	str	r2, [r7, #24]
 800578a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	6979      	ldr	r1, [r7, #20]
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	613b      	str	r3, [r7, #16]
   return(result);
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e5      	bne.n	8005768 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057aa:	bf00      	nop
 80057ac:	3754      	adds	r7, #84	@ 0x54
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7ff fd60 	bl	8005290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057d0:	bf00      	nop
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b21      	cmp	r3, #33	@ 0x21
 80057ea:	d13e      	bne.n	800586a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057f4:	d114      	bne.n	8005820 <UART_Transmit_IT+0x48>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d110      	bne.n	8005820 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005812:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	1c9a      	adds	r2, r3, #2
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	621a      	str	r2, [r3, #32]
 800581e:	e008      	b.n	8005832 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	1c59      	adds	r1, r3, #1
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6211      	str	r1, [r2, #32]
 800582a:	781a      	ldrb	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29b      	uxth	r3, r3
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	4619      	mov	r1, r3
 8005840:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10f      	bne.n	8005866 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005854:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005864:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	e000      	b.n	800586c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800586a:	2302      	movs	r3, #2
  }
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800588e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff fcdb 	bl	8005254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08c      	sub	sp, #48	@ 0x30
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b22      	cmp	r3, #34	@ 0x22
 80058c2:	f040 80aa 	bne.w	8005a1a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ce:	d115      	bne.n	80058fc <UART_Receive_IT+0x54>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d111      	bne.n	80058fc <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f4:	1c9a      	adds	r2, r3, #2
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80058fa:	e024      	b.n	8005946 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005900:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800590a:	d007      	beq.n	800591c <UART_Receive_IT+0x74>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <UART_Receive_IT+0x82>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	b2da      	uxtb	r2, r3
 8005924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	e008      	b.n	800593c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005936:	b2da      	uxtb	r2, r3
 8005938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29b      	uxth	r3, r3
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	4619      	mov	r1, r3
 8005954:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005956:	2b00      	cmp	r3, #0
 8005958:	d15d      	bne.n	8005a16 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0220 	bic.w	r2, r2, #32
 8005968:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005978:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	695a      	ldr	r2, [r3, #20]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0201 	bic.w	r2, r2, #1
 8005988:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599c:	2b01      	cmp	r3, #1
 800599e:	d135      	bne.n	8005a0c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	330c      	adds	r3, #12
 80059ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	e853 3f00 	ldrex	r3, [r3]
 80059b4:	613b      	str	r3, [r7, #16]
   return(result);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f023 0310 	bic.w	r3, r3, #16
 80059bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	330c      	adds	r3, #12
 80059c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059c6:	623a      	str	r2, [r7, #32]
 80059c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	69f9      	ldr	r1, [r7, #28]
 80059cc:	6a3a      	ldr	r2, [r7, #32]
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e5      	bne.n	80059a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b10      	cmp	r3, #16
 80059e6:	d10a      	bne.n	80059fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fb fb2b 	bl	8001060 <HAL_UARTEx_RxEventCallback>
 8005a0a:	e002      	b.n	8005a12 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff fc2b 	bl	8005268 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e002      	b.n	8005a1c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	e000      	b.n	8005a1c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005a1a:	2302      	movs	r3, #2
  }
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3730      	adds	r7, #48	@ 0x30
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a28:	b0c0      	sub	sp, #256	@ 0x100
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a40:	68d9      	ldr	r1, [r3, #12]
 8005a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	ea40 0301 	orr.w	r3, r0, r1
 8005a4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a7c:	f021 010c 	bic.w	r1, r1, #12
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9e:	6999      	ldr	r1, [r3, #24]
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	ea40 0301 	orr.w	r3, r0, r1
 8005aaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4b8f      	ldr	r3, [pc, #572]	@ (8005cf0 <UART_SetConfig+0x2cc>)
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d005      	beq.n	8005ac4 <UART_SetConfig+0xa0>
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4b8d      	ldr	r3, [pc, #564]	@ (8005cf4 <UART_SetConfig+0x2d0>)
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d104      	bne.n	8005ace <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ac4:	f7fe fcc6 	bl	8004454 <HAL_RCC_GetPCLK2Freq>
 8005ac8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005acc:	e003      	b.n	8005ad6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ace:	f7fe fcad 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 8005ad2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ae0:	f040 810c 	bne.w	8005cfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005aee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005af2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005af6:	4622      	mov	r2, r4
 8005af8:	462b      	mov	r3, r5
 8005afa:	1891      	adds	r1, r2, r2
 8005afc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005afe:	415b      	adcs	r3, r3
 8005b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b06:	4621      	mov	r1, r4
 8005b08:	eb12 0801 	adds.w	r8, r2, r1
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	eb43 0901 	adc.w	r9, r3, r1
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b26:	4690      	mov	r8, r2
 8005b28:	4699      	mov	r9, r3
 8005b2a:	4623      	mov	r3, r4
 8005b2c:	eb18 0303 	adds.w	r3, r8, r3
 8005b30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b34:	462b      	mov	r3, r5
 8005b36:	eb49 0303 	adc.w	r3, r9, r3
 8005b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b52:	460b      	mov	r3, r1
 8005b54:	18db      	adds	r3, r3, r3
 8005b56:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b58:	4613      	mov	r3, r2
 8005b5a:	eb42 0303 	adc.w	r3, r2, r3
 8005b5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b68:	f7fa fb2e 	bl	80001c8 <__aeabi_uldivmod>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4b61      	ldr	r3, [pc, #388]	@ (8005cf8 <UART_SetConfig+0x2d4>)
 8005b72:	fba3 2302 	umull	r2, r3, r3, r2
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	011c      	lsls	r4, r3, #4
 8005b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	464b      	mov	r3, r9
 8005b90:	1891      	adds	r1, r2, r2
 8005b92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b94:	415b      	adcs	r3, r3
 8005b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b9c:	4641      	mov	r1, r8
 8005b9e:	eb12 0a01 	adds.w	sl, r2, r1
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	eb43 0b01 	adc.w	fp, r3, r1
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	f04f 0300 	mov.w	r3, #0
 8005bb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bbc:	4692      	mov	sl, r2
 8005bbe:	469b      	mov	fp, r3
 8005bc0:	4643      	mov	r3, r8
 8005bc2:	eb1a 0303 	adds.w	r3, sl, r3
 8005bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bca:	464b      	mov	r3, r9
 8005bcc:	eb4b 0303 	adc.w	r3, fp, r3
 8005bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005be0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005be4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005be8:	460b      	mov	r3, r1
 8005bea:	18db      	adds	r3, r3, r3
 8005bec:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bee:	4613      	mov	r3, r2
 8005bf0:	eb42 0303 	adc.w	r3, r2, r3
 8005bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005bfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005bfe:	f7fa fae3 	bl	80001c8 <__aeabi_uldivmod>
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4611      	mov	r1, r2
 8005c08:	4b3b      	ldr	r3, [pc, #236]	@ (8005cf8 <UART_SetConfig+0x2d4>)
 8005c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	2264      	movs	r2, #100	@ 0x64
 8005c12:	fb02 f303 	mul.w	r3, r2, r3
 8005c16:	1acb      	subs	r3, r1, r3
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c1e:	4b36      	ldr	r3, [pc, #216]	@ (8005cf8 <UART_SetConfig+0x2d4>)
 8005c20:	fba3 2302 	umull	r2, r3, r3, r2
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c2c:	441c      	add	r4, r3
 8005c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c40:	4642      	mov	r2, r8
 8005c42:	464b      	mov	r3, r9
 8005c44:	1891      	adds	r1, r2, r2
 8005c46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c48:	415b      	adcs	r3, r3
 8005c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c50:	4641      	mov	r1, r8
 8005c52:	1851      	adds	r1, r2, r1
 8005c54:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c56:	4649      	mov	r1, r9
 8005c58:	414b      	adcs	r3, r1
 8005c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c68:	4659      	mov	r1, fp
 8005c6a:	00cb      	lsls	r3, r1, #3
 8005c6c:	4651      	mov	r1, sl
 8005c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c72:	4651      	mov	r1, sl
 8005c74:	00ca      	lsls	r2, r1, #3
 8005c76:	4610      	mov	r0, r2
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	4642      	mov	r2, r8
 8005c7e:	189b      	adds	r3, r3, r2
 8005c80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c84:	464b      	mov	r3, r9
 8005c86:	460a      	mov	r2, r1
 8005c88:	eb42 0303 	adc.w	r3, r2, r3
 8005c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ca0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	18db      	adds	r3, r3, r3
 8005ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005caa:	4613      	mov	r3, r2
 8005cac:	eb42 0303 	adc.w	r3, r2, r3
 8005cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005cba:	f7fa fa85 	bl	80001c8 <__aeabi_uldivmod>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf8 <UART_SetConfig+0x2d4>)
 8005cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	2164      	movs	r1, #100	@ 0x64
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	3332      	adds	r3, #50	@ 0x32
 8005cd6:	4a08      	ldr	r2, [pc, #32]	@ (8005cf8 <UART_SetConfig+0x2d4>)
 8005cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	f003 0207 	and.w	r2, r3, #7
 8005ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4422      	add	r2, r4
 8005cea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cec:	e106      	b.n	8005efc <UART_SetConfig+0x4d8>
 8005cee:	bf00      	nop
 8005cf0:	40011000 	.word	0x40011000
 8005cf4:	40011400 	.word	0x40011400
 8005cf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d00:	2200      	movs	r2, #0
 8005d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d0e:	4642      	mov	r2, r8
 8005d10:	464b      	mov	r3, r9
 8005d12:	1891      	adds	r1, r2, r2
 8005d14:	6239      	str	r1, [r7, #32]
 8005d16:	415b      	adcs	r3, r3
 8005d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d1e:	4641      	mov	r1, r8
 8005d20:	1854      	adds	r4, r2, r1
 8005d22:	4649      	mov	r1, r9
 8005d24:	eb43 0501 	adc.w	r5, r3, r1
 8005d28:	f04f 0200 	mov.w	r2, #0
 8005d2c:	f04f 0300 	mov.w	r3, #0
 8005d30:	00eb      	lsls	r3, r5, #3
 8005d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d36:	00e2      	lsls	r2, r4, #3
 8005d38:	4614      	mov	r4, r2
 8005d3a:	461d      	mov	r5, r3
 8005d3c:	4643      	mov	r3, r8
 8005d3e:	18e3      	adds	r3, r4, r3
 8005d40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d44:	464b      	mov	r3, r9
 8005d46:	eb45 0303 	adc.w	r3, r5, r3
 8005d4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	f04f 0300 	mov.w	r3, #0
 8005d66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	008b      	lsls	r3, r1, #2
 8005d6e:	4621      	mov	r1, r4
 8005d70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d74:	4621      	mov	r1, r4
 8005d76:	008a      	lsls	r2, r1, #2
 8005d78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d7c:	f7fa fa24 	bl	80001c8 <__aeabi_uldivmod>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4b60      	ldr	r3, [pc, #384]	@ (8005f08 <UART_SetConfig+0x4e4>)
 8005d86:	fba3 2302 	umull	r2, r3, r3, r2
 8005d8a:	095b      	lsrs	r3, r3, #5
 8005d8c:	011c      	lsls	r4, r3, #4
 8005d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d92:	2200      	movs	r2, #0
 8005d94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005da0:	4642      	mov	r2, r8
 8005da2:	464b      	mov	r3, r9
 8005da4:	1891      	adds	r1, r2, r2
 8005da6:	61b9      	str	r1, [r7, #24]
 8005da8:	415b      	adcs	r3, r3
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005db0:	4641      	mov	r1, r8
 8005db2:	1851      	adds	r1, r2, r1
 8005db4:	6139      	str	r1, [r7, #16]
 8005db6:	4649      	mov	r1, r9
 8005db8:	414b      	adcs	r3, r1
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	f04f 0200 	mov.w	r2, #0
 8005dc0:	f04f 0300 	mov.w	r3, #0
 8005dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dc8:	4659      	mov	r1, fp
 8005dca:	00cb      	lsls	r3, r1, #3
 8005dcc:	4651      	mov	r1, sl
 8005dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dd2:	4651      	mov	r1, sl
 8005dd4:	00ca      	lsls	r2, r1, #3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4603      	mov	r3, r0
 8005ddc:	4642      	mov	r2, r8
 8005dde:	189b      	adds	r3, r3, r2
 8005de0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005de4:	464b      	mov	r3, r9
 8005de6:	460a      	mov	r2, r1
 8005de8:	eb42 0303 	adc.w	r3, r2, r3
 8005dec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005dfa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e08:	4649      	mov	r1, r9
 8005e0a:	008b      	lsls	r3, r1, #2
 8005e0c:	4641      	mov	r1, r8
 8005e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e12:	4641      	mov	r1, r8
 8005e14:	008a      	lsls	r2, r1, #2
 8005e16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e1a:	f7fa f9d5 	bl	80001c8 <__aeabi_uldivmod>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	4611      	mov	r1, r2
 8005e24:	4b38      	ldr	r3, [pc, #224]	@ (8005f08 <UART_SetConfig+0x4e4>)
 8005e26:	fba3 2301 	umull	r2, r3, r3, r1
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	2264      	movs	r2, #100	@ 0x64
 8005e2e:	fb02 f303 	mul.w	r3, r2, r3
 8005e32:	1acb      	subs	r3, r1, r3
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	3332      	adds	r3, #50	@ 0x32
 8005e38:	4a33      	ldr	r2, [pc, #204]	@ (8005f08 <UART_SetConfig+0x4e4>)
 8005e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3e:	095b      	lsrs	r3, r3, #5
 8005e40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e44:	441c      	add	r4, r3
 8005e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e54:	4642      	mov	r2, r8
 8005e56:	464b      	mov	r3, r9
 8005e58:	1891      	adds	r1, r2, r2
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	415b      	adcs	r3, r3
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e64:	4641      	mov	r1, r8
 8005e66:	1851      	adds	r1, r2, r1
 8005e68:	6039      	str	r1, [r7, #0]
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	414b      	adcs	r3, r1
 8005e6e:	607b      	str	r3, [r7, #4]
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e7c:	4659      	mov	r1, fp
 8005e7e:	00cb      	lsls	r3, r1, #3
 8005e80:	4651      	mov	r1, sl
 8005e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e86:	4651      	mov	r1, sl
 8005e88:	00ca      	lsls	r2, r1, #3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4603      	mov	r3, r0
 8005e90:	4642      	mov	r2, r8
 8005e92:	189b      	adds	r3, r3, r2
 8005e94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e96:	464b      	mov	r3, r9
 8005e98:	460a      	mov	r2, r1
 8005e9a:	eb42 0303 	adc.w	r3, r2, r3
 8005e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005eaa:	667a      	str	r2, [r7, #100]	@ 0x64
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005eb8:	4649      	mov	r1, r9
 8005eba:	008b      	lsls	r3, r1, #2
 8005ebc:	4641      	mov	r1, r8
 8005ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ec2:	4641      	mov	r1, r8
 8005ec4:	008a      	lsls	r2, r1, #2
 8005ec6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005eca:	f7fa f97d 	bl	80001c8 <__aeabi_uldivmod>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f08 <UART_SetConfig+0x4e4>)
 8005ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed8:	095b      	lsrs	r3, r3, #5
 8005eda:	2164      	movs	r1, #100	@ 0x64
 8005edc:	fb01 f303 	mul.w	r3, r1, r3
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	3332      	adds	r3, #50	@ 0x32
 8005ee6:	4a08      	ldr	r2, [pc, #32]	@ (8005f08 <UART_SetConfig+0x4e4>)
 8005ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	f003 020f 	and.w	r2, r3, #15
 8005ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4422      	add	r2, r4
 8005efa:	609a      	str	r2, [r3, #8]
}
 8005efc:	bf00      	nop
 8005efe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f02:	46bd      	mov	sp, r7
 8005f04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f08:	51eb851f 	.word	0x51eb851f

08005f0c <memset>:
 8005f0c:	4402      	add	r2, r0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d100      	bne.n	8005f16 <memset+0xa>
 8005f14:	4770      	bx	lr
 8005f16:	f803 1b01 	strb.w	r1, [r3], #1
 8005f1a:	e7f9      	b.n	8005f10 <memset+0x4>

08005f1c <__libc_init_array>:
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	4d0d      	ldr	r5, [pc, #52]	@ (8005f54 <__libc_init_array+0x38>)
 8005f20:	4c0d      	ldr	r4, [pc, #52]	@ (8005f58 <__libc_init_array+0x3c>)
 8005f22:	1b64      	subs	r4, r4, r5
 8005f24:	10a4      	asrs	r4, r4, #2
 8005f26:	2600      	movs	r6, #0
 8005f28:	42a6      	cmp	r6, r4
 8005f2a:	d109      	bne.n	8005f40 <__libc_init_array+0x24>
 8005f2c:	4d0b      	ldr	r5, [pc, #44]	@ (8005f5c <__libc_init_array+0x40>)
 8005f2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005f60 <__libc_init_array+0x44>)
 8005f30:	f000 f826 	bl	8005f80 <_init>
 8005f34:	1b64      	subs	r4, r4, r5
 8005f36:	10a4      	asrs	r4, r4, #2
 8005f38:	2600      	movs	r6, #0
 8005f3a:	42a6      	cmp	r6, r4
 8005f3c:	d105      	bne.n	8005f4a <__libc_init_array+0x2e>
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}
 8005f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f44:	4798      	blx	r3
 8005f46:	3601      	adds	r6, #1
 8005f48:	e7ee      	b.n	8005f28 <__libc_init_array+0xc>
 8005f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f4e:	4798      	blx	r3
 8005f50:	3601      	adds	r6, #1
 8005f52:	e7f2      	b.n	8005f3a <__libc_init_array+0x1e>
 8005f54:	080062d0 	.word	0x080062d0
 8005f58:	080062d0 	.word	0x080062d0
 8005f5c:	080062d0 	.word	0x080062d0
 8005f60:	080062d4 	.word	0x080062d4

08005f64 <memcpy>:
 8005f64:	440a      	add	r2, r1
 8005f66:	4291      	cmp	r1, r2
 8005f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f6c:	d100      	bne.n	8005f70 <memcpy+0xc>
 8005f6e:	4770      	bx	lr
 8005f70:	b510      	push	{r4, lr}
 8005f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f7a:	4291      	cmp	r1, r2
 8005f7c:	d1f9      	bne.n	8005f72 <memcpy+0xe>
 8005f7e:	bd10      	pop	{r4, pc}

08005f80 <_init>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	bf00      	nop
 8005f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f86:	bc08      	pop	{r3}
 8005f88:	469e      	mov	lr, r3
 8005f8a:	4770      	bx	lr

08005f8c <_fini>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	bf00      	nop
 8005f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f92:	bc08      	pop	{r3}
 8005f94:	469e      	mov	lr, r3
 8005f96:	4770      	bx	lr
