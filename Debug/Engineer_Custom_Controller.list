
Engineer_Custom_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000336c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080034f4  080034f4  000044f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800350c  0800350c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800350c  0800350c  0000450c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003514  08003514  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003514  08003514  00004514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003518  08003518  00004518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800351c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000180  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000018c  2000018c  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a20a  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f6d  00000000  00000000  0000f246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a0  00000000  00000000  000111b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000676  00000000  00000000  00011a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d93  00000000  00000000  000120ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b95f  00000000  00000000  00032e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c550c  00000000  00000000  0003e7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00103ccc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020f0  00000000  00000000  00103d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00105e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080034dc 	.word	0x080034dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080034dc 	.word	0x080034dc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <arm_control_init>:
// PID instances for the joint
static PID_t pid_pos;
static PID_t pid_vel;

void arm_control_init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
    // Outer: Position PID (deg → RPM)
    pid_init(&pid_pos,
 80004f8:	eddf 3a13 	vldr	s7, [pc, #76]	@ 8000548 <arm_control_init+0x54>
 80004fc:	eeb2 3a04 	vmov.f32	s6, #36	@ 0x41200000  10.0
 8000500:	eefa 2a04 	vmov.f32	s5, #164	@ 0xc1200000 -10.0
 8000504:	eeb3 2a0e 	vmov.f32	s4, #62	@ 0x41f00000  30.0
 8000508:	eefb 1a0e 	vmov.f32	s3, #190	@ 0xc1f00000 -30.0
 800050c:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 800054c <arm_control_init+0x58>
 8000510:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8000550 <arm_control_init+0x5c>
 8000514:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000518:	480e      	ldr	r0, [pc, #56]	@ (8000554 <arm_control_init+0x60>)
 800051a:	f000 fc0f 	bl	8000d3c <pid_init>
             -30.0f, 30.0f,       // output limits = RPM
             -10.0f, 10.0f,         // integrator clamp
             0.3f);                 // deadband in deg

    // Middle: Velocity PID (RPM → normalized voltage [-1,1])
    pid_init(&pid_vel,
 800051e:	eddf 3a0c 	vldr	s7, [pc, #48]	@ 8000550 <arm_control_init+0x5c>
 8000522:	ed9f 3a0d 	vldr	s6, [pc, #52]	@ 8000558 <arm_control_init+0x64>
 8000526:	eddf 2a0d 	vldr	s5, [pc, #52]	@ 800055c <arm_control_init+0x68>
 800052a:	ed9f 2a0d 	vldr	s4, [pc, #52]	@ 8000560 <arm_control_init+0x6c>
 800052e:	eddf 1a0d 	vldr	s3, [pc, #52]	@ 8000564 <arm_control_init+0x70>
 8000532:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 8000550 <arm_control_init+0x5c>
 8000536:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8000550 <arm_control_init+0x5c>
 800053a:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000568 <arm_control_init+0x74>
 800053e:	480b      	ldr	r0, [pc, #44]	@ (800056c <arm_control_init+0x78>)
 8000540:	f000 fbfc 	bl	8000d3c <pid_init>
             0.008f, 0.0f, 0.0f,  // Kp, Ki, Kd
             -0.2f, 0.2f,           // output = normalized voltage demand
             -0.05f, 0.05f,           // integrator clamp
             0.0f);                 // deadband
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	3e99999a 	.word	0x3e99999a
 800054c:	3c23d70a 	.word	0x3c23d70a
 8000550:	00000000 	.word	0x00000000
 8000554:	20000028 	.word	0x20000028
 8000558:	3d4ccccd 	.word	0x3d4ccccd
 800055c:	bd4ccccd 	.word	0xbd4ccccd
 8000560:	3e4ccccd 	.word	0x3e4ccccd
 8000564:	be4ccccd 	.word	0xbe4ccccd
 8000568:	3c03126f 	.word	0x3c03126f
 800056c:	20000054 	.word	0x20000054

08000570 <arm_control_update>:

int16_t arm_control_update(float pos_target_deg, float pos_meas_deg,
                           float vel_meas_rpm, float dt)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	ed87 0a03 	vstr	s0, [r7, #12]
 800057a:	edc7 0a02 	vstr	s1, [r7, #8]
 800057e:	ed87 1a01 	vstr	s2, [r7, #4]
 8000582:	edc7 1a00 	vstr	s3, [r7]
    // Outer loop: Position → desired velocity
    float vel_target = pid_update(&pid_pos, pos_target_deg, pos_meas_deg, dt);
 8000586:	ed97 1a00 	vldr	s2, [r7]
 800058a:	edd7 0a02 	vldr	s1, [r7, #8]
 800058e:	ed97 0a03 	vldr	s0, [r7, #12]
 8000592:	480c      	ldr	r0, [pc, #48]	@ (80005c4 <arm_control_update+0x54>)
 8000594:	f000 fc3a 	bl	8000e0c <pid_update>
 8000598:	ed87 0a05 	vstr	s0, [r7, #20]

    // Middle loop: Velocity → normalized voltage
    float volt_demand = pid_update(&pid_vel, vel_target, vel_meas_rpm, dt);
 800059c:	ed97 1a00 	vldr	s2, [r7]
 80005a0:	edd7 0a01 	vldr	s1, [r7, #4]
 80005a4:	ed97 0a05 	vldr	s0, [r7, #20]
 80005a8:	4807      	ldr	r0, [pc, #28]	@ (80005c8 <arm_control_update+0x58>)
 80005aa:	f000 fc2f 	bl	8000e0c <pid_update>
 80005ae:	ed87 0a04 	vstr	s0, [r7, #16]

    // Convert normalized voltage [-1,1] → CAN cmd [-25000, 25000]
    return voltage_to_can(volt_demand);
 80005b2:	ed97 0a04 	vldr	s0, [r7, #16]
 80005b6:	f000 fcfb 	bl	8000fb0 <voltage_to_can>
 80005ba:	4603      	mov	r3, r0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000028 	.word	0x20000028
 80005c8:	20000054 	.word	0x20000054

080005cc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005d0:	4b17      	ldr	r3, [pc, #92]	@ (8000630 <MX_CAN1_Init+0x64>)
 80005d2:	4a18      	ldr	r2, [pc, #96]	@ (8000634 <MX_CAN1_Init+0x68>)
 80005d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80005d6:	4b16      	ldr	r3, [pc, #88]	@ (8000630 <MX_CAN1_Init+0x64>)
 80005d8:	2203      	movs	r2, #3
 80005da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005dc:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <MX_CAN1_Init+0x64>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005e2:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <MX_CAN1_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80005e8:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <MX_CAN1_Init+0x64>)
 80005ea:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80005ee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <MX_CAN1_Init+0x64>)
 80005f2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80005f6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <MX_CAN1_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <MX_CAN1_Init+0x64>)
 8000600:	2200      	movs	r2, #0
 8000602:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	@ (8000630 <MX_CAN1_Init+0x64>)
 8000606:	2200      	movs	r2, #0
 8000608:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800060a:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <MX_CAN1_Init+0x64>)
 800060c:	2200      	movs	r2, #0
 800060e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	@ (8000630 <MX_CAN1_Init+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <MX_CAN1_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	@ (8000630 <MX_CAN1_Init+0x64>)
 800061e:	f000 fecd 	bl	80013bc <HAL_CAN_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000628:	f000 fa0a 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000080 	.word	0x20000080
 8000634:	40006400 	.word	0x40006400

08000638 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800063c:	4b17      	ldr	r3, [pc, #92]	@ (800069c <MX_CAN2_Init+0x64>)
 800063e:	4a18      	ldr	r2, [pc, #96]	@ (80006a0 <MX_CAN2_Init+0x68>)
 8000640:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8000642:	4b16      	ldr	r3, [pc, #88]	@ (800069c <MX_CAN2_Init+0x64>)
 8000644:	2203      	movs	r2, #3
 8000646:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000648:	4b14      	ldr	r3, [pc, #80]	@ (800069c <MX_CAN2_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <MX_CAN2_Init+0x64>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_CAN2_Init+0x64>)
 8000656:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 800065a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_CAN2_Init+0x64>)
 800065e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000662:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000664:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <MX_CAN2_Init+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800066a:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <MX_CAN2_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <MX_CAN2_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_CAN2_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800067c:	4b07      	ldr	r3, [pc, #28]	@ (800069c <MX_CAN2_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000682:	4b06      	ldr	r3, [pc, #24]	@ (800069c <MX_CAN2_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_CAN2_Init+0x64>)
 800068a:	f000 fe97 	bl	80013bc <HAL_CAN_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000694:	f000 f9d4 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000a8 	.word	0x200000a8
 80006a0:	40006800 	.word	0x40006800

080006a4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	@ 0x30
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a4a      	ldr	r2, [pc, #296]	@ (80007ec <HAL_CAN_MspInit+0x148>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d13d      	bne.n	8000742 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80006c6:	4b4a      	ldr	r3, [pc, #296]	@ (80007f0 <HAL_CAN_MspInit+0x14c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3301      	adds	r3, #1
 80006cc:	4a48      	ldr	r2, [pc, #288]	@ (80007f0 <HAL_CAN_MspInit+0x14c>)
 80006ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80006d0:	4b47      	ldr	r3, [pc, #284]	@ (80007f0 <HAL_CAN_MspInit+0x14c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d10d      	bne.n	80006f4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	4b45      	ldr	r3, [pc, #276]	@ (80007f4 <HAL_CAN_MspInit+0x150>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a44      	ldr	r2, [pc, #272]	@ (80007f4 <HAL_CAN_MspInit+0x150>)
 80006e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e8:	4b42      	ldr	r3, [pc, #264]	@ (80007f4 <HAL_CAN_MspInit+0x150>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006f0:	61bb      	str	r3, [r7, #24]
 80006f2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	4b3e      	ldr	r3, [pc, #248]	@ (80007f4 <HAL_CAN_MspInit+0x150>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fc:	4a3d      	ldr	r2, [pc, #244]	@ (80007f4 <HAL_CAN_MspInit+0x150>)
 80006fe:	f043 0308 	orr.w	r3, r3, #8
 8000702:	6313      	str	r3, [r2, #48]	@ 0x30
 8000704:	4b3b      	ldr	r3, [pc, #236]	@ (80007f4 <HAL_CAN_MspInit+0x150>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000708:	f003 0308 	and.w	r3, r3, #8
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000710:	2303      	movs	r3, #3
 8000712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000720:	2309      	movs	r3, #9
 8000722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4833      	ldr	r0, [pc, #204]	@ (80007f8 <HAL_CAN_MspInit+0x154>)
 800072c:	f001 fdbe 	bl	80022ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2014      	movs	r0, #20
 8000736:	f001 fd82 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800073a:	2014      	movs	r0, #20
 800073c:	f001 fd9b 	bl	8002276 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000740:	e04f      	b.n	80007e2 <HAL_CAN_MspInit+0x13e>
  else if(canHandle->Instance==CAN2)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a2d      	ldr	r2, [pc, #180]	@ (80007fc <HAL_CAN_MspInit+0x158>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d14a      	bne.n	80007e2 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	4b28      	ldr	r3, [pc, #160]	@ (80007f4 <HAL_CAN_MspInit+0x150>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	4a27      	ldr	r2, [pc, #156]	@ (80007f4 <HAL_CAN_MspInit+0x150>)
 8000756:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800075a:	6413      	str	r3, [r2, #64]	@ 0x40
 800075c:	4b25      	ldr	r3, [pc, #148]	@ (80007f4 <HAL_CAN_MspInit+0x150>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <HAL_CAN_MspInit+0x14c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3301      	adds	r3, #1
 800076e:	4a20      	ldr	r2, [pc, #128]	@ (80007f0 <HAL_CAN_MspInit+0x14c>)
 8000770:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000772:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <HAL_CAN_MspInit+0x14c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d10d      	bne.n	8000796 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b1d      	ldr	r3, [pc, #116]	@ (80007f4 <HAL_CAN_MspInit+0x150>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000782:	4a1c      	ldr	r2, [pc, #112]	@ (80007f4 <HAL_CAN_MspInit+0x150>)
 8000784:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000788:	6413      	str	r3, [r2, #64]	@ 0x40
 800078a:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <HAL_CAN_MspInit+0x150>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b16      	ldr	r3, [pc, #88]	@ (80007f4 <HAL_CAN_MspInit+0x150>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a15      	ldr	r2, [pc, #84]	@ (80007f4 <HAL_CAN_MspInit+0x150>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <HAL_CAN_MspInit+0x150>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80007b2:	2360      	movs	r3, #96	@ 0x60
 80007b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80007c2:	2309      	movs	r3, #9
 80007c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	480c      	ldr	r0, [pc, #48]	@ (8000800 <HAL_CAN_MspInit+0x15c>)
 80007ce:	f001 fd6d 	bl	80022ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2040      	movs	r0, #64	@ 0x40
 80007d8:	f001 fd31 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80007dc:	2040      	movs	r0, #64	@ 0x40
 80007de:	f001 fd4a 	bl	8002276 <HAL_NVIC_EnableIRQ>
}
 80007e2:	bf00      	nop
 80007e4:	3730      	adds	r7, #48	@ 0x30
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40006400 	.word	0x40006400
 80007f0:	200000d0 	.word	0x200000d0
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020c00 	.word	0x40020c00
 80007fc:	40006800 	.word	0x40006800
 8000800:	40020400 	.word	0x40020400

08000804 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	@ 0x28
 8000808:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b2e      	ldr	r3, [pc, #184]	@ (80008d8 <MX_GPIO_Init+0xd4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a2d      	ldr	r2, [pc, #180]	@ (80008d8 <MX_GPIO_Init+0xd4>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b2b      	ldr	r3, [pc, #172]	@ (80008d8 <MX_GPIO_Init+0xd4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b27      	ldr	r3, [pc, #156]	@ (80008d8 <MX_GPIO_Init+0xd4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a26      	ldr	r2, [pc, #152]	@ (80008d8 <MX_GPIO_Init+0xd4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b24      	ldr	r3, [pc, #144]	@ (80008d8 <MX_GPIO_Init+0xd4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <MX_GPIO_Init+0xd4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a1f      	ldr	r2, [pc, #124]	@ (80008d8 <MX_GPIO_Init+0xd4>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <MX_GPIO_Init+0xd4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <MX_GPIO_Init+0xd4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a18      	ldr	r2, [pc, #96]	@ (80008d8 <MX_GPIO_Init+0xd4>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <MX_GPIO_Init+0xd4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <MX_GPIO_Init+0xd4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a11      	ldr	r2, [pc, #68]	@ (80008d8 <MX_GPIO_Init+0xd4>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_GPIO_Init+0xd4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80008ac:	480b      	ldr	r0, [pc, #44]	@ (80008dc <MX_GPIO_Init+0xd8>)
 80008ae:	f001 fe99 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 80008b2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_GPIO_Init+0xd8>)
 80008cc:	f001 fcee 	bl	80022ac <HAL_GPIO_Init>

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	@ 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40021c00 	.word	0x40021c00

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008e6:	f000 fcd3 	bl	8001290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ea:	f000 f83f 	bl	800096c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  arm_control_init();
 80008ee:	f7ff fe01 	bl	80004f4 <arm_control_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f7ff ff87 	bl	8000804 <MX_GPIO_Init>
  MX_CAN1_Init();
 80008f6:	f7ff fe69 	bl	80005cc <MX_CAN1_Init>
  MX_USART3_UART_Init();
 80008fa:	f000 fc2d 	bl	8001158 <MX_USART3_UART_Init>
  MX_CAN2_Init();
 80008fe:	f7ff fe9b 	bl	8000638 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  Enable_CAN2();
 8000902:	f000 f8f3 	bl	8000aec <Enable_CAN2>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float dt = get_dt();
 8000906:	f000 fc03 	bl	8001110 <get_dt>
 800090a:	ed87 0a03 	vstr	s0, [r7, #12]

	  float pos_target = 300.0f; //remeber to add a filter for negative values not allowed
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <main+0x80>)
 8000910:	60bb      	str	r3, [r7, #8]
	  float pos_meas = all_motors[5].angle_deg;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <main+0x84>)
 8000914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000916:	607b      	str	r3, [r7, #4]
	  float vel_meas = all_motors[5].speed_rpm;
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <main+0x84>)
 800091a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	@ 0x52
 800091e:	ee07 3a90 	vmov	s15, r3
 8000922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000926:	edc7 7a00 	vstr	s15, [r7]

	  debug_cmd_motor7 = arm_control_update(pos_target, pos_meas, vel_meas, dt);
 800092a:	edd7 1a03 	vldr	s3, [r7, #12]
 800092e:	ed97 1a00 	vldr	s2, [r7]
 8000932:	edd7 0a01 	vldr	s1, [r7, #4]
 8000936:	ed97 0a02 	vldr	s0, [r7, #8]
 800093a:	f7ff fe19 	bl	8000570 <arm_control_update>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <main+0x88>)
 8000944:	801a      	strh	r2, [r3, #0]

	  //int16_t cmd_motor7 = arm_control_update(pos_target, pos_meas, vel_meas, dt);

	  Set_GM6020_Voltage(0, 0, debug_cmd_motor7);
 8000946:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <main+0x88>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	b21b      	sxth	r3, r3
 800094c:	461a      	mov	r2, r3
 800094e:	2100      	movs	r1, #0
 8000950:	2000      	movs	r0, #0
 8000952:	f000 f90b 	bl	8000b6c <Set_GM6020_Voltage>
	  HAL_Delay(10);
 8000956:	200a      	movs	r0, #10
 8000958:	f000 fd0c 	bl	8001374 <HAL_Delay>
  {
 800095c:	bf00      	nop
 800095e:	e7d2      	b.n	8000906 <main+0x26>
 8000960:	43960000 	.word	0x43960000
 8000964:	200000d8 	.word	0x200000d8
 8000968:	200000d4 	.word	0x200000d4

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b094      	sub	sp, #80	@ 0x50
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0320 	add.w	r3, r7, #32
 8000976:	2230      	movs	r2, #48	@ 0x30
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f002 fd82 	bl	8003484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	4b28      	ldr	r3, [pc, #160]	@ (8000a38 <SystemClock_Config+0xcc>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000998:	4a27      	ldr	r2, [pc, #156]	@ (8000a38 <SystemClock_Config+0xcc>)
 800099a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099e:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a0:	4b25      	ldr	r3, [pc, #148]	@ (8000a38 <SystemClock_Config+0xcc>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	4b22      	ldr	r3, [pc, #136]	@ (8000a3c <SystemClock_Config+0xd0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a21      	ldr	r2, [pc, #132]	@ (8000a3c <SystemClock_Config+0xd0>)
 80009b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <SystemClock_Config+0xd0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d2:	2302      	movs	r3, #2
 80009d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80009dc:	230c      	movs	r3, #12
 80009de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ea:	2304      	movs	r3, #4
 80009ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ee:	f107 0320 	add.w	r3, r7, #32
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fe2a 	bl	800264c <HAL_RCC_OscConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009fe:	f000 f81f 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a02:	230f      	movs	r3, #15
 8000a04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a06:	2302      	movs	r3, #2
 8000a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a0e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	2105      	movs	r1, #5
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 f88b 	bl	8002b3c <HAL_RCC_ClockConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a2c:	f000 f808 	bl	8000a40 <Error_Handler>
  }
}
 8000a30:	bf00      	nop
 8000a32:	3750      	adds	r7, #80	@ 0x50
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40007000 	.word	0x40007000

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a4a:	4807      	ldr	r0, [pc, #28]	@ (8000a68 <Error_Handler+0x28>)
 8000a4c:	f001 fdca 	bl	80025e4 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8000a54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a58:	4803      	ldr	r0, [pc, #12]	@ (8000a68 <Error_Handler+0x28>)
 8000a5a:	f001 fddc 	bl	8002616 <HAL_GPIO_TogglePin>
      HAL_Delay(250); // blink every 250ms
 8000a5e:	20fa      	movs	r0, #250	@ 0xfa
 8000a60:	f000 fc88 	bl	8001374 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8000a64:	bf00      	nop
 8000a66:	e7f5      	b.n	8000a54 <Error_Handler+0x14>
 8000a68:	40021c00 	.word	0x40021c00

08000a6c <get_motor_measure>:

motor_measure_t all_motors[6];

//static in-line function to decode the CAN message feedback
static inline void get_motor_measure(motor_measure_t *ptr, const uint8_t *data)
    {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
        ptr ->last_ecd			= ptr->ecd;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	b21a      	sxth	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	811a      	strh	r2, [r3, #8]
        ptr ->ecd				= (uint16_t)((data[0] << 8) | data[1]);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	021b      	lsls	r3, r3, #8
 8000a88:	b21a      	sxth	r2, r3
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b21b      	sxth	r3, r3
 8000a92:	4313      	orrs	r3, r2
 8000a94:	b21b      	sxth	r3, r3
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	801a      	strh	r2, [r3, #0]
        ptr ->speed_rpm 		= (uint16_t)((data)[2] << 8 | (data)[3]);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	b21a      	sxth	r2, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	3303      	adds	r3, #3
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	b21a      	sxth	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	805a      	strh	r2, [r3, #2]
        ptr ->given_current		= (uint16_t)((data)[4] << 8 | (data)[5]);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	3304      	adds	r3, #4
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	021b      	lsls	r3, r3, #8
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	3305      	adds	r3, #5
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	4313      	orrs	r3, r2
 8000ace:	b21a      	sxth	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	809a      	strh	r2, [r3, #4]
        ptr ->temperature 		= (data)[6];
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	3306      	adds	r3, #6
 8000ad8:	781a      	ldrb	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	719a      	strb	r2, [r3, #6]
    }
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <Enable_CAN2>:
/* ------------------------------ Initialization of CAN, filter Setup）------------------------------ */
void Enable_CAN2(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	@ 0x28
 8000af0:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef CAN_Filter;

    CAN_Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
    CAN_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61fb      	str	r3, [r7, #28]
    CAN_Filter.FilterBank = 14;             // start filters for CAN2 here
 8000afa:	230e      	movs	r3, #14
 8000afc:	617b      	str	r3, [r7, #20]
    CAN_Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
    CAN_Filter.SlaveStartFilterBank = 14;   // 0–13 for CAN1, 14–27 for CAN2
 8000b02:	230e      	movs	r3, #14
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
    CAN_Filter.FilterActivation = CAN_FILTER_ENABLE;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
    CAN_Filter.FilterIdHigh = 0x0000;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
    CAN_Filter.FilterIdLow = 0x0000;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
    CAN_Filter.FilterMaskIdHigh = 0x0000;   // accept all IDs
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
    CAN_Filter.FilterMaskIdLow = 0x0000;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]

    if (HAL_CAN_ConfigFilter(&hcan2, &CAN_Filter) != HAL_OK){
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4812      	ldr	r0, [pc, #72]	@ (8000b68 <Enable_CAN2+0x7c>)
 8000b20:	f000 fd48 	bl	80015b4 <HAL_CAN_ConfigFilter>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <Enable_CAN2+0x42>
        Error_Handler();
 8000b2a:	f7ff ff89 	bl	8000a40 <Error_Handler>
    }
    // 👇 Add this check here
    if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 8000b2e:	480e      	ldr	r0, [pc, #56]	@ (8000b68 <Enable_CAN2+0x7c>)
 8000b30:	f000 fe1e 	bl	8001770 <HAL_CAN_Start>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <Enable_CAN2+0x52>
    	Error_Handler();
 8000b3a:	f7ff ff81 	bl	8000a40 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4809      	ldr	r0, [pc, #36]	@ (8000b68 <Enable_CAN2+0x7c>)
 8000b42:	f001 f84b 	bl	8001bdc <HAL_CAN_ActivateNotification>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <Enable_CAN2+0x64>
    	Error_Handler();
 8000b4c:	f7ff ff78 	bl	8000a40 <Error_Handler>
    }

    HAL_CAN_Start(&hcan2);
 8000b50:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <Enable_CAN2+0x7c>)
 8000b52:	f000 fe0d 	bl	8001770 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b56:	2102      	movs	r1, #2
 8000b58:	4803      	ldr	r0, [pc, #12]	@ (8000b68 <Enable_CAN2+0x7c>)
 8000b5a:	f001 f83f 	bl	8001bdc <HAL_CAN_ActivateNotification>
}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	@ 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000a8 	.word	0x200000a8

08000b6c <Set_GM6020_Voltage>:


/* ------------------------------ 发送函数 ------------------------------ */
void Set_GM6020_Voltage(int16_t q1, int16_t q2, int16_t q3)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	@ 0x30
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
 8000b76:	460b      	mov	r3, r1
 8000b78:	80bb      	strh	r3, [r7, #4]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	807b      	strh	r3, [r7, #2]
    uint8_t TxData[8];
    TxData[0] = (uint8_t)(q1>>8);
 8000b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b82:	121b      	asrs	r3, r3, #8
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    TxData[1] = (uint8_t)q1;
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    TxData[2] = (uint8_t)(q2>>8);
 8000b94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b98:	121b      	asrs	r3, r3, #8
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    TxData[3] = (uint8_t)q2;
 8000ba2:	88bb      	ldrh	r3, [r7, #4]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    TxData[4] = (uint8_t)(q3>>8);
 8000baa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bae:	121b      	asrs	r3, r3, #8
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    TxData[5] = (uint8_t)q3;
 8000bb8:	887b      	ldrh	r3, [r7, #2]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    TxData[6] = (uint8_t)0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    TxData[7] = (uint8_t)0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    CAN_TxHeaderTypeDef TxHeader = {
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	615a      	str	r2, [r3, #20]
 8000bde:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	2308      	movs	r3, #8
 8000be6:	623b      	str	r3, [r7, #32]
            .DLC = 8,
            .IDE = CAN_ID_STD,    // 标准帧
            .RTR = CAN_RTR_DATA,  // 数据帧
            .StdId = 0x2ff
    };
    uint32_t TxBox = CAN_TX_MAILBOX0;
 8000be8:	2301      	movs	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
    if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxBox) != HAL_OK){
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000bf4:	f107 0110 	add.w	r1, r7, #16
 8000bf8:	4807      	ldr	r0, [pc, #28]	@ (8000c18 <Set_GM6020_Voltage+0xac>)
 8000bfa:	f000 fdfd 	bl	80017f8 <HAL_CAN_AddTxMessage>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d005      	beq.n	8000c10 <Set_GM6020_Voltage+0xa4>
        HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);//错误处理
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c0a:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <Set_GM6020_Voltage+0xb0>)
 8000c0c:	f001 fcea 	bl	80025e4 <HAL_GPIO_WritePin>
    }
}
 8000c10:	bf00      	nop
 8000c12:	3730      	adds	r7, #48	@ 0x30
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200000a8 	.word	0x200000a8
 8000c1c:	40021c00 	.word	0x40021c00

08000c20 <motor_index_from_id>:
 * 0x205 --> 4
 * 0x206 --> 5
 * 0x207 --> 6
 * */
static int8_t motor_index_from_id(uint16_t id)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
	switch (id)
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000c30:	2b0a      	cmp	r3, #10
 8000c32:	d825      	bhi.n	8000c80 <motor_index_from_id+0x60>
 8000c34:	a201      	add	r2, pc, #4	@ (adr r2, 8000c3c <motor_index_from_id+0x1c>)
 8000c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3a:	bf00      	nop
 8000c3c:	08000c69 	.word	0x08000c69
 8000c40:	08000c6d 	.word	0x08000c6d
 8000c44:	08000c71 	.word	0x08000c71
 8000c48:	08000c81 	.word	0x08000c81
 8000c4c:	08000c81 	.word	0x08000c81
 8000c50:	08000c81 	.word	0x08000c81
 8000c54:	08000c81 	.word	0x08000c81
 8000c58:	08000c81 	.word	0x08000c81
 8000c5c:	08000c75 	.word	0x08000c75
 8000c60:	08000c79 	.word	0x08000c79
 8000c64:	08000c7d 	.word	0x08000c7d
	{
		case CAN_M2006_M1_ID: return 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e00b      	b.n	8000c84 <motor_index_from_id+0x64>
		case CAN_M2006_M2_ID: return 1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e009      	b.n	8000c84 <motor_index_from_id+0x64>
		case CAN_M2006_M3_ID: return 2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	e007      	b.n	8000c84 <motor_index_from_id+0x64>
		case CAN_GM6020_M5_ID: return 3;
 8000c74:	2303      	movs	r3, #3
 8000c76:	e005      	b.n	8000c84 <motor_index_from_id+0x64>
		case CAN_GM6020_M6_ID: return 4;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	e003      	b.n	8000c84 <motor_index_from_id+0x64>
		case CAN_GM6020_M7_ID: return 5;
 8000c7c:	2305      	movs	r3, #5
 8000c7e:	e001      	b.n	8000c84 <motor_index_from_id+0x64>

		default: return -1; //safety, filters any noise
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <HAL_CAN_RxFifo0MsgPendingCallback>:
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
}
*/

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	@ 0x30
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];

    HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);  // 👈 Debug indicator
 8000c98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c9c:	4823      	ldr	r0, [pc, #140]	@ (8000d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000c9e:	f001 fcba 	bl	8002616 <HAL_GPIO_TogglePin>

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	f107 0210 	add.w	r2, r7, #16
 8000caa:	2100      	movs	r1, #0
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f000 fe73 	bl	8001998 <HAL_CAN_GetRxMessage>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d135      	bne.n	8000d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
    {
        HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);  // 👈 Debug indicator
 8000cb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cbc:	481b      	ldr	r0, [pc, #108]	@ (8000d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000cbe:	f001 fcaa 	bl	8002616 <HAL_GPIO_TogglePin>

        int8_t idx = motor_index_from_id(rx_header.StdId);
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ffaa 	bl	8000c20 <motor_index_from_id>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (idx >= 0)
 8000cd2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db24      	blt.n	8000d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
        {
            get_motor_measure(&all_motors[idx], rx_data);
 8000cda:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	4a13      	ldr	r2, [pc, #76]	@ (8000d30 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000ce2:	4413      	add	r3, r2
 8000ce4:	f107 0208 	add.w	r2, r7, #8
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff febe 	bl	8000a6c <get_motor_measure>
            all_motors[idx].angle_deg = (all_motors[idx].ecd / 8192.0f) * 360.0f;
 8000cf0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000cf4:	4a0e      	ldr	r2, [pc, #56]	@ (8000d30 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000cf6:	011b      	lsls	r3, r3, #4
 8000cf8:	4413      	add	r3, r2
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	ee07 3a90 	vmov	s15, r3
 8000d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d04:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8000d34 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
 8000d08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000d10:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000d38 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d18:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000d1a:	011b      	lsls	r3, r3, #4
 8000d1c:	4413      	add	r3, r2
 8000d1e:	330c      	adds	r3, #12
 8000d20:	edc3 7a00 	vstr	s15, [r3]
        }
    }
}
 8000d24:	bf00      	nop
 8000d26:	3730      	adds	r7, #48	@ 0x30
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021c00 	.word	0x40021c00
 8000d30:	200000d8 	.word	0x200000d8
 8000d34:	46000000 	.word	0x46000000
 8000d38:	43b40000 	.word	0x43b40000

08000d3c <pid_init>:
void pid_init(PID_t *pid,
              float Kp, float Ki, float Kd,
              float out_min, float out_max,
              float integ_min, float integ_max,
              float I_deadband)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b08b      	sub	sp, #44	@ 0x2c
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6278      	str	r0, [r7, #36]	@ 0x24
 8000d44:	ed87 0a08 	vstr	s0, [r7, #32]
 8000d48:	edc7 0a07 	vstr	s1, [r7, #28]
 8000d4c:	ed87 1a06 	vstr	s2, [r7, #24]
 8000d50:	edc7 1a05 	vstr	s3, [r7, #20]
 8000d54:	ed87 2a04 	vstr	s4, [r7, #16]
 8000d58:	edc7 2a03 	vstr	s5, [r7, #12]
 8000d5c:	ed87 3a02 	vstr	s6, [r7, #8]
 8000d60:	edc7 3a01 	vstr	s7, [r7, #4]
    pid->Kp = Kp;
 8000d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d66:	6a3a      	ldr	r2, [r7, #32]
 8000d68:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6c:	69fa      	ldr	r2, [r7, #28]
 8000d6e:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8000d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	609a      	str	r2, [r3, #8]

    pid->integrator = 0.0f;
 8000d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d78:	f04f 0200 	mov.w	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0.0f;
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d80:	f04f 0200 	mov.w	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
    pid->prev_measurement = 0.0f;
 8000d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]

    pid->out_min = out_min;
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	619a      	str	r2, [r3, #24]
    pid->out_max = out_max;
 8000d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	61da      	str	r2, [r3, #28]

    pid->integ_min = integ_min;
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	621a      	str	r2, [r3, #32]
    pid->integ_max = integ_max;
 8000da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	625a      	str	r2, [r3, #36]	@ 0x24

    pid->I_deadband = I_deadband;
 8000da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dac:	bf00      	nop
 8000dae:	372c      	adds	r7, #44	@ 0x2c
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <clampf>:

float clampf(float value, float min_val, float max_val)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000dc2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000dc6:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value > max_val) return max_val;
 8000dca:	ed97 7a03 	vldr	s14, [r7, #12]
 8000dce:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dda:	dd01      	ble.n	8000de0 <clampf+0x28>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	e00b      	b.n	8000df8 <clampf+0x40>
    if (value < min_val) return min_val;
 8000de0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000de4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000de8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df0:	d501      	bpl.n	8000df6 <clampf+0x3e>
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	e000      	b.n	8000df8 <clampf+0x40>
    return value;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <pid_update>:

float pid_update(PID_t *pid, float setpoint, float measurement, float dt)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e18:	edc7 0a01 	vstr	s1, [r7, #4]
 8000e1c:	ed87 1a00 	vstr	s2, [r7]
	if (fabs(setpoint - measurement) > 180.0) {
 8000e20:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e24:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e2c:	eef0 7ae7 	vabs.f32	s15, s15
 8000e30:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8000fa4 <pid_update+0x198>
 8000e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3c:	dd24      	ble.n	8000e88 <pid_update+0x7c>
		if (setpoint > measurement) {
 8000e3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e42:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4e:	dd0d      	ble.n	8000e6c <pid_update+0x60>
			error = (setpoint - measurement) - 360;
 8000e50:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e54:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e5c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8000fa8 <pid_update+0x19c>
 8000e60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e64:	4b51      	ldr	r3, [pc, #324]	@ (8000fac <pid_update+0x1a0>)
 8000e66:	edc3 7a00 	vstr	s15, [r3]
 8000e6a:	e016      	b.n	8000e9a <pid_update+0x8e>
		}else{
			error = (setpoint - measurement) + 360;
 8000e6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e78:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8000fa8 <pid_update+0x19c>
 8000e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e80:	4b4a      	ldr	r3, [pc, #296]	@ (8000fac <pid_update+0x1a0>)
 8000e82:	edc3 7a00 	vstr	s15, [r3]
 8000e86:	e008      	b.n	8000e9a <pid_update+0x8e>
		}
	}else{
		error = setpoint - measurement;
 8000e88:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e94:	4b45      	ldr	r3, [pc, #276]	@ (8000fac <pid_update+0x1a0>)
 8000e96:	edc3 7a00 	vstr	s15, [r3]
	}

    // Proportional
    float P_out = pid->Kp * error;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	ed93 7a00 	vldr	s14, [r3]
 8000ea0:	4b42      	ldr	r3, [pc, #264]	@ (8000fac <pid_update+0x1a0>)
 8000ea2:	edd3 7a00 	vldr	s15, [r3]
 8000ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eaa:	edc7 7a07 	vstr	s15, [r7, #28]

    // Integral with deadband
    if (fabsf(error) < pid->I_deadband) {
 8000eae:	4b3f      	ldr	r3, [pc, #252]	@ (8000fac <pid_update+0x1a0>)
 8000eb0:	edd3 7a00 	vldr	s15, [r3]
 8000eb4:	eeb0 7ae7 	vabs.f32	s14, s15
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000ebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec6:	d529      	bpl.n	8000f1c <pid_update+0x110>
        pid->integrator += pid->Ki * error * dt;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ece:	4b37      	ldr	r3, [pc, #220]	@ (8000fac <pid_update+0x1a0>)
 8000ed0:	edd3 7a00 	vldr	s15, [r3]
 8000ed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ed8:	edd7 7a00 	vldr	s15, [r7]
 8000edc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	edc3 7a03 	vstr	s15, [r3, #12]
        pid->integrator = clampf(pid->integrator, pid->integ_min, pid->integ_max);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	ed93 7a08 	vldr	s14, [r3, #32]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8000f02:	eeb0 1a66 	vmov.f32	s2, s13
 8000f06:	eef0 0a47 	vmov.f32	s1, s14
 8000f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0e:	f7ff ff53 	bl	8000db8 <clampf>
 8000f12:	eef0 7a40 	vmov.f32	s15, s0
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    // Derivative on measurement
    float derivative = (measurement - pid->prev_measurement) / dt;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f22:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f26:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f2a:	ed97 7a00 	vldr	s14, [r7]
 8000f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f32:	edc7 7a06 	vstr	s15, [r7, #24]
    float D_out = -pid->Kd * derivative;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f3c:	eef1 7a67 	vneg.f32	s15, s15
 8000f40:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f48:	edc7 7a05 	vstr	s15, [r7, #20]

    float output = P_out + pid->integrator + D_out;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f52:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f62:	edc7 7a04 	vstr	s15, [r7, #16]

    // Clamp total output
    output = clampf(output, pid->out_min, pid->out_max);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	ed93 7a07 	vldr	s14, [r3, #28]
 8000f72:	eeb0 1a47 	vmov.f32	s2, s14
 8000f76:	eef0 0a67 	vmov.f32	s1, s15
 8000f7a:	ed97 0a04 	vldr	s0, [r7, #16]
 8000f7e:	f7ff ff1b 	bl	8000db8 <clampf>
 8000f82:	ed87 0a04 	vstr	s0, [r7, #16]

    // Save for next iteration
    pid->prev_error = error;
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <pid_update+0x1a0>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
    pid->prev_measurement = measurement;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	615a      	str	r2, [r3, #20]

    return output;
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	ee07 3a90 	vmov	s15, r3
}
 8000f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	43340000 	.word	0x43340000
 8000fa8:	43b40000 	.word	0x43b40000
 8000fac:	20000138 	.word	0x20000138

08000fb0 <voltage_to_can>:

int16_t voltage_to_can(float demand)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	ed87 0a01 	vstr	s0, [r7, #4]
    // demand expected in [-1, 1], scale to [-25000, 25000]
    if (demand > 1.0f) demand = 1.0f;
 8000fba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fca:	dd02      	ble.n	8000fd2 <voltage_to_can+0x22>
 8000fcc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000fd0:	607b      	str	r3, [r7, #4]
    if (demand < -1.0f) demand = -1.0f;
 8000fd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8000fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe2:	d501      	bpl.n	8000fe8 <voltage_to_can+0x38>
 8000fe4:	4b09      	ldr	r3, [pc, #36]	@ (800100c <voltage_to_can+0x5c>)
 8000fe6:	607b      	str	r3, [r7, #4]

    return (int16_t)(demand * 25000.0f);
 8000fe8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fec:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001010 <voltage_to_can+0x60>
 8000ff0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff8:	ee17 3a90 	vmov	r3, s15
 8000ffc:	b21b      	sxth	r3, r3
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	bf800000 	.word	0xbf800000
 8001010:	46c35000 	.word	0x46c35000

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <HAL_MspInit+0x4c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	4a0f      	ldr	r2, [pc, #60]	@ (8001060 <HAL_MspInit+0x4c>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001028:	6453      	str	r3, [r2, #68]	@ 0x44
 800102a:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <HAL_MspInit+0x4c>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <HAL_MspInit+0x4c>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	4a08      	ldr	r2, [pc, #32]	@ (8001060 <HAL_MspInit+0x4c>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	@ 0x40
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_MspInit+0x4c>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <NMI_Handler+0x4>

0800106c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <MemManage_Handler+0x4>

0800107c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <UsageFault_Handler+0x4>

0800108c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ba:	f000 f93b 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <CAN1_RX0_IRQHandler+0x10>)
 80010ca:	f000 fdad 	bl	8001c28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000080 	.word	0x20000080

080010d8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80010dc:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <CAN2_RX0_IRQHandler+0x10>)
 80010de:	f000 fda3 	bl	8001c28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200000a8 	.word	0x200000a8

080010ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <SystemInit+0x20>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f6:	4a05      	ldr	r2, [pc, #20]	@ (800110c <SystemInit+0x20>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <get_dt>:
#include "timebase.h"

static uint32_t last_tick = 0;

float get_dt(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	uint32_t now = HAL_GetTick();
 8001116:	f000 f921 	bl	800135c <HAL_GetTick>
 800111a:	6078      	str	r0, [r7, #4]
	float dt = (now - last_tick) / 1000.0f;
 800111c:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <get_dt+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	ee07 3a90 	vmov	s15, r3
 8001128:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800112c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001154 <get_dt+0x44>
 8001130:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001134:	edc7 7a00 	vstr	s15, [r7]
	last_tick = now;
 8001138:	4a05      	ldr	r2, [pc, #20]	@ (8001150 <get_dt+0x40>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
	return dt;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	ee07 3a90 	vmov	s15, r3
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000013c 	.word	0x2000013c
 8001154:	447a0000 	.word	0x447a0000

08001158 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <MX_USART3_UART_Init+0x4c>)
 800115e:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <MX_USART3_UART_Init+0x50>)
 8001160:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <MX_USART3_UART_Init+0x4c>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <MX_USART3_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_USART3_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <MX_USART3_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <MX_USART3_UART_Init+0x4c>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <MX_USART3_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_USART3_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <MX_USART3_UART_Init+0x4c>)
 8001190:	f001 feb4 	bl	8002efc <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800119a:	f7ff fc51 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000140 	.word	0x20000140
 80011a8:	40004800 	.word	0x40004800

080011ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a19      	ldr	r2, [pc, #100]	@ (8001230 <HAL_UART_MspInit+0x84>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d12c      	bne.n	8001228 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a10      	ldr	r2, [pc, #64]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001206:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800120a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001218:	2307      	movs	r3, #7
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4805      	ldr	r0, [pc, #20]	@ (8001238 <HAL_UART_MspInit+0x8c>)
 8001224:	f001 f842 	bl	80022ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	@ 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40004800 	.word	0x40004800
 8001234:	40023800 	.word	0x40023800
 8001238:	40020800 	.word	0x40020800

0800123c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800123c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001274 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001240:	f7ff ff54 	bl	80010ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001244:	480c      	ldr	r0, [pc, #48]	@ (8001278 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001246:	490d      	ldr	r1, [pc, #52]	@ (800127c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001248:	4a0d      	ldr	r2, [pc, #52]	@ (8001280 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800125c:	4c0a      	ldr	r4, [pc, #40]	@ (8001288 <LoopFillZerobss+0x22>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126a:	f002 f913 	bl	8003494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126e:	f7ff fb37 	bl	80008e0 <main>
  bx  lr    
 8001272:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001274:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001280:	0800351c 	.word	0x0800351c
  ldr r2, =_sbss
 8001284:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001288:	2000018c 	.word	0x2000018c

0800128c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC_IRQHandler>
	...

08001290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001294:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <HAL_Init+0x40>)
 800129a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800129e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a0:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <HAL_Init+0x40>)
 80012a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a07      	ldr	r2, [pc, #28]	@ (80012d0 <HAL_Init+0x40>)
 80012b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b8:	2003      	movs	r0, #3
 80012ba:	f000 ffb5 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012be:	200f      	movs	r0, #15
 80012c0:	f000 f808 	bl	80012d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c4:	f7ff fea6 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023c00 	.word	0x40023c00

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <HAL_InitTick+0x54>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b12      	ldr	r3, [pc, #72]	@ (800132c <HAL_InitTick+0x58>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 ffcd 	bl	8002292 <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e00e      	b.n	8001320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d80a      	bhi.n	800131e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f000 ff95 	bl	800223e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001314:	4a06      	ldr	r2, [pc, #24]	@ (8001330 <HAL_InitTick+0x5c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000000 	.word	0x20000000
 800132c:	20000008 	.word	0x20000008
 8001330:	20000004 	.word	0x20000004

08001334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_IncTick+0x20>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_IncTick+0x24>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	4a04      	ldr	r2, [pc, #16]	@ (8001358 <HAL_IncTick+0x24>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000008 	.word	0x20000008
 8001358:	20000188 	.word	0x20000188

0800135c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <HAL_GetTick+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000188 	.word	0x20000188

08001374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff ffee 	bl	800135c <HAL_GetTick>
 8001380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138c:	d005      	beq.n	800139a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138e:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <HAL_Delay+0x44>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800139a:	bf00      	nop
 800139c:	f7ff ffde 	bl	800135c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d8f7      	bhi.n	800139c <HAL_Delay+0x28>
  {
  }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000008 	.word	0x20000008

080013bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e0ed      	b.n	80015aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff f962 	bl	80006a4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0201 	orr.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f0:	f7ff ffb4 	bl	800135c <HAL_GetTick>
 80013f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013f6:	e012      	b.n	800141e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013f8:	f7ff ffb0 	bl	800135c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b0a      	cmp	r3, #10
 8001404:	d90b      	bls.n	800141e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2205      	movs	r2, #5
 8001416:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e0c5      	b.n	80015aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0e5      	beq.n	80013f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0202 	bic.w	r2, r2, #2
 800143a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800143c:	f7ff ff8e 	bl	800135c <HAL_GetTick>
 8001440:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001442:	e012      	b.n	800146a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001444:	f7ff ff8a 	bl	800135c <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b0a      	cmp	r3, #10
 8001450:	d90b      	bls.n	800146a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001456:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2205      	movs	r2, #5
 8001462:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e09f      	b.n	80015aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1e5      	bne.n	8001444 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7e1b      	ldrb	r3, [r3, #24]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d108      	bne.n	8001492 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	e007      	b.n	80014a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	7e5b      	ldrb	r3, [r3, #25]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d108      	bne.n	80014bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	e007      	b.n	80014cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7e9b      	ldrb	r3, [r3, #26]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d108      	bne.n	80014e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0220 	orr.w	r2, r2, #32
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	e007      	b.n	80014f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0220 	bic.w	r2, r2, #32
 80014f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7edb      	ldrb	r3, [r3, #27]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d108      	bne.n	8001510 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0210 	bic.w	r2, r2, #16
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	e007      	b.n	8001520 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0210 	orr.w	r2, r2, #16
 800151e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7f1b      	ldrb	r3, [r3, #28]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d108      	bne.n	800153a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0208 	orr.w	r2, r2, #8
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e007      	b.n	800154a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0208 	bic.w	r2, r2, #8
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7f5b      	ldrb	r3, [r3, #29]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d108      	bne.n	8001564 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0204 	orr.w	r2, r2, #4
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	e007      	b.n	8001574 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0204 	bic.w	r2, r2, #4
 8001572:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	ea42 0103 	orr.w	r1, r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	1e5a      	subs	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d003      	beq.n	80015d4 <HAL_CAN_ConfigFilter+0x20>
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	f040 80be 	bne.w	8001750 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80015d4:	4b65      	ldr	r3, [pc, #404]	@ (800176c <HAL_CAN_ConfigFilter+0x1b8>)
 80015d6:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015de:	f043 0201 	orr.w	r2, r3, #1
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015ee:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	431a      	orrs	r2, r3
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	f003 031f 	and.w	r3, r3, #31
 8001614:	2201      	movs	r2, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43db      	mvns	r3, r3
 8001626:	401a      	ands	r2, r3
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d123      	bne.n	800167e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	43db      	mvns	r3, r3
 8001640:	401a      	ands	r2, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001658:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	3248      	adds	r2, #72	@ 0x48
 800165e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001672:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001674:	6939      	ldr	r1, [r7, #16]
 8001676:	3348      	adds	r3, #72	@ 0x48
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d122      	bne.n	80016cc <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	431a      	orrs	r2, r3
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	3248      	adds	r2, #72	@ 0x48
 80016ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016c2:	6939      	ldr	r1, [r7, #16]
 80016c4:	3348      	adds	r3, #72	@ 0x48
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d109      	bne.n	80016e8 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	43db      	mvns	r3, r3
 80016de:	401a      	ands	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80016e6:	e007      	b.n	80016f8 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d109      	bne.n	8001714 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43db      	mvns	r3, r3
 800170a:	401a      	ands	r2, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001712:	e007      	b.n	8001724 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	431a      	orrs	r2, r3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d107      	bne.n	800173c <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	431a      	orrs	r2, r3
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001742:	f023 0201 	bic.w	r2, r3, #1
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	e006      	b.n	800175e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001754:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
  }
}
 800175e:	4618      	mov	r0, r3
 8001760:	371c      	adds	r7, #28
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40006400 	.word	0x40006400

08001770 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b01      	cmp	r3, #1
 8001782:	d12e      	bne.n	80017e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2202      	movs	r2, #2
 8001788:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0201 	bic.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800179c:	f7ff fdde 	bl	800135c <HAL_GetTick>
 80017a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017a2:	e012      	b.n	80017ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017a4:	f7ff fdda 	bl	800135c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b0a      	cmp	r3, #10
 80017b0:	d90b      	bls.n	80017ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2205      	movs	r2, #5
 80017c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e012      	b.n	80017f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1e5      	bne.n	80017a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e006      	b.n	80017f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
  }
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	@ 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001816:	7ffb      	ldrb	r3, [r7, #31]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d003      	beq.n	8001824 <HAL_CAN_AddTxMessage+0x2c>
 800181c:	7ffb      	ldrb	r3, [r7, #31]
 800181e:	2b02      	cmp	r3, #2
 8001820:	f040 80ad 	bne.w	800197e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10a      	bne.n	8001844 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001834:	2b00      	cmp	r3, #0
 8001836:	d105      	bne.n	8001844 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8095 	beq.w	800196e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	0e1b      	lsrs	r3, r3, #24
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800184e:	2201      	movs	r2, #1
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10d      	bne.n	800187c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800186a:	68f9      	ldr	r1, [r7, #12]
 800186c:	6809      	ldr	r1, [r1, #0]
 800186e:	431a      	orrs	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3318      	adds	r3, #24
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	440b      	add	r3, r1
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	e00f      	b.n	800189c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001886:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800188c:	68f9      	ldr	r1, [r7, #12]
 800188e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001890:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3318      	adds	r3, #24
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	440b      	add	r3, r1
 800189a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6819      	ldr	r1, [r3, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	691a      	ldr	r2, [r3, #16]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3318      	adds	r3, #24
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	440b      	add	r3, r1
 80018ac:	3304      	adds	r3, #4
 80018ae:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	7d1b      	ldrb	r3, [r3, #20]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d111      	bne.n	80018dc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	3318      	adds	r3, #24
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	4413      	add	r3, r2
 80018c4:	3304      	adds	r3, #4
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	6811      	ldr	r1, [r2, #0]
 80018cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3318      	adds	r3, #24
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	440b      	add	r3, r1
 80018d8:	3304      	adds	r3, #4
 80018da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3307      	adds	r3, #7
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	061a      	lsls	r2, r3, #24
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3306      	adds	r3, #6
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	041b      	lsls	r3, r3, #16
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3305      	adds	r3, #5
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	4313      	orrs	r3, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	3204      	adds	r2, #4
 80018fc:	7812      	ldrb	r2, [r2, #0]
 80018fe:	4610      	mov	r0, r2
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	6811      	ldr	r1, [r2, #0]
 8001904:	ea43 0200 	orr.w	r2, r3, r0
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	011b      	lsls	r3, r3, #4
 800190c:	440b      	add	r3, r1
 800190e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001912:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3303      	adds	r3, #3
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	061a      	lsls	r2, r3, #24
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3302      	adds	r3, #2
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	041b      	lsls	r3, r3, #16
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3301      	adds	r3, #1
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	4313      	orrs	r3, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	7812      	ldrb	r2, [r2, #0]
 8001934:	4610      	mov	r0, r2
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	6811      	ldr	r1, [r2, #0]
 800193a:	ea43 0200 	orr.w	r2, r3, r0
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	440b      	add	r3, r1
 8001944:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001948:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3318      	adds	r3, #24
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	4413      	add	r3, r2
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	6811      	ldr	r1, [r2, #0]
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3318      	adds	r3, #24
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	440b      	add	r3, r1
 8001968:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e00e      	b.n	800198c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e006      	b.n	800198c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001982:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
  }
}
 800198c:	4618      	mov	r0, r3
 800198e:	3724      	adds	r7, #36	@ 0x24
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d003      	beq.n	80019bc <HAL_CAN_GetRxMessage+0x24>
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	f040 8103 	bne.w	8001bc2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10e      	bne.n	80019e0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d116      	bne.n	80019fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0f7      	b.n	8001bd0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d107      	bne.n	80019fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0e8      	b.n	8001bd0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	331b      	adds	r3, #27
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	4413      	add	r3, r2
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0204 	and.w	r2, r3, #4
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10c      	bne.n	8001a36 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	331b      	adds	r3, #27
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	4413      	add	r3, r2
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0d5b      	lsrs	r3, r3, #21
 8001a2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	e00b      	b.n	8001a4e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	331b      	adds	r3, #27
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	4413      	add	r3, r2
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	08db      	lsrs	r3, r3, #3
 8001a46:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	331b      	adds	r3, #27
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	4413      	add	r3, r2
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0202 	and.w	r2, r3, #2
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	331b      	adds	r3, #27
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	4413      	add	r3, r2
 8001a70:	3304      	adds	r3, #4
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2208      	movs	r2, #8
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	e00b      	b.n	8001a9c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	331b      	adds	r3, #27
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	4413      	add	r3, r2
 8001a90:	3304      	adds	r3, #4
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 020f 	and.w	r2, r3, #15
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	331b      	adds	r3, #27
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	331b      	adds	r3, #27
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	4413      	add	r3, r2
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	0c1b      	lsrs	r3, r3, #16
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	4413      	add	r3, r2
 8001aec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	0a1a      	lsrs	r2, r3, #8
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	3301      	adds	r3, #1
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0c1a      	lsrs	r2, r3, #16
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	3302      	adds	r3, #2
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	4413      	add	r3, r2
 8001b20:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	0e1a      	lsrs	r2, r3, #24
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	3303      	adds	r3, #3
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	3304      	adds	r3, #4
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	4413      	add	r3, r2
 8001b52:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0a1a      	lsrs	r2, r3, #8
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	3305      	adds	r3, #5
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	0c1a      	lsrs	r2, r3, #16
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	3306      	adds	r3, #6
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	4413      	add	r3, r2
 8001b86:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	0e1a      	lsrs	r2, r3, #24
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	3307      	adds	r3, #7
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d108      	bne.n	8001bae <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0220 	orr.w	r2, r2, #32
 8001baa:	60da      	str	r2, [r3, #12]
 8001bac:	e007      	b.n	8001bbe <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0220 	orr.w	r2, r2, #32
 8001bbc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e006      	b.n	8001bd0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
  }
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bec:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d002      	beq.n	8001bfa <HAL_CAN_ActivateNotification+0x1e>
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d109      	bne.n	8001c0e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6959      	ldr	r1, [r3, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e006      	b.n	8001c1c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
  }
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	@ 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d07c      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d023      	beq.n	8001cc0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f983 	bl	8001f96 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c90:	e016      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ca4:	e00c      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d004      	beq.n	8001cba <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb8:	e002      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f989 	bl	8001fd2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d024      	beq.n	8001d14 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cd2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f963 	bl	8001faa <HAL_CAN_TxMailbox1CompleteCallback>
 8001ce4:	e016      	b.n	8001d14 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d004      	beq.n	8001cfa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf8:	e00c      	b.n	8001d14 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d0c:	e002      	b.n	8001d14 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f969 	bl	8001fe6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d024      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f943 	bl	8001fbe <HAL_CAN_TxMailbox2CompleteCallback>
 8001d38:	e016      	b.n	8001d68 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d004      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4c:	e00c      	b.n	8001d68 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d60:	e002      	b.n	8001d68 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f949 	bl	8001ffa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00c      	beq.n	8001d8c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2210      	movs	r2, #16
 8001d8a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d006      	beq.n	8001dae <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2208      	movs	r2, #8
 8001da6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f930 	bl	800200e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d009      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7fe ff62 	bl	8000c90 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00c      	beq.n	8001df0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d007      	beq.n	8001df0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2210      	movs	r2, #16
 8001dee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	f003 0320 	and.w	r3, r3, #32
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d006      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2208      	movs	r2, #8
 8001e0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f912 	bl	8002036 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d009      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8f9 	bl	8002022 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2210      	movs	r2, #16
 8001e4a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f8fc 	bl	800204a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00b      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f8f5 	bl	800205e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d07b      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d072      	beq.n	8001f6e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d008      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	f043 0302 	orr.w	r3, r3, #2
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d043      	beq.n	8001f6e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d03e      	beq.n	8001f6e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ef6:	2b60      	cmp	r3, #96	@ 0x60
 8001ef8:	d02b      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x32a>
 8001efa:	2b60      	cmp	r3, #96	@ 0x60
 8001efc:	d82e      	bhi.n	8001f5c <HAL_CAN_IRQHandler+0x334>
 8001efe:	2b50      	cmp	r3, #80	@ 0x50
 8001f00:	d022      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x320>
 8001f02:	2b50      	cmp	r3, #80	@ 0x50
 8001f04:	d82a      	bhi.n	8001f5c <HAL_CAN_IRQHandler+0x334>
 8001f06:	2b40      	cmp	r3, #64	@ 0x40
 8001f08:	d019      	beq.n	8001f3e <HAL_CAN_IRQHandler+0x316>
 8001f0a:	2b40      	cmp	r3, #64	@ 0x40
 8001f0c:	d826      	bhi.n	8001f5c <HAL_CAN_IRQHandler+0x334>
 8001f0e:	2b30      	cmp	r3, #48	@ 0x30
 8001f10:	d010      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x30c>
 8001f12:	2b30      	cmp	r3, #48	@ 0x30
 8001f14:	d822      	bhi.n	8001f5c <HAL_CAN_IRQHandler+0x334>
 8001f16:	2b10      	cmp	r3, #16
 8001f18:	d002      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x2f8>
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d005      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f1e:	e01d      	b.n	8001f5c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f22:	f043 0308 	orr.w	r3, r3, #8
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f28:	e019      	b.n	8001f5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	f043 0310 	orr.w	r3, r3, #16
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f32:	e014      	b.n	8001f5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	f043 0320 	orr.w	r3, r3, #32
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f3c:	e00f      	b.n	8001f5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f46:	e00a      	b.n	8001f5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f50:	e005      	b.n	8001f5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f5a:	e000      	b.n	8001f5e <HAL_CAN_IRQHandler+0x336>
            break;
 8001f5c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001f6c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2204      	movs	r2, #4
 8001f74:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f872 	bl	8002072 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f8e:	bf00      	nop
 8001f90:	3728      	adds	r7, #40	@ 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002098:	4b0c      	ldr	r3, [pc, #48]	@ (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020a4:	4013      	ands	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ba:	4a04      	ldr	r2, [pc, #16]	@ (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	60d3      	str	r3, [r2, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d4:	4b04      	ldr	r3, [pc, #16]	@ (80020e8 <__NVIC_GetPriorityGrouping+0x18>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	f003 0307 	and.w	r3, r3, #7
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	db0b      	blt.n	8002116 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	4907      	ldr	r1, [pc, #28]	@ (8002124 <__NVIC_EnableIRQ+0x38>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2001      	movs	r0, #1
 800210e:	fa00 f202 	lsl.w	r2, r0, r2
 8002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000e100 	.word	0xe000e100

08002128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	db0a      	blt.n	8002152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	490c      	ldr	r1, [pc, #48]	@ (8002174 <__NVIC_SetPriority+0x4c>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	440b      	add	r3, r1
 800214c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002150:	e00a      	b.n	8002168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4908      	ldr	r1, [pc, #32]	@ (8002178 <__NVIC_SetPriority+0x50>)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	3b04      	subs	r3, #4
 8002160:	0112      	lsls	r2, r2, #4
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	440b      	add	r3, r1
 8002166:	761a      	strb	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000e100 	.word	0xe000e100
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	@ 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f1c3 0307 	rsb	r3, r3, #7
 8002196:	2b04      	cmp	r3, #4
 8002198:	bf28      	it	cs
 800219a:	2304      	movcs	r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d902      	bls.n	80021ac <NVIC_EncodePriority+0x30>
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3b03      	subs	r3, #3
 80021aa:	e000      	b.n	80021ae <NVIC_EncodePriority+0x32>
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	f04f 32ff 	mov.w	r2, #4294967295
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	401a      	ands	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c4:	f04f 31ff 	mov.w	r1, #4294967295
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43d9      	mvns	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	4313      	orrs	r3, r2
         );
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3724      	adds	r7, #36	@ 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021f4:	d301      	bcc.n	80021fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00f      	b.n	800221a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002224 <SysTick_Config+0x40>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002202:	210f      	movs	r1, #15
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	f7ff ff8e 	bl	8002128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800220c:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <SysTick_Config+0x40>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002212:	4b04      	ldr	r3, [pc, #16]	@ (8002224 <SysTick_Config+0x40>)
 8002214:	2207      	movs	r2, #7
 8002216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	e000e010 	.word	0xe000e010

08002228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff29 	bl	8002088 <__NVIC_SetPriorityGrouping>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002250:	f7ff ff3e 	bl	80020d0 <__NVIC_GetPriorityGrouping>
 8002254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f7ff ff8e 	bl	800217c <NVIC_EncodePriority>
 8002260:	4602      	mov	r2, r0
 8002262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff5d 	bl	8002128 <__NVIC_SetPriority>
}
 800226e:	bf00      	nop
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff31 	bl	80020ec <__NVIC_EnableIRQ>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ffa2 	bl	80021e4 <SysTick_Config>
 80022a0:	4603      	mov	r3, r0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	@ 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	e16b      	b.n	80025a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022c8:	2201      	movs	r2, #1
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	f040 815a 	bne.w	800259a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d005      	beq.n	80022fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d130      	bne.n	8002360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002334:	2201      	movs	r2, #1
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 0201 	and.w	r2, r3, #1
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	2b03      	cmp	r3, #3
 800236a:	d017      	beq.n	800239c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	2203      	movs	r2, #3
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d123      	bne.n	80023f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	08da      	lsrs	r2, r3, #3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3208      	adds	r2, #8
 80023b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	220f      	movs	r2, #15
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	08da      	lsrs	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3208      	adds	r2, #8
 80023ea:	69b9      	ldr	r1, [r7, #24]
 80023ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0203 	and.w	r2, r3, #3
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80b4 	beq.w	800259a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	4b60      	ldr	r3, [pc, #384]	@ (80025b8 <HAL_GPIO_Init+0x30c>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	4a5f      	ldr	r2, [pc, #380]	@ (80025b8 <HAL_GPIO_Init+0x30c>)
 800243c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002440:	6453      	str	r3, [r2, #68]	@ 0x44
 8002442:	4b5d      	ldr	r3, [pc, #372]	@ (80025b8 <HAL_GPIO_Init+0x30c>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800244e:	4a5b      	ldr	r2, [pc, #364]	@ (80025bc <HAL_GPIO_Init+0x310>)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3302      	adds	r3, #2
 8002456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	220f      	movs	r2, #15
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a52      	ldr	r2, [pc, #328]	@ (80025c0 <HAL_GPIO_Init+0x314>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d02b      	beq.n	80024d2 <HAL_GPIO_Init+0x226>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a51      	ldr	r2, [pc, #324]	@ (80025c4 <HAL_GPIO_Init+0x318>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d025      	beq.n	80024ce <HAL_GPIO_Init+0x222>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a50      	ldr	r2, [pc, #320]	@ (80025c8 <HAL_GPIO_Init+0x31c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01f      	beq.n	80024ca <HAL_GPIO_Init+0x21e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4f      	ldr	r2, [pc, #316]	@ (80025cc <HAL_GPIO_Init+0x320>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d019      	beq.n	80024c6 <HAL_GPIO_Init+0x21a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4e      	ldr	r2, [pc, #312]	@ (80025d0 <HAL_GPIO_Init+0x324>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d013      	beq.n	80024c2 <HAL_GPIO_Init+0x216>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4d      	ldr	r2, [pc, #308]	@ (80025d4 <HAL_GPIO_Init+0x328>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00d      	beq.n	80024be <HAL_GPIO_Init+0x212>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4c      	ldr	r2, [pc, #304]	@ (80025d8 <HAL_GPIO_Init+0x32c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <HAL_GPIO_Init+0x20e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4b      	ldr	r2, [pc, #300]	@ (80025dc <HAL_GPIO_Init+0x330>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <HAL_GPIO_Init+0x20a>
 80024b2:	2307      	movs	r3, #7
 80024b4:	e00e      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024b6:	2308      	movs	r3, #8
 80024b8:	e00c      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024ba:	2306      	movs	r3, #6
 80024bc:	e00a      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024be:	2305      	movs	r3, #5
 80024c0:	e008      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024c2:	2304      	movs	r3, #4
 80024c4:	e006      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024c6:	2303      	movs	r3, #3
 80024c8:	e004      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e002      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024d2:	2300      	movs	r3, #0
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	f002 0203 	and.w	r2, r2, #3
 80024da:	0092      	lsls	r2, r2, #2
 80024dc:	4093      	lsls	r3, r2
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e4:	4935      	ldr	r1, [pc, #212]	@ (80025bc <HAL_GPIO_Init+0x310>)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	3302      	adds	r3, #2
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024f2:	4b3b      	ldr	r3, [pc, #236]	@ (80025e0 <HAL_GPIO_Init+0x334>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002516:	4a32      	ldr	r2, [pc, #200]	@ (80025e0 <HAL_GPIO_Init+0x334>)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800251c:	4b30      	ldr	r3, [pc, #192]	@ (80025e0 <HAL_GPIO_Init+0x334>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002540:	4a27      	ldr	r2, [pc, #156]	@ (80025e0 <HAL_GPIO_Init+0x334>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002546:	4b26      	ldr	r3, [pc, #152]	@ (80025e0 <HAL_GPIO_Init+0x334>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800256a:	4a1d      	ldr	r2, [pc, #116]	@ (80025e0 <HAL_GPIO_Init+0x334>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002570:	4b1b      	ldr	r3, [pc, #108]	@ (80025e0 <HAL_GPIO_Init+0x334>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002594:	4a12      	ldr	r2, [pc, #72]	@ (80025e0 <HAL_GPIO_Init+0x334>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3301      	adds	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	f67f ae90 	bls.w	80022c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3724      	adds	r7, #36	@ 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40013800 	.word	0x40013800
 80025c0:	40020000 	.word	0x40020000
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40020800 	.word	0x40020800
 80025cc:	40020c00 	.word	0x40020c00
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40021400 	.word	0x40021400
 80025d8:	40021800 	.word	0x40021800
 80025dc:	40021c00 	.word	0x40021c00
 80025e0:	40013c00 	.word	0x40013c00

080025e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	807b      	strh	r3, [r7, #2]
 80025f0:	4613      	mov	r3, r2
 80025f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f4:	787b      	ldrb	r3, [r7, #1]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002600:	e003      	b.n	800260a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002602:	887b      	ldrh	r3, [r7, #2]
 8002604:	041a      	lsls	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	619a      	str	r2, [r3, #24]
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002616:	b480      	push	{r7}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002628:	887a      	ldrh	r2, [r7, #2]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4013      	ands	r3, r2
 800262e:	041a      	lsls	r2, r3, #16
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	43d9      	mvns	r1, r3
 8002634:	887b      	ldrh	r3, [r7, #2]
 8002636:	400b      	ands	r3, r1
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	619a      	str	r2, [r3, #24]
}
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e267      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d075      	beq.n	8002756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800266a:	4b88      	ldr	r3, [pc, #544]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b04      	cmp	r3, #4
 8002674:	d00c      	beq.n	8002690 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002676:	4b85      	ldr	r3, [pc, #532]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800267e:	2b08      	cmp	r3, #8
 8002680:	d112      	bne.n	80026a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002682:	4b82      	ldr	r3, [pc, #520]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800268a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800268e:	d10b      	bne.n	80026a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	4b7e      	ldr	r3, [pc, #504]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d05b      	beq.n	8002754 <HAL_RCC_OscConfig+0x108>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d157      	bne.n	8002754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e242      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b0:	d106      	bne.n	80026c0 <HAL_RCC_OscConfig+0x74>
 80026b2:	4b76      	ldr	r3, [pc, #472]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a75      	ldr	r2, [pc, #468]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e01d      	b.n	80026fc <HAL_RCC_OscConfig+0xb0>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x98>
 80026ca:	4b70      	ldr	r3, [pc, #448]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a6f      	ldr	r2, [pc, #444]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 80026d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b6d      	ldr	r3, [pc, #436]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6c      	ldr	r2, [pc, #432]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0xb0>
 80026e4:	4b69      	ldr	r3, [pc, #420]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a68      	ldr	r2, [pc, #416]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 80026ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b66      	ldr	r3, [pc, #408]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a65      	ldr	r2, [pc, #404]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 80026f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe fe2a 	bl	800135c <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe fe26 	bl	800135c <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	@ 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e207      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	4b5b      	ldr	r3, [pc, #364]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0xc0>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7fe fe16 	bl	800135c <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe fe12 	bl	800135c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	@ 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e1f3      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	4b51      	ldr	r3, [pc, #324]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0xe8>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d063      	beq.n	800282a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002762:	4b4a      	ldr	r3, [pc, #296]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276e:	4b47      	ldr	r3, [pc, #284]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002776:	2b08      	cmp	r3, #8
 8002778:	d11c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277a:	4b44      	ldr	r3, [pc, #272]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d116      	bne.n	80027b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002786:	4b41      	ldr	r3, [pc, #260]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_RCC_OscConfig+0x152>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d001      	beq.n	800279e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e1c7      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279e:	4b3b      	ldr	r3, [pc, #236]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4937      	ldr	r1, [pc, #220]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b2:	e03a      	b.n	800282a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d020      	beq.n	80027fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027bc:	4b34      	ldr	r3, [pc, #208]	@ (8002890 <HAL_RCC_OscConfig+0x244>)
 80027be:	2201      	movs	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7fe fdcb 	bl	800135c <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ca:	f7fe fdc7 	bl	800135c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e1a8      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027dc:	4b2b      	ldr	r3, [pc, #172]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e8:	4b28      	ldr	r3, [pc, #160]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4925      	ldr	r1, [pc, #148]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]
 80027fc:	e015      	b.n	800282a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fe:	4b24      	ldr	r3, [pc, #144]	@ (8002890 <HAL_RCC_OscConfig+0x244>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe fdaa 	bl	800135c <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280c:	f7fe fda6 	bl	800135c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e187      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281e:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d036      	beq.n	80028a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d016      	beq.n	800286c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283e:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <HAL_RCC_OscConfig+0x248>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002844:	f7fe fd8a 	bl	800135c <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284c:	f7fe fd86 	bl	800135c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e167      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285e:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <HAL_RCC_OscConfig+0x240>)
 8002860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x200>
 800286a:	e01b      	b.n	80028a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800286c:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <HAL_RCC_OscConfig+0x248>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002872:	f7fe fd73 	bl	800135c <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002878:	e00e      	b.n	8002898 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287a:	f7fe fd6f 	bl	800135c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d907      	bls.n	8002898 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e150      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
 800288c:	40023800 	.word	0x40023800
 8002890:	42470000 	.word	0x42470000
 8002894:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002898:	4b88      	ldr	r3, [pc, #544]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 800289a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1ea      	bne.n	800287a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 8097 	beq.w	80029e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b6:	4b81      	ldr	r3, [pc, #516]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10f      	bne.n	80028e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	4b7d      	ldr	r3, [pc, #500]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	4a7c      	ldr	r2, [pc, #496]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 80028cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d2:	4b7a      	ldr	r3, [pc, #488]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028de:	2301      	movs	r3, #1
 80028e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e2:	4b77      	ldr	r3, [pc, #476]	@ (8002ac0 <HAL_RCC_OscConfig+0x474>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d118      	bne.n	8002920 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ee:	4b74      	ldr	r3, [pc, #464]	@ (8002ac0 <HAL_RCC_OscConfig+0x474>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a73      	ldr	r2, [pc, #460]	@ (8002ac0 <HAL_RCC_OscConfig+0x474>)
 80028f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fa:	f7fe fd2f 	bl	800135c <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002902:	f7fe fd2b 	bl	800135c <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e10c      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002914:	4b6a      	ldr	r3, [pc, #424]	@ (8002ac0 <HAL_RCC_OscConfig+0x474>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d106      	bne.n	8002936 <HAL_RCC_OscConfig+0x2ea>
 8002928:	4b64      	ldr	r3, [pc, #400]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292c:	4a63      	ldr	r2, [pc, #396]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6713      	str	r3, [r2, #112]	@ 0x70
 8002934:	e01c      	b.n	8002970 <HAL_RCC_OscConfig+0x324>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b05      	cmp	r3, #5
 800293c:	d10c      	bne.n	8002958 <HAL_RCC_OscConfig+0x30c>
 800293e:	4b5f      	ldr	r3, [pc, #380]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002942:	4a5e      	ldr	r2, [pc, #376]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 8002944:	f043 0304 	orr.w	r3, r3, #4
 8002948:	6713      	str	r3, [r2, #112]	@ 0x70
 800294a:	4b5c      	ldr	r3, [pc, #368]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294e:	4a5b      	ldr	r2, [pc, #364]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	6713      	str	r3, [r2, #112]	@ 0x70
 8002956:	e00b      	b.n	8002970 <HAL_RCC_OscConfig+0x324>
 8002958:	4b58      	ldr	r3, [pc, #352]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295c:	4a57      	ldr	r2, [pc, #348]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	6713      	str	r3, [r2, #112]	@ 0x70
 8002964:	4b55      	ldr	r3, [pc, #340]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002968:	4a54      	ldr	r2, [pc, #336]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 800296a:	f023 0304 	bic.w	r3, r3, #4
 800296e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d015      	beq.n	80029a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7fe fcf0 	bl	800135c <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297e:	e00a      	b.n	8002996 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002980:	f7fe fcec 	bl	800135c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e0cb      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002996:	4b49      	ldr	r3, [pc, #292]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0ee      	beq.n	8002980 <HAL_RCC_OscConfig+0x334>
 80029a2:	e014      	b.n	80029ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a4:	f7fe fcda 	bl	800135c <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ac:	f7fe fcd6 	bl	800135c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e0b5      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c2:	4b3e      	ldr	r3, [pc, #248]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1ee      	bne.n	80029ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d105      	bne.n	80029e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d4:	4b39      	ldr	r3, [pc, #228]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	4a38      	ldr	r2, [pc, #224]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 80029da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80a1 	beq.w	8002b2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ea:	4b34      	ldr	r3, [pc, #208]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d05c      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d141      	bne.n	8002a82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fe:	4b31      	ldr	r3, [pc, #196]	@ (8002ac4 <HAL_RCC_OscConfig+0x478>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fe fcaa 	bl	800135c <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0c:	f7fe fca6 	bl	800135c <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e087      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1e:	4b27      	ldr	r3, [pc, #156]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69da      	ldr	r2, [r3, #28]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a38:	019b      	lsls	r3, r3, #6
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a40:	085b      	lsrs	r3, r3, #1
 8002a42:	3b01      	subs	r3, #1
 8002a44:	041b      	lsls	r3, r3, #16
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4c:	061b      	lsls	r3, r3, #24
 8002a4e:	491b      	ldr	r1, [pc, #108]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <HAL_RCC_OscConfig+0x478>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fc7f 	bl	800135c <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a62:	f7fe fc7b 	bl	800135c <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e05c      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a74:	4b11      	ldr	r3, [pc, #68]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x416>
 8002a80:	e054      	b.n	8002b2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a82:	4b10      	ldr	r3, [pc, #64]	@ (8002ac4 <HAL_RCC_OscConfig+0x478>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7fe fc68 	bl	800135c <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a90:	f7fe fc64 	bl	800135c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e045      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa2:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <HAL_RCC_OscConfig+0x470>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x444>
 8002aae:	e03d      	b.n	8002b2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e038      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40007000 	.word	0x40007000
 8002ac4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b38 <HAL_RCC_OscConfig+0x4ec>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d028      	beq.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d121      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d11a      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002af8:	4013      	ands	r3, r2
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002afe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d111      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0e:	085b      	lsrs	r3, r3, #1
 8002b10:	3b01      	subs	r3, #1
 8002b12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800

08002b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0cc      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b50:	4b68      	ldr	r3, [pc, #416]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d90c      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b65      	ldr	r3, [pc, #404]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b63      	ldr	r3, [pc, #396]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0b8      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d020      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b90:	4b59      	ldr	r3, [pc, #356]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4a58      	ldr	r2, [pc, #352]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba8:	4b53      	ldr	r3, [pc, #332]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4a52      	ldr	r2, [pc, #328]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb4:	4b50      	ldr	r3, [pc, #320]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	494d      	ldr	r1, [pc, #308]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d044      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bda:	4b47      	ldr	r3, [pc, #284]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d119      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e07f      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d003      	beq.n	8002bfa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d107      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e06f      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e067      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c1a:	4b37      	ldr	r3, [pc, #220]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f023 0203 	bic.w	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4934      	ldr	r1, [pc, #208]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c2c:	f7fe fb96 	bl	800135c <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	e00a      	b.n	8002c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c34:	f7fe fb92 	bl	800135c <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e04f      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 020c 	and.w	r2, r3, #12
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d1eb      	bne.n	8002c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b25      	ldr	r3, [pc, #148]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d20c      	bcs.n	8002c84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b22      	ldr	r3, [pc, #136]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c72:	4b20      	ldr	r3, [pc, #128]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e032      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c90:	4b19      	ldr	r3, [pc, #100]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4916      	ldr	r1, [pc, #88]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cae:	4b12      	ldr	r3, [pc, #72]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	490e      	ldr	r1, [pc, #56]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cc2:	f000 f821 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	490a      	ldr	r1, [pc, #40]	@ (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002cd4:	5ccb      	ldrb	r3, [r1, r3]
 8002cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cda:	4a09      	ldr	r2, [pc, #36]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cde:	4b09      	ldr	r3, [pc, #36]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe faf6 	bl	80012d4 <HAL_InitTick>

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023c00 	.word	0x40023c00
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	080034f4 	.word	0x080034f4
 8002d00:	20000000 	.word	0x20000000
 8002d04:	20000004 	.word	0x20000004

08002d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d0c:	b090      	sub	sp, #64	@ 0x40
 8002d0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d20:	4b59      	ldr	r3, [pc, #356]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d00d      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0x40>
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	f200 80a1 	bhi.w	8002e74 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x34>
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d003      	beq.n	8002d42 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d3a:	e09b      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d3c:	4b53      	ldr	r3, [pc, #332]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x184>)
 8002d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d40:	e09b      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d42:	4b53      	ldr	r3, [pc, #332]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d46:	e098      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d48:	4b4f      	ldr	r3, [pc, #316]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d50:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d52:	4b4d      	ldr	r3, [pc, #308]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d028      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	099b      	lsrs	r3, r3, #6
 8002d64:	2200      	movs	r2, #0
 8002d66:	623b      	str	r3, [r7, #32]
 8002d68:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d70:	2100      	movs	r1, #0
 8002d72:	4b47      	ldr	r3, [pc, #284]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d74:	fb03 f201 	mul.w	r2, r3, r1
 8002d78:	2300      	movs	r3, #0
 8002d7a:	fb00 f303 	mul.w	r3, r0, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	4a43      	ldr	r2, [pc, #268]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d82:	fba0 1202 	umull	r1, r2, r0, r2
 8002d86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d88:	460a      	mov	r2, r1
 8002d8a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d8e:	4413      	add	r3, r2
 8002d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d94:	2200      	movs	r2, #0
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	61fa      	str	r2, [r7, #28]
 8002d9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002da2:	f7fd fa11 	bl	80001c8 <__aeabi_uldivmod>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4613      	mov	r3, r2
 8002dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dae:	e053      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db0:	4b35      	ldr	r3, [pc, #212]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	2200      	movs	r2, #0
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	617a      	str	r2, [r7, #20]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002dc2:	f04f 0b00 	mov.w	fp, #0
 8002dc6:	4652      	mov	r2, sl
 8002dc8:	465b      	mov	r3, fp
 8002dca:	f04f 0000 	mov.w	r0, #0
 8002dce:	f04f 0100 	mov.w	r1, #0
 8002dd2:	0159      	lsls	r1, r3, #5
 8002dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dd8:	0150      	lsls	r0, r2, #5
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	ebb2 080a 	subs.w	r8, r2, sl
 8002de2:	eb63 090b 	sbc.w	r9, r3, fp
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002df2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002df6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dfa:	ebb2 0408 	subs.w	r4, r2, r8
 8002dfe:	eb63 0509 	sbc.w	r5, r3, r9
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	00eb      	lsls	r3, r5, #3
 8002e0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e10:	00e2      	lsls	r2, r4, #3
 8002e12:	4614      	mov	r4, r2
 8002e14:	461d      	mov	r5, r3
 8002e16:	eb14 030a 	adds.w	r3, r4, sl
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	eb45 030b 	adc.w	r3, r5, fp
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e2e:	4629      	mov	r1, r5
 8002e30:	028b      	lsls	r3, r1, #10
 8002e32:	4621      	mov	r1, r4
 8002e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e38:	4621      	mov	r1, r4
 8002e3a:	028a      	lsls	r2, r1, #10
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e42:	2200      	movs	r2, #0
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	60fa      	str	r2, [r7, #12]
 8002e48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e4c:	f7fd f9bc 	bl	80001c8 <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4613      	mov	r3, r2
 8002e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e58:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	0c1b      	lsrs	r3, r3, #16
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	3301      	adds	r3, #1
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e72:	e002      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x184>)
 8002e76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3740      	adds	r7, #64	@ 0x40
 8002e80:	46bd      	mov	sp, r7
 8002e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e86:	bf00      	nop
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	00f42400 	.word	0x00f42400
 8002e90:	00b71b00 	.word	0x00b71b00

08002e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e98:	4b03      	ldr	r3, [pc, #12]	@ (8002ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20000000 	.word	0x20000000

08002eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002eb0:	f7ff fff0 	bl	8002e94 <HAL_RCC_GetHCLKFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	0a9b      	lsrs	r3, r3, #10
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	4903      	ldr	r1, [pc, #12]	@ (8002ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	08003504 	.word	0x08003504

08002ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ed8:	f7ff ffdc 	bl	8002e94 <HAL_RCC_GetHCLKFreq>
 8002edc:	4602      	mov	r2, r0
 8002ede:	4b05      	ldr	r3, [pc, #20]	@ (8002ef4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	0b5b      	lsrs	r3, r3, #13
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	4903      	ldr	r1, [pc, #12]	@ (8002ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eea:	5ccb      	ldrb	r3, [r1, r3]
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	08003504 	.word	0x08003504

08002efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e042      	b.n	8002f94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fe f942 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	@ 0x24
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f82b 	bl	8002f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695a      	ldr	r2, [r3, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa0:	b0c0      	sub	sp, #256	@ 0x100
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb8:	68d9      	ldr	r1, [r3, #12]
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	ea40 0301 	orr.w	r3, r0, r1
 8002fc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ff4:	f021 010c 	bic.w	r1, r1, #12
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003002:	430b      	orrs	r3, r1
 8003004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003016:	6999      	ldr	r1, [r3, #24]
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	ea40 0301 	orr.w	r3, r0, r1
 8003022:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4b8f      	ldr	r3, [pc, #572]	@ (8003268 <UART_SetConfig+0x2cc>)
 800302c:	429a      	cmp	r2, r3
 800302e:	d005      	beq.n	800303c <UART_SetConfig+0xa0>
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b8d      	ldr	r3, [pc, #564]	@ (800326c <UART_SetConfig+0x2d0>)
 8003038:	429a      	cmp	r2, r3
 800303a:	d104      	bne.n	8003046 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800303c:	f7ff ff4a 	bl	8002ed4 <HAL_RCC_GetPCLK2Freq>
 8003040:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003044:	e003      	b.n	800304e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003046:	f7ff ff31 	bl	8002eac <HAL_RCC_GetPCLK1Freq>
 800304a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800304e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003058:	f040 810c 	bne.w	8003274 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800305c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003060:	2200      	movs	r2, #0
 8003062:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003066:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800306a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800306e:	4622      	mov	r2, r4
 8003070:	462b      	mov	r3, r5
 8003072:	1891      	adds	r1, r2, r2
 8003074:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003076:	415b      	adcs	r3, r3
 8003078:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800307a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800307e:	4621      	mov	r1, r4
 8003080:	eb12 0801 	adds.w	r8, r2, r1
 8003084:	4629      	mov	r1, r5
 8003086:	eb43 0901 	adc.w	r9, r3, r1
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800309a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800309e:	4690      	mov	r8, r2
 80030a0:	4699      	mov	r9, r3
 80030a2:	4623      	mov	r3, r4
 80030a4:	eb18 0303 	adds.w	r3, r8, r3
 80030a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030ac:	462b      	mov	r3, r5
 80030ae:	eb49 0303 	adc.w	r3, r9, r3
 80030b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030ca:	460b      	mov	r3, r1
 80030cc:	18db      	adds	r3, r3, r3
 80030ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80030d0:	4613      	mov	r3, r2
 80030d2:	eb42 0303 	adc.w	r3, r2, r3
 80030d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80030d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030e0:	f7fd f872 	bl	80001c8 <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4b61      	ldr	r3, [pc, #388]	@ (8003270 <UART_SetConfig+0x2d4>)
 80030ea:	fba3 2302 	umull	r2, r3, r3, r2
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	011c      	lsls	r4, r3, #4
 80030f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003100:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003104:	4642      	mov	r2, r8
 8003106:	464b      	mov	r3, r9
 8003108:	1891      	adds	r1, r2, r2
 800310a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800310c:	415b      	adcs	r3, r3
 800310e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003110:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003114:	4641      	mov	r1, r8
 8003116:	eb12 0a01 	adds.w	sl, r2, r1
 800311a:	4649      	mov	r1, r9
 800311c:	eb43 0b01 	adc.w	fp, r3, r1
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800312c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003134:	4692      	mov	sl, r2
 8003136:	469b      	mov	fp, r3
 8003138:	4643      	mov	r3, r8
 800313a:	eb1a 0303 	adds.w	r3, sl, r3
 800313e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003142:	464b      	mov	r3, r9
 8003144:	eb4b 0303 	adc.w	r3, fp, r3
 8003148:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003158:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800315c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003160:	460b      	mov	r3, r1
 8003162:	18db      	adds	r3, r3, r3
 8003164:	643b      	str	r3, [r7, #64]	@ 0x40
 8003166:	4613      	mov	r3, r2
 8003168:	eb42 0303 	adc.w	r3, r2, r3
 800316c:	647b      	str	r3, [r7, #68]	@ 0x44
 800316e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003172:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003176:	f7fd f827 	bl	80001c8 <__aeabi_uldivmod>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4611      	mov	r1, r2
 8003180:	4b3b      	ldr	r3, [pc, #236]	@ (8003270 <UART_SetConfig+0x2d4>)
 8003182:	fba3 2301 	umull	r2, r3, r3, r1
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	2264      	movs	r2, #100	@ 0x64
 800318a:	fb02 f303 	mul.w	r3, r2, r3
 800318e:	1acb      	subs	r3, r1, r3
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003196:	4b36      	ldr	r3, [pc, #216]	@ (8003270 <UART_SetConfig+0x2d4>)
 8003198:	fba3 2302 	umull	r2, r3, r3, r2
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031a4:	441c      	add	r4, r3
 80031a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80031b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80031b8:	4642      	mov	r2, r8
 80031ba:	464b      	mov	r3, r9
 80031bc:	1891      	adds	r1, r2, r2
 80031be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031c0:	415b      	adcs	r3, r3
 80031c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031c8:	4641      	mov	r1, r8
 80031ca:	1851      	adds	r1, r2, r1
 80031cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80031ce:	4649      	mov	r1, r9
 80031d0:	414b      	adcs	r3, r1
 80031d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031e0:	4659      	mov	r1, fp
 80031e2:	00cb      	lsls	r3, r1, #3
 80031e4:	4651      	mov	r1, sl
 80031e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ea:	4651      	mov	r1, sl
 80031ec:	00ca      	lsls	r2, r1, #3
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	4642      	mov	r2, r8
 80031f6:	189b      	adds	r3, r3, r2
 80031f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031fc:	464b      	mov	r3, r9
 80031fe:	460a      	mov	r2, r1
 8003200:	eb42 0303 	adc.w	r3, r2, r3
 8003204:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003214:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003218:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800321c:	460b      	mov	r3, r1
 800321e:	18db      	adds	r3, r3, r3
 8003220:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003222:	4613      	mov	r3, r2
 8003224:	eb42 0303 	adc.w	r3, r2, r3
 8003228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800322a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800322e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003232:	f7fc ffc9 	bl	80001c8 <__aeabi_uldivmod>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4b0d      	ldr	r3, [pc, #52]	@ (8003270 <UART_SetConfig+0x2d4>)
 800323c:	fba3 1302 	umull	r1, r3, r3, r2
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	2164      	movs	r1, #100	@ 0x64
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	3332      	adds	r3, #50	@ 0x32
 800324e:	4a08      	ldr	r2, [pc, #32]	@ (8003270 <UART_SetConfig+0x2d4>)
 8003250:	fba2 2303 	umull	r2, r3, r2, r3
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	f003 0207 	and.w	r2, r3, #7
 800325a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4422      	add	r2, r4
 8003262:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003264:	e106      	b.n	8003474 <UART_SetConfig+0x4d8>
 8003266:	bf00      	nop
 8003268:	40011000 	.word	0x40011000
 800326c:	40011400 	.word	0x40011400
 8003270:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003278:	2200      	movs	r2, #0
 800327a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800327e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003282:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003286:	4642      	mov	r2, r8
 8003288:	464b      	mov	r3, r9
 800328a:	1891      	adds	r1, r2, r2
 800328c:	6239      	str	r1, [r7, #32]
 800328e:	415b      	adcs	r3, r3
 8003290:	627b      	str	r3, [r7, #36]	@ 0x24
 8003292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003296:	4641      	mov	r1, r8
 8003298:	1854      	adds	r4, r2, r1
 800329a:	4649      	mov	r1, r9
 800329c:	eb43 0501 	adc.w	r5, r3, r1
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	00eb      	lsls	r3, r5, #3
 80032aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ae:	00e2      	lsls	r2, r4, #3
 80032b0:	4614      	mov	r4, r2
 80032b2:	461d      	mov	r5, r3
 80032b4:	4643      	mov	r3, r8
 80032b6:	18e3      	adds	r3, r4, r3
 80032b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032bc:	464b      	mov	r3, r9
 80032be:	eb45 0303 	adc.w	r3, r5, r3
 80032c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032e2:	4629      	mov	r1, r5
 80032e4:	008b      	lsls	r3, r1, #2
 80032e6:	4621      	mov	r1, r4
 80032e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ec:	4621      	mov	r1, r4
 80032ee:	008a      	lsls	r2, r1, #2
 80032f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80032f4:	f7fc ff68 	bl	80001c8 <__aeabi_uldivmod>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4b60      	ldr	r3, [pc, #384]	@ (8003480 <UART_SetConfig+0x4e4>)
 80032fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	011c      	lsls	r4, r3, #4
 8003306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800330a:	2200      	movs	r2, #0
 800330c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003310:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003314:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003318:	4642      	mov	r2, r8
 800331a:	464b      	mov	r3, r9
 800331c:	1891      	adds	r1, r2, r2
 800331e:	61b9      	str	r1, [r7, #24]
 8003320:	415b      	adcs	r3, r3
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003328:	4641      	mov	r1, r8
 800332a:	1851      	adds	r1, r2, r1
 800332c:	6139      	str	r1, [r7, #16]
 800332e:	4649      	mov	r1, r9
 8003330:	414b      	adcs	r3, r1
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003340:	4659      	mov	r1, fp
 8003342:	00cb      	lsls	r3, r1, #3
 8003344:	4651      	mov	r1, sl
 8003346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800334a:	4651      	mov	r1, sl
 800334c:	00ca      	lsls	r2, r1, #3
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	4603      	mov	r3, r0
 8003354:	4642      	mov	r2, r8
 8003356:	189b      	adds	r3, r3, r2
 8003358:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800335c:	464b      	mov	r3, r9
 800335e:	460a      	mov	r2, r1
 8003360:	eb42 0303 	adc.w	r3, r2, r3
 8003364:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003372:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003380:	4649      	mov	r1, r9
 8003382:	008b      	lsls	r3, r1, #2
 8003384:	4641      	mov	r1, r8
 8003386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800338a:	4641      	mov	r1, r8
 800338c:	008a      	lsls	r2, r1, #2
 800338e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003392:	f7fc ff19 	bl	80001c8 <__aeabi_uldivmod>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4611      	mov	r1, r2
 800339c:	4b38      	ldr	r3, [pc, #224]	@ (8003480 <UART_SetConfig+0x4e4>)
 800339e:	fba3 2301 	umull	r2, r3, r3, r1
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2264      	movs	r2, #100	@ 0x64
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	1acb      	subs	r3, r1, r3
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	3332      	adds	r3, #50	@ 0x32
 80033b0:	4a33      	ldr	r2, [pc, #204]	@ (8003480 <UART_SetConfig+0x4e4>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033bc:	441c      	add	r4, r3
 80033be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033c2:	2200      	movs	r2, #0
 80033c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80033c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80033c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80033cc:	4642      	mov	r2, r8
 80033ce:	464b      	mov	r3, r9
 80033d0:	1891      	adds	r1, r2, r2
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	415b      	adcs	r3, r3
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033dc:	4641      	mov	r1, r8
 80033de:	1851      	adds	r1, r2, r1
 80033e0:	6039      	str	r1, [r7, #0]
 80033e2:	4649      	mov	r1, r9
 80033e4:	414b      	adcs	r3, r1
 80033e6:	607b      	str	r3, [r7, #4]
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033f4:	4659      	mov	r1, fp
 80033f6:	00cb      	lsls	r3, r1, #3
 80033f8:	4651      	mov	r1, sl
 80033fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033fe:	4651      	mov	r1, sl
 8003400:	00ca      	lsls	r2, r1, #3
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	4603      	mov	r3, r0
 8003408:	4642      	mov	r2, r8
 800340a:	189b      	adds	r3, r3, r2
 800340c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800340e:	464b      	mov	r3, r9
 8003410:	460a      	mov	r2, r1
 8003412:	eb42 0303 	adc.w	r3, r2, r3
 8003416:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	663b      	str	r3, [r7, #96]	@ 0x60
 8003422:	667a      	str	r2, [r7, #100]	@ 0x64
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003430:	4649      	mov	r1, r9
 8003432:	008b      	lsls	r3, r1, #2
 8003434:	4641      	mov	r1, r8
 8003436:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800343a:	4641      	mov	r1, r8
 800343c:	008a      	lsls	r2, r1, #2
 800343e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003442:	f7fc fec1 	bl	80001c8 <__aeabi_uldivmod>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4b0d      	ldr	r3, [pc, #52]	@ (8003480 <UART_SetConfig+0x4e4>)
 800344c:	fba3 1302 	umull	r1, r3, r3, r2
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	2164      	movs	r1, #100	@ 0x64
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	3332      	adds	r3, #50	@ 0x32
 800345e:	4a08      	ldr	r2, [pc, #32]	@ (8003480 <UART_SetConfig+0x4e4>)
 8003460:	fba2 2303 	umull	r2, r3, r2, r3
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	f003 020f 	and.w	r2, r3, #15
 800346a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4422      	add	r2, r4
 8003472:	609a      	str	r2, [r3, #8]
}
 8003474:	bf00      	nop
 8003476:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800347a:	46bd      	mov	sp, r7
 800347c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003480:	51eb851f 	.word	0x51eb851f

08003484 <memset>:
 8003484:	4402      	add	r2, r0
 8003486:	4603      	mov	r3, r0
 8003488:	4293      	cmp	r3, r2
 800348a:	d100      	bne.n	800348e <memset+0xa>
 800348c:	4770      	bx	lr
 800348e:	f803 1b01 	strb.w	r1, [r3], #1
 8003492:	e7f9      	b.n	8003488 <memset+0x4>

08003494 <__libc_init_array>:
 8003494:	b570      	push	{r4, r5, r6, lr}
 8003496:	4d0d      	ldr	r5, [pc, #52]	@ (80034cc <__libc_init_array+0x38>)
 8003498:	4c0d      	ldr	r4, [pc, #52]	@ (80034d0 <__libc_init_array+0x3c>)
 800349a:	1b64      	subs	r4, r4, r5
 800349c:	10a4      	asrs	r4, r4, #2
 800349e:	2600      	movs	r6, #0
 80034a0:	42a6      	cmp	r6, r4
 80034a2:	d109      	bne.n	80034b8 <__libc_init_array+0x24>
 80034a4:	4d0b      	ldr	r5, [pc, #44]	@ (80034d4 <__libc_init_array+0x40>)
 80034a6:	4c0c      	ldr	r4, [pc, #48]	@ (80034d8 <__libc_init_array+0x44>)
 80034a8:	f000 f818 	bl	80034dc <_init>
 80034ac:	1b64      	subs	r4, r4, r5
 80034ae:	10a4      	asrs	r4, r4, #2
 80034b0:	2600      	movs	r6, #0
 80034b2:	42a6      	cmp	r6, r4
 80034b4:	d105      	bne.n	80034c2 <__libc_init_array+0x2e>
 80034b6:	bd70      	pop	{r4, r5, r6, pc}
 80034b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034bc:	4798      	blx	r3
 80034be:	3601      	adds	r6, #1
 80034c0:	e7ee      	b.n	80034a0 <__libc_init_array+0xc>
 80034c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034c6:	4798      	blx	r3
 80034c8:	3601      	adds	r6, #1
 80034ca:	e7f2      	b.n	80034b2 <__libc_init_array+0x1e>
 80034cc:	08003514 	.word	0x08003514
 80034d0:	08003514 	.word	0x08003514
 80034d4:	08003514 	.word	0x08003514
 80034d8:	08003518 	.word	0x08003518

080034dc <_init>:
 80034dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034de:	bf00      	nop
 80034e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034e2:	bc08      	pop	{r3}
 80034e4:	469e      	mov	lr, r3
 80034e6:	4770      	bx	lr

080034e8 <_fini>:
 80034e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ea:	bf00      	nop
 80034ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ee:	bc08      	pop	{r3}
 80034f0:	469e      	mov	lr, r3
 80034f2:	4770      	bx	lr
