
Engineer_Custom_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003798  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003920  08003920  00004920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003940  08003940  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003940  08003940  00004940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003948  08003948  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003948  08003948  00004948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800394c  0800394c  0000494c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003950  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          0000040c  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000468  20000468  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a03a  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e2b  00000000  00000000  0000f0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  00010ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000664  00000000  00000000  00011770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d12  00000000  00000000  00011dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b204  00000000  00000000  00032ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c555f  00000000  00000000  0003dcea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00103249  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000022cc  00000000  00000000  0010328c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00105558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003908 	.word	0x08003908

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08003908 	.word	0x08003908

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004f8:	4b17      	ldr	r3, [pc, #92]	@ (8000558 <MX_CAN1_Init+0x64>)
 80004fa:	4a18      	ldr	r2, [pc, #96]	@ (800055c <MX_CAN1_Init+0x68>)
 80004fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80004fe:	4b16      	ldr	r3, [pc, #88]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000500:	2203      	movs	r2, #3
 8000502:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000504:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800050a:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <MX_CAN1_Init+0x64>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000510:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000512:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000516:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000518:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <MX_CAN1_Init+0x64>)
 800051a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800051e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000520:	4b0d      	ldr	r3, [pc, #52]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000528:	2200      	movs	r2, #0
 800052a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800052c:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <MX_CAN1_Init+0x64>)
 800052e:	2200      	movs	r2, #0
 8000530:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000534:	2200      	movs	r2, #0
 8000536:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000538:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <MX_CAN1_Init+0x64>)
 800053a:	2200      	movs	r2, #0
 800053c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000540:	2200      	movs	r2, #0
 8000542:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000544:	4804      	ldr	r0, [pc, #16]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000546:	f001 f8a7 	bl	8001698 <HAL_CAN_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000550:	f000 f9e4 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000078 	.word	0x20000078
 800055c:	40006400 	.word	0x40006400

08000560 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000564:	4b17      	ldr	r3, [pc, #92]	@ (80005c4 <MX_CAN2_Init+0x64>)
 8000566:	4a18      	ldr	r2, [pc, #96]	@ (80005c8 <MX_CAN2_Init+0x68>)
 8000568:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800056a:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <MX_CAN2_Init+0x64>)
 800056c:	2203      	movs	r2, #3
 800056e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000570:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <MX_CAN2_Init+0x64>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000576:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <MX_CAN2_Init+0x64>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 800057c:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <MX_CAN2_Init+0x64>)
 800057e:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000582:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000584:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <MX_CAN2_Init+0x64>)
 8000586:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800058a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <MX_CAN2_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <MX_CAN2_Init+0x64>)
 8000594:	2200      	movs	r2, #0
 8000596:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <MX_CAN2_Init+0x64>)
 800059a:	2200      	movs	r2, #0
 800059c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800059e:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <MX_CAN2_Init+0x64>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80005a4:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <MX_CAN2_Init+0x64>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80005aa:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <MX_CAN2_Init+0x64>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80005b0:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <MX_CAN2_Init+0x64>)
 80005b2:	f001 f871 	bl	8001698 <HAL_CAN_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80005bc:	f000 f9ae 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200000a0 	.word	0x200000a0
 80005c8:	40006800 	.word	0x40006800

080005cc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08c      	sub	sp, #48	@ 0x30
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a4a      	ldr	r2, [pc, #296]	@ (8000714 <HAL_CAN_MspInit+0x148>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d13d      	bne.n	800066a <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80005ee:	4b4a      	ldr	r3, [pc, #296]	@ (8000718 <HAL_CAN_MspInit+0x14c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	4a48      	ldr	r2, [pc, #288]	@ (8000718 <HAL_CAN_MspInit+0x14c>)
 80005f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80005f8:	4b47      	ldr	r3, [pc, #284]	@ (8000718 <HAL_CAN_MspInit+0x14c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d10d      	bne.n	800061c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
 8000604:	4b45      	ldr	r3, [pc, #276]	@ (800071c <HAL_CAN_MspInit+0x150>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	4a44      	ldr	r2, [pc, #272]	@ (800071c <HAL_CAN_MspInit+0x150>)
 800060a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800060e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000610:	4b42      	ldr	r3, [pc, #264]	@ (800071c <HAL_CAN_MspInit+0x150>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	4b3e      	ldr	r3, [pc, #248]	@ (800071c <HAL_CAN_MspInit+0x150>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000624:	4a3d      	ldr	r2, [pc, #244]	@ (800071c <HAL_CAN_MspInit+0x150>)
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	6313      	str	r3, [r2, #48]	@ 0x30
 800062c:	4b3b      	ldr	r3, [pc, #236]	@ (800071c <HAL_CAN_MspInit+0x150>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000630:	f003 0308 	and.w	r3, r3, #8
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000638:	2303      	movs	r3, #3
 800063a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000648:	2309      	movs	r3, #9
 800064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	4619      	mov	r1, r3
 8000652:	4833      	ldr	r0, [pc, #204]	@ (8000720 <HAL_CAN_MspInit+0x154>)
 8000654:	f001 ff98 	bl	8002588 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	2014      	movs	r0, #20
 800065e:	f001 ff5c 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000662:	2014      	movs	r0, #20
 8000664:	f001 ff75 	bl	8002552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000668:	e04f      	b.n	800070a <HAL_CAN_MspInit+0x13e>
  else if(canHandle->Instance==CAN2)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a2d      	ldr	r2, [pc, #180]	@ (8000724 <HAL_CAN_MspInit+0x158>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d14a      	bne.n	800070a <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <HAL_CAN_MspInit+0x150>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	@ (800071c <HAL_CAN_MspInit+0x150>)
 800067e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <HAL_CAN_MspInit+0x150>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000690:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <HAL_CAN_MspInit+0x14c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	4a20      	ldr	r2, [pc, #128]	@ (8000718 <HAL_CAN_MspInit+0x14c>)
 8000698:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800069a:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <HAL_CAN_MspInit+0x14c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d10d      	bne.n	80006be <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <HAL_CAN_MspInit+0x150>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006aa:	4a1c      	ldr	r2, [pc, #112]	@ (800071c <HAL_CAN_MspInit+0x150>)
 80006ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <HAL_CAN_MspInit+0x150>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	4b16      	ldr	r3, [pc, #88]	@ (800071c <HAL_CAN_MspInit+0x150>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a15      	ldr	r2, [pc, #84]	@ (800071c <HAL_CAN_MspInit+0x150>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b13      	ldr	r3, [pc, #76]	@ (800071c <HAL_CAN_MspInit+0x150>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80006da:	2360      	movs	r3, #96	@ 0x60
 80006dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e6:	2303      	movs	r3, #3
 80006e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80006ea:	2309      	movs	r3, #9
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4619      	mov	r1, r3
 80006f4:	480c      	ldr	r0, [pc, #48]	@ (8000728 <HAL_CAN_MspInit+0x15c>)
 80006f6:	f001 ff47 	bl	8002588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	2040      	movs	r0, #64	@ 0x40
 8000700:	f001 ff0b 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000704:	2040      	movs	r0, #64	@ 0x40
 8000706:	f001 ff24 	bl	8002552 <HAL_NVIC_EnableIRQ>
}
 800070a:	bf00      	nop
 800070c:	3730      	adds	r7, #48	@ 0x30
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40006400 	.word	0x40006400
 8000718:	200000c8 	.word	0x200000c8
 800071c:	40023800 	.word	0x40023800
 8000720:	40020c00 	.word	0x40020c00
 8000724:	40006800 	.word	0x40006800
 8000728:	40020400 	.word	0x40020400

0800072c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	@ 0x28
 8000730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b2e      	ldr	r3, [pc, #184]	@ (8000800 <MX_GPIO_Init+0xd4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a2d      	ldr	r2, [pc, #180]	@ (8000800 <MX_GPIO_Init+0xd4>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b2b      	ldr	r3, [pc, #172]	@ (8000800 <MX_GPIO_Init+0xd4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b27      	ldr	r3, [pc, #156]	@ (8000800 <MX_GPIO_Init+0xd4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a26      	ldr	r2, [pc, #152]	@ (8000800 <MX_GPIO_Init+0xd4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <MX_GPIO_Init+0xd4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <MX_GPIO_Init+0xd4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a1f      	ldr	r2, [pc, #124]	@ (8000800 <MX_GPIO_Init+0xd4>)
 8000784:	f043 0308 	orr.w	r3, r3, #8
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_GPIO_Init+0xd4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <MX_GPIO_Init+0xd4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a18      	ldr	r2, [pc, #96]	@ (8000800 <MX_GPIO_Init+0xd4>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_GPIO_Init+0xd4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_GPIO_Init+0xd4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a11      	ldr	r2, [pc, #68]	@ (8000800 <MX_GPIO_Init+0xd4>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_GPIO_Init+0xd4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80007d4:	480b      	ldr	r0, [pc, #44]	@ (8000804 <MX_GPIO_Init+0xd8>)
 80007d6:	f002 f873 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 80007da:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_GPIO_Init+0xd8>)
 80007f4:	f001 fec8 	bl	8002588 <HAL_GPIO_Init>

}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	@ 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40021c00 	.word	0x40021c00

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 feae 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f81a 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f7ff ff8a 	bl	800072c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000818:	f7ff fe6c 	bl	80004f4 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 800081c:	f000 fe0a 	bl	8001434 <MX_USART3_UART_Init>
  MX_CAN2_Init();
 8000820:	f7ff fe9e 	bl	8000560 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  Enable_CAN2();
 8000824:	f000 f8d0 	bl	80009c8 <Enable_CAN2>
  MotorPID_Init();
 8000828:	f000 fb36 	bl	8000e98 <MotorPID_Init>
  Set_Motor_Position(5, 150.0f);
 800082c:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8000844 <main+0x3c>
 8000830:	2005      	movs	r0, #5
 8000832:	f000 fbd9 	bl	8000fe8 <Set_Motor_Position>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Motor_Control_Update();  // Update PID and send CAN commands
 8000836:	f000 fc55 	bl	80010e4 <Motor_Control_Update>
	  HAL_Delay(1);  // Control loop timing
 800083a:	2001      	movs	r0, #1
 800083c:	f000 ff08 	bl	8001650 <HAL_Delay>
	  Motor_Control_Update();  // Update PID and send CAN commands
 8000840:	bf00      	nop
 8000842:	e7f8      	b.n	8000836 <main+0x2e>
 8000844:	43160000 	.word	0x43160000

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	@ 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	2230      	movs	r2, #48	@ 0x30
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f002 ff82 	bl	8003760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	4b28      	ldr	r3, [pc, #160]	@ (8000914 <SystemClock_Config+0xcc>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000874:	4a27      	ldr	r2, [pc, #156]	@ (8000914 <SystemClock_Config+0xcc>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087a:	6413      	str	r3, [r2, #64]	@ 0x40
 800087c:	4b25      	ldr	r3, [pc, #148]	@ (8000914 <SystemClock_Config+0xcc>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <SystemClock_Config+0xd0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <SystemClock_Config+0xd0>)
 8000892:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <SystemClock_Config+0xd0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80008b8:	230c      	movs	r3, #12
 80008ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008bc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c6:	2304      	movs	r3, #4
 80008c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 f82a 	bl	8002928 <HAL_RCC_OscConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008da:	f000 f81f 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	230f      	movs	r3, #15
 80008e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e2:	2302      	movs	r3, #2
 80008e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	2105      	movs	r1, #5
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 fa8b 	bl	8002e18 <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000908:	f000 f808 	bl	800091c <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	3750      	adds	r7, #80	@ 0x50
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000926:	4807      	ldr	r0, [pc, #28]	@ (8000944 <Error_Handler+0x28>)
 8000928:	f001 ffca 	bl	80028c0 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8000930:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000934:	4803      	ldr	r0, [pc, #12]	@ (8000944 <Error_Handler+0x28>)
 8000936:	f001 ffdc 	bl	80028f2 <HAL_GPIO_TogglePin>
      HAL_Delay(250); // blink every 250ms
 800093a:	20fa      	movs	r0, #250	@ 0xfa
 800093c:	f000 fe88 	bl	8001650 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8000940:	bf00      	nop
 8000942:	e7f5      	b.n	8000930 <Error_Handler+0x14>
 8000944:	40021c00 	.word	0x40021c00

08000948 <get_motor_measure>:

motor_measure_t all_motors[6];

//static in-line function to decode the CAN message feedback
static inline void get_motor_measure(motor_measure_t *ptr, const uint8_t *data)
    {
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
        ptr ->last_ecd			= ptr->ecd;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	b21a      	sxth	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	811a      	strh	r2, [r3, #8]
        ptr ->ecd				= (uint16_t)((data[0] << 8) | data[1]);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b21b      	sxth	r3, r3
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	b21a      	sxth	r2, r3
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b21b      	sxth	r3, r3
 800096e:	4313      	orrs	r3, r2
 8000970:	b21b      	sxth	r3, r3
 8000972:	b29a      	uxth	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	801a      	strh	r2, [r3, #0]
        ptr ->speed_rpm 		= (uint16_t)((data)[2] << 8 | (data)[3]);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	3302      	adds	r3, #2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b21b      	sxth	r3, r3
 8000980:	021b      	lsls	r3, r3, #8
 8000982:	b21a      	sxth	r2, r3
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	3303      	adds	r3, #3
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b21b      	sxth	r3, r3
 800098c:	4313      	orrs	r3, r2
 800098e:	b21a      	sxth	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	805a      	strh	r2, [r3, #2]
        ptr ->given_current		= (uint16_t)((data)[4] << 8 | (data)[5]);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	3304      	adds	r3, #4
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b21b      	sxth	r3, r3
 800099c:	021b      	lsls	r3, r3, #8
 800099e:	b21a      	sxth	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	3305      	adds	r3, #5
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	4313      	orrs	r3, r2
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	809a      	strh	r2, [r3, #4]
        ptr ->temperature 		= (data)[6];
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	3306      	adds	r3, #6
 80009b4:	781a      	ldrb	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	719a      	strb	r2, [r3, #6]
    }
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
	...

080009c8 <Enable_CAN2>:
/* ------------------------------ Initialization of CAN, filter Setup）------------------------------ */
void Enable_CAN2(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef CAN_Filter;

    CAN_Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
    CAN_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61fb      	str	r3, [r7, #28]
    CAN_Filter.FilterBank = 14;             // start filters for CAN2 here
 80009d6:	230e      	movs	r3, #14
 80009d8:	617b      	str	r3, [r7, #20]
    CAN_Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
    CAN_Filter.SlaveStartFilterBank = 14;   // 0–13 for CAN1, 14–27 for CAN2
 80009de:	230e      	movs	r3, #14
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
    CAN_Filter.FilterActivation = CAN_FILTER_ENABLE;
 80009e2:	2301      	movs	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
    CAN_Filter.FilterIdHigh = 0x0000;
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
    CAN_Filter.FilterIdLow = 0x0000;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
    CAN_Filter.FilterMaskIdHigh = 0x0000;   // accept all IDs
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
    CAN_Filter.FilterMaskIdLow = 0x0000;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]

    if (HAL_CAN_ConfigFilter(&hcan2, &CAN_Filter) != HAL_OK){
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	4812      	ldr	r0, [pc, #72]	@ (8000a44 <Enable_CAN2+0x7c>)
 80009fc:	f000 ff48 	bl	8001890 <HAL_CAN_ConfigFilter>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <Enable_CAN2+0x42>
        Error_Handler();
 8000a06:	f7ff ff89 	bl	800091c <Error_Handler>
    }
    // 👇 Add this check here
    if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 8000a0a:	480e      	ldr	r0, [pc, #56]	@ (8000a44 <Enable_CAN2+0x7c>)
 8000a0c:	f001 f81e 	bl	8001a4c <HAL_CAN_Start>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <Enable_CAN2+0x52>
    	Error_Handler();
 8000a16:	f7ff ff81 	bl	800091c <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4809      	ldr	r0, [pc, #36]	@ (8000a44 <Enable_CAN2+0x7c>)
 8000a1e:	f001 fa4b 	bl	8001eb8 <HAL_CAN_ActivateNotification>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <Enable_CAN2+0x64>
    	Error_Handler();
 8000a28:	f7ff ff78 	bl	800091c <Error_Handler>
    }

    HAL_CAN_Start(&hcan2);
 8000a2c:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <Enable_CAN2+0x7c>)
 8000a2e:	f001 f80d 	bl	8001a4c <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a32:	2102      	movs	r1, #2
 8000a34:	4803      	ldr	r0, [pc, #12]	@ (8000a44 <Enable_CAN2+0x7c>)
 8000a36:	f001 fa3f 	bl	8001eb8 <HAL_CAN_ActivateNotification>
}
 8000a3a:	bf00      	nop
 8000a3c:	3728      	adds	r7, #40	@ 0x28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000a0 	.word	0x200000a0

08000a48 <Set_GM6020_Current>:


/* ------------------------------ 发送函数 ------------------------------ */
void Set_GM6020_Current(int16_t q1, int16_t q2, int16_t q3)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	@ 0x30
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	460b      	mov	r3, r1
 8000a54:	80bb      	strh	r3, [r7, #4]
 8000a56:	4613      	mov	r3, r2
 8000a58:	807b      	strh	r3, [r7, #2]
    uint8_t TxData[8];
    TxData[0] = (uint8_t)(q1>>8);
 8000a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a5e:	121b      	asrs	r3, r3, #8
 8000a60:	b21b      	sxth	r3, r3
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    TxData[1] = (uint8_t)q1;
 8000a68:	88fb      	ldrh	r3, [r7, #6]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    TxData[2] = (uint8_t)(q2>>8);
 8000a70:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a74:	121b      	asrs	r3, r3, #8
 8000a76:	b21b      	sxth	r3, r3
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    TxData[3] = (uint8_t)q2;
 8000a7e:	88bb      	ldrh	r3, [r7, #4]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    TxData[4] = (uint8_t)(q3>>8);
 8000a86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a8a:	121b      	asrs	r3, r3, #8
 8000a8c:	b21b      	sxth	r3, r3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    TxData[5] = (uint8_t)q3;
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    TxData[6] = (uint8_t)0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    TxData[7] = (uint8_t)0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    CAN_TxHeaderTypeDef TxHeader = {
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
 8000ab8:	615a      	str	r2, [r3, #20]
 8000aba:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	623b      	str	r3, [r7, #32]
            .DLC = 8,
            .IDE = CAN_ID_STD,    // 标准帧
            .RTR = CAN_RTR_DATA,  // 数据帧
            .StdId = 0x2ff
    };
    uint32_t TxBox = CAN_TX_MAILBOX0;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
    if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxBox) != HAL_OK){
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000ad0:	f107 0110 	add.w	r1, r7, #16
 8000ad4:	4807      	ldr	r0, [pc, #28]	@ (8000af4 <Set_GM6020_Current+0xac>)
 8000ad6:	f000 fffd 	bl	8001ad4 <HAL_CAN_AddTxMessage>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d005      	beq.n	8000aec <Set_GM6020_Current+0xa4>
        HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);//错误处理
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ae6:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <Set_GM6020_Current+0xb0>)
 8000ae8:	f001 feea 	bl	80028c0 <HAL_GPIO_WritePin>
    }
}
 8000aec:	bf00      	nop
 8000aee:	3730      	adds	r7, #48	@ 0x30
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200000a0 	.word	0x200000a0
 8000af8:	40021c00 	.word	0x40021c00

08000afc <Set_M2006_Current>:


void Set_M2006_Current(int16_t q1, int16_t q2, int16_t q3)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	@ 0x30
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	80fb      	strh	r3, [r7, #6]
 8000b06:	460b      	mov	r3, r1
 8000b08:	80bb      	strh	r3, [r7, #4]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	807b      	strh	r3, [r7, #2]
    uint8_t TxData[8];
    TxData[0] = (uint8_t)(q1>>8);
 8000b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b12:	121b      	asrs	r3, r3, #8
 8000b14:	b21b      	sxth	r3, r3
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    TxData[1] = (uint8_t)q1;
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    TxData[2] = (uint8_t)(q2>>8);
 8000b24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b28:	121b      	asrs	r3, r3, #8
 8000b2a:	b21b      	sxth	r3, r3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    TxData[3] = (uint8_t)q2;
 8000b32:	88bb      	ldrh	r3, [r7, #4]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    TxData[4] = (uint8_t)(q3>>8);
 8000b3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b3e:	121b      	asrs	r3, r3, #8
 8000b40:	b21b      	sxth	r3, r3
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    TxData[5] = (uint8_t)q3;
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    TxData[6] = (uint8_t)0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    TxData[7] = (uint8_t)0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    CAN_TxHeaderTypeDef TxHeader = {
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	615a      	str	r2, [r3, #20]
 8000b6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	2308      	movs	r3, #8
 8000b76:	623b      	str	r3, [r7, #32]
            .DLC = 8,
            .IDE = CAN_ID_STD,    //standard frame
            .RTR = CAN_RTR_DATA,  //data frame
            .StdId = 0x200
    };
    uint32_t TxBox = CAN_TX_MAILBOX0;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
    if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxBox) != HAL_OK){
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000b84:	f107 0110 	add.w	r1, r7, #16
 8000b88:	4807      	ldr	r0, [pc, #28]	@ (8000ba8 <Set_M2006_Current+0xac>)
 8000b8a:	f000 ffa3 	bl	8001ad4 <HAL_CAN_AddTxMessage>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d005      	beq.n	8000ba0 <Set_M2006_Current+0xa4>
        HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);//错误处理
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b9a:	4804      	ldr	r0, [pc, #16]	@ (8000bac <Set_M2006_Current+0xb0>)
 8000b9c:	f001 fe90 	bl	80028c0 <HAL_GPIO_WritePin>
    }
}
 8000ba0:	bf00      	nop
 8000ba2:	3730      	adds	r7, #48	@ 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200000a0 	.word	0x200000a0
 8000bac:	40021c00 	.word	0x40021c00

08000bb0 <motor_index_from_id>:
 * 0x205 --> 4
 * 0x206 --> 5
 * 0x207 --> 6
 * */
static int8_t motor_index_from_id(uint16_t id)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80fb      	strh	r3, [r7, #6]
	switch (id)
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000bc0:	2b0a      	cmp	r3, #10
 8000bc2:	d825      	bhi.n	8000c10 <motor_index_from_id+0x60>
 8000bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8000bcc <motor_index_from_id+0x1c>)
 8000bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bca:	bf00      	nop
 8000bcc:	08000bf9 	.word	0x08000bf9
 8000bd0:	08000bfd 	.word	0x08000bfd
 8000bd4:	08000c01 	.word	0x08000c01
 8000bd8:	08000c11 	.word	0x08000c11
 8000bdc:	08000c11 	.word	0x08000c11
 8000be0:	08000c11 	.word	0x08000c11
 8000be4:	08000c11 	.word	0x08000c11
 8000be8:	08000c11 	.word	0x08000c11
 8000bec:	08000c05 	.word	0x08000c05
 8000bf0:	08000c09 	.word	0x08000c09
 8000bf4:	08000c0d 	.word	0x08000c0d
	{
		case CAN_M2006_M1_ID: return 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	e00b      	b.n	8000c14 <motor_index_from_id+0x64>
		case CAN_M2006_M2_ID: return 1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e009      	b.n	8000c14 <motor_index_from_id+0x64>
		case CAN_M2006_M3_ID: return 2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	e007      	b.n	8000c14 <motor_index_from_id+0x64>
		case CAN_GM6020_M5_ID: return 3;
 8000c04:	2303      	movs	r3, #3
 8000c06:	e005      	b.n	8000c14 <motor_index_from_id+0x64>
		case CAN_GM6020_M6_ID: return 4;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	e003      	b.n	8000c14 <motor_index_from_id+0x64>
		case CAN_GM6020_M7_ID: return 5;
 8000c0c:	2305      	movs	r3, #5
 8000c0e:	e001      	b.n	8000c14 <motor_index_from_id+0x64>

		default: return -1; //safety, filters any noise
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <HAL_CAN_RxFifo0MsgPendingCallback>:
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
}
*/

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	@ 0x30
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];

    HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);  // 👈 Debug indicator
 8000c28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c2c:	4823      	ldr	r0, [pc, #140]	@ (8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000c2e:	f001 fe60 	bl	80028f2 <HAL_GPIO_TogglePin>

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	f107 0210 	add.w	r2, r7, #16
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f001 f819 	bl	8001c74 <HAL_CAN_GetRxMessage>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d135      	bne.n	8000cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
    {
        HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);  // 👈 Debug indicator
 8000c48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c4c:	481b      	ldr	r0, [pc, #108]	@ (8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000c4e:	f001 fe50 	bl	80028f2 <HAL_GPIO_TogglePin>

        int8_t idx = motor_index_from_id(rx_header.StdId);
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ffaa 	bl	8000bb0 <motor_index_from_id>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (idx >= 0)
 8000c62:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db24      	blt.n	8000cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
        {
            get_motor_measure(&all_motors[idx], rx_data);
 8000c6a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	4a13      	ldr	r2, [pc, #76]	@ (8000cc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000c72:	4413      	add	r3, r2
 8000c74:	f107 0208 	add.w	r2, r7, #8
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fe64 	bl	8000948 <get_motor_measure>
            all_motors[idx].angle_deg = (all_motors[idx].ecd / 8192.0f) * 360.0f;
 8000c80:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000c84:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	4413      	add	r3, r2
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	ee07 3a90 	vmov	s15, r3
 8000c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c94:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8000cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
 8000c98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000ca0:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000cc8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca8:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	4413      	add	r3, r2
 8000cae:	330c      	adds	r3, #12
 8000cb0:	edc3 7a00 	vstr	s15, [r3]
        }
    }
}
 8000cb4:	bf00      	nop
 8000cb6:	3730      	adds	r7, #48	@ 0x30
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40021c00 	.word	0x40021c00
 8000cc0:	200000cc 	.word	0x200000cc
 8000cc4:	46000000 	.word	0x46000000
 8000cc8:	43b40000 	.word	0x43b40000

08000ccc <PIDController_Init>:
// Global safety flag (NEW)
static bool system_in_safe_mode = false;

MotorPID motor_pids[NUM_MOTORS];

void PIDController_Init(PIDController *pid, float kp, float ki, float kd, float out_min, float out_max) {
 8000ccc:	b480      	push	{r7}
 8000cce:	b087      	sub	sp, #28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6178      	str	r0, [r7, #20]
 8000cd4:	ed87 0a04 	vstr	s0, [r7, #16]
 8000cd8:	edc7 0a03 	vstr	s1, [r7, #12]
 8000cdc:	ed87 1a02 	vstr	s2, [r7, #8]
 8000ce0:	edc7 1a01 	vstr	s3, [r7, #4]
 8000ce4:	ed87 2a00 	vstr	s4, [r7]
    pid->Kp = kp;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	601a      	str	r2, [r3, #0]
    pid->Ki = ki;
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	605a      	str	r2, [r3, #4]
    pid->Kd = kd;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	609a      	str	r2, [r3, #8]
    pid->integral = 0.0f;
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f04f 0200 	mov.w	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0.0f;
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f04f 0200 	mov.w	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
    pid->outMin = out_min;
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	615a      	str	r2, [r3, #20]
    pid->outMax = out_max;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	619a      	str	r2, [r3, #24]
}
 8000d16:	bf00      	nop
 8000d18:	371c      	adds	r7, #28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement, float dt) {
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	@ 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d30:	edc7 0a01 	vstr	s1, [r7, #4]
 8000d34:	ed87 1a00 	vstr	s2, [r7]
    float error = setpoint - measurement;
 8000d38:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d44:	edc7 7a05 	vstr	s15, [r7, #20]
    float proportional = pid->Kp * error;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	edd3 7a00 	vldr	s15, [r3]
 8000d4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d56:	edc7 7a04 	vstr	s15, [r7, #16]

    // Integral with clamp
    pid->integral += pid->Ki * error * dt;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d6e:	edd7 7a00 	vldr	s15, [r7]
 8000d72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	edc3 7a03 	vstr	s15, [r3, #12]
    if (pid->integral > pid->outMax) pid->integral = pid->outMax;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	ed93 7a03 	vldr	s14, [r3, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d94:	dd03      	ble.n	8000d9e <PIDController_Update+0x7a>
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	699a      	ldr	r2, [r3, #24]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	60da      	str	r2, [r3, #12]
    if (pid->integral < pid->outMin) pid->integral = pid->outMin;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	ed93 7a03 	vldr	s14, [r3, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db2:	d503      	bpl.n	8000dbc <PIDController_Update+0x98>
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	695a      	ldr	r2, [r3, #20]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	60da      	str	r2, [r3, #12]

    // Derivative term with simple clamp to avoid spikes (NEW)
    float derivative = 0.0f;
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    if (dt > 1e-6f) {
 8000dc2:	edd7 7a00 	vldr	s15, [r7]
 8000dc6:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000e94 <PIDController_Update+0x170>
 8000dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd2:	dd2b      	ble.n	8000e2c <PIDController_Update+0x108>
        derivative = pid->Kd * (error - pid->prev_error) / dt;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	ed93 7a02 	vldr	s14, [r3, #8]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000de0:	edd7 6a05 	vldr	s13, [r7, #20]
 8000de4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000de8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000dec:	ed97 7a00 	vldr	s14, [r7]
 8000df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df4:	edc7 7a07 	vstr	s15, [r7, #28]
        if (derivative > pid->outMax) derivative = pid->outMax;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	edd3 7a06 	vldr	s15, [r3, #24]
 8000dfe:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0a:	dd02      	ble.n	8000e12 <PIDController_Update+0xee>
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	61fb      	str	r3, [r7, #28]
        if (derivative < pid->outMin) derivative = pid->outMin;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e18:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e24:	d502      	bpl.n	8000e2c <PIDController_Update+0x108>
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	61fb      	str	r3, [r7, #28]
    }

    float output = proportional + pid->integral + derivative;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e32:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e42:	edc7 7a06 	vstr	s15, [r7, #24]
    if (output > pid->outMax) output = pid->outMax;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e4c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e58:	dd02      	ble.n	8000e60 <PIDController_Update+0x13c>
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	61bb      	str	r3, [r7, #24]
    if (output < pid->outMin) output = pid->outMin;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e66:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e72:	d502      	bpl.n	8000e7a <PIDController_Update+0x156>
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	61bb      	str	r3, [r7, #24]

    pid->prev_error = error;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	611a      	str	r2, [r3, #16]
    return output;
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	ee07 3a90 	vmov	s15, r3
}
 8000e86:	eeb0 0a67 	vmov.f32	s0, s15
 8000e8a:	3724      	adds	r7, #36	@ 0x24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	358637bd 	.word	0x358637bd

08000e98 <MotorPID_Init>:

void MotorPID_Init(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_MOTORS; i++) {
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	e080      	b.n	8000fa6 <MotorPID_Init+0x10e>
        motor_pids[i].motor = &all_motors[i];
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	4a44      	ldr	r2, [pc, #272]	@ (8000fbc <MotorPID_Init+0x124>)
 8000eaa:	1899      	adds	r1, r3, r2
 8000eac:	4844      	ldr	r0, [pc, #272]	@ (8000fc0 <MotorPID_Init+0x128>)
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	4413      	add	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	4403      	add	r3, r0
 8000eba:	333c      	adds	r3, #60	@ 0x3c
 8000ebc:	6019      	str	r1, [r3, #0]
        motor_pids[i].target_position = 0.0f;
 8000ebe:	4940      	ldr	r1, [pc, #256]	@ (8000fc0 <MotorPID_Init+0x128>)
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	440b      	add	r3, r1
 8000ecc:	3338      	adds	r3, #56	@ 0x38
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
        motor_pids[i].is_gm6020 = (i >= 3);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	bfcc      	ite	gt
 8000eda:	2301      	movgt	r3, #1
 8000edc:	2300      	movle	r3, #0
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	4937      	ldr	r1, [pc, #220]	@ (8000fc0 <MotorPID_Init+0x128>)
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	4413      	add	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	440b      	add	r3, r1
 8000ef0:	3340      	adds	r3, #64	@ 0x40
 8000ef2:	6018      	str	r0, [r3, #0]
        motor_pids[i].active = false;  // Motor starts as inactive
 8000ef4:	4932      	ldr	r1, [pc, #200]	@ (8000fc0 <MotorPID_Init+0x128>)
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	4413      	add	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	440b      	add	r3, r1
 8000f02:	3344      	adds	r3, #68	@ 0x44
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]

        // Position PID
        PIDController_Init(&motor_pids[i].pos_pid, 2.0f, 0.01f, 0.0f, -5000.0f, 5000.0f);
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc0 <MotorPID_Init+0x128>)
 8000f14:	4413      	add	r3, r2
 8000f16:	ed9f 2a2b 	vldr	s4, [pc, #172]	@ 8000fc4 <MotorPID_Init+0x12c>
 8000f1a:	eddf 1a2b 	vldr	s3, [pc, #172]	@ 8000fc8 <MotorPID_Init+0x130>
 8000f1e:	ed9f 1a2b 	vldr	s2, [pc, #172]	@ 8000fcc <MotorPID_Init+0x134>
 8000f22:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8000fd0 <MotorPID_Init+0x138>
 8000f26:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fece 	bl	8000ccc <PIDController_Init>

        // Velocity PID
        if (motor_pids[i].is_gm6020) {
 8000f30:	4923      	ldr	r1, [pc, #140]	@ (8000fc0 <MotorPID_Init+0x128>)
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	4613      	mov	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3340      	adds	r3, #64	@ 0x40
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d016      	beq.n	8000f74 <MotorPID_Init+0xdc>
            PIDController_Init(&motor_pids[i].vel_pid, 1.0f, 0.05f, 0.05f, -20000.0f, 20000.0f);
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	3318      	adds	r3, #24
 8000f52:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <MotorPID_Init+0x128>)
 8000f54:	4413      	add	r3, r2
 8000f56:	3304      	adds	r3, #4
 8000f58:	ed9f 2a1e 	vldr	s4, [pc, #120]	@ 8000fd4 <MotorPID_Init+0x13c>
 8000f5c:	eddf 1a1e 	vldr	s3, [pc, #120]	@ 8000fd8 <MotorPID_Init+0x140>
 8000f60:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 8000fdc <MotorPID_Init+0x144>
 8000f64:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8000fdc <MotorPID_Init+0x144>
 8000f68:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fead 	bl	8000ccc <PIDController_Init>
 8000f72:	e015      	b.n	8000fa0 <MotorPID_Init+0x108>
        } else {
            PIDController_Init(&motor_pids[i].vel_pid, 1.0f, 0.05f, 0.05f, -10000.0f, 10000.0f);
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	4413      	add	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	3318      	adds	r3, #24
 8000f80:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc0 <MotorPID_Init+0x128>)
 8000f82:	4413      	add	r3, r2
 8000f84:	3304      	adds	r3, #4
 8000f86:	ed9f 2a16 	vldr	s4, [pc, #88]	@ 8000fe0 <MotorPID_Init+0x148>
 8000f8a:	eddf 1a16 	vldr	s3, [pc, #88]	@ 8000fe4 <MotorPID_Init+0x14c>
 8000f8e:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8000fdc <MotorPID_Init+0x144>
 8000f92:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8000fdc <MotorPID_Init+0x144>
 8000f96:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fe96 	bl	8000ccc <PIDController_Init>
    for (int i = 0; i < NUM_MOTORS; i++) {
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b05      	cmp	r3, #5
 8000faa:	f77f af7b 	ble.w	8000ea4 <MotorPID_Init+0xc>
        }
    }

    Disable_All_Motors();  // NEW: Ensure all motors are off at init
 8000fae:	f000 f863 	bl	8001078 <Disable_All_Motors>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200000cc 	.word	0x200000cc
 8000fc0:	20000130 	.word	0x20000130
 8000fc4:	459c4000 	.word	0x459c4000
 8000fc8:	c59c4000 	.word	0xc59c4000
 8000fcc:	00000000 	.word	0x00000000
 8000fd0:	3c23d70a 	.word	0x3c23d70a
 8000fd4:	469c4000 	.word	0x469c4000
 8000fd8:	c69c4000 	.word	0xc69c4000
 8000fdc:	3d4ccccd 	.word	0x3d4ccccd
 8000fe0:	461c4000 	.word	0x461c4000
 8000fe4:	c61c4000 	.word	0xc61c4000

08000fe8 <Set_Motor_Position>:

void Set_Motor_Position(int index, float position_deg) {
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	ed87 0a00 	vstr	s0, [r7]
    if (index < 0 || index >= NUM_MOTORS) return;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db2d      	blt.n	8001056 <Set_Motor_Position+0x6e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b05      	cmp	r3, #5
 8000ffe:	dc2a      	bgt.n	8001056 <Set_Motor_Position+0x6e>

    // Clamp to safe range (NEW)
    if (position_deg > SAFE_MAX_ANGLE) position_deg = SAFE_MAX_ANGLE;
 8001000:	edd7 7a00 	vldr	s15, [r7]
 8001004:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001064 <Set_Motor_Position+0x7c>
 8001008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001010:	dd01      	ble.n	8001016 <Set_Motor_Position+0x2e>
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <Set_Motor_Position+0x80>)
 8001014:	603b      	str	r3, [r7, #0]
    if (position_deg < SAFE_MIN_ANGLE) position_deg = SAFE_MIN_ANGLE;
 8001016:	edd7 7a00 	vldr	s15, [r7]
 800101a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800106c <Set_Motor_Position+0x84>
 800101e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001026:	d501      	bpl.n	800102c <Set_Motor_Position+0x44>
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <Set_Motor_Position+0x88>)
 800102a:	603b      	str	r3, [r7, #0]

    motor_pids[index].target_position = position_deg;
 800102c:	4911      	ldr	r1, [pc, #68]	@ (8001074 <Set_Motor_Position+0x8c>)
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4413      	add	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	440b      	add	r3, r1
 800103a:	3338      	adds	r3, #56	@ 0x38
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	601a      	str	r2, [r3, #0]
    motor_pids[index].active = true;
 8001040:	490c      	ldr	r1, [pc, #48]	@ (8001074 <Set_Motor_Position+0x8c>)
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	440b      	add	r3, r1
 800104e:	3344      	adds	r3, #68	@ 0x44
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e000      	b.n	8001058 <Set_Motor_Position+0x70>
    if (index < 0 || index >= NUM_MOTORS) return;
 8001056:	bf00      	nop
}
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	43340000 	.word	0x43340000
 8001068:	43340000 	.word	0x43340000
 800106c:	c3340000 	.word	0xc3340000
 8001070:	c3340000 	.word	0xc3340000
 8001074:	20000130 	.word	0x20000130

08001078 <Disable_All_Motors>:
    motor_pids[index].active = false;
    motor_pids[index].pos_pid.integral = 0.0f;
    motor_pids[index].vel_pid.integral = 0.0f;
}

void Disable_All_Motors(void) {
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_MOTORS; i++) {
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	e022      	b.n	80010ca <Disable_All_Motors+0x52>
        motor_pids[i].active = false;
 8001084:	4916      	ldr	r1, [pc, #88]	@ (80010e0 <Disable_All_Motors+0x68>)
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4413      	add	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	440b      	add	r3, r1
 8001092:	3344      	adds	r3, #68	@ 0x44
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
        motor_pids[i].pos_pid.integral = 0.0f;
 8001098:	4911      	ldr	r1, [pc, #68]	@ (80010e0 <Disable_All_Motors+0x68>)
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	440b      	add	r3, r1
 80010a6:	330c      	adds	r3, #12
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
        motor_pids[i].vel_pid.integral = 0.0f;
 80010ae:	490c      	ldr	r1, [pc, #48]	@ (80010e0 <Disable_All_Motors+0x68>)
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	3328      	adds	r3, #40	@ 0x28
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_MOTORS; i++) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3301      	adds	r3, #1
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	ddd9      	ble.n	8001084 <Disable_All_Motors+0xc>
    }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000130 	.word	0x20000130

080010e4 <Motor_Control_Update>:
        Set_M2006_Current(0, 0, 0);
        Set_GM6020_Current(0, 0, 0);
    }
}

void Motor_Control_Update(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	@ 0x28
 80010e8:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    uint32_t now = HAL_GetTick();
 80010ea:	f000 faa5 	bl	8001638 <HAL_GetTick>
 80010ee:	61b8      	str	r0, [r7, #24]

    // Skip on first run (NEW)
    if (last_tick == 0) {
 80010f0:	4b87      	ldr	r3, [pc, #540]	@ (8001310 <Motor_Control_Update+0x22c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d10d      	bne.n	8001114 <Motor_Control_Update+0x30>
        last_tick = now;
 80010f8:	4a85      	ldr	r2, [pc, #532]	@ (8001310 <Motor_Control_Update+0x22c>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	6013      	str	r3, [r2, #0]
        Set_M2006_Current(0, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff fcfa 	bl	8000afc <Set_M2006_Current>
        Set_GM6020_Current(0, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fc9b 	bl	8000a48 <Set_GM6020_Current>
        return;
 8001112:	e0fa      	b.n	800130a <Motor_Control_Update+0x226>
    }

    float dt = (now - last_tick) / 1000.0f;
 8001114:	4b7e      	ldr	r3, [pc, #504]	@ (8001310 <Motor_Control_Update+0x22c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001124:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 8001314 <Motor_Control_Update+0x230>
 8001128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    last_tick = now;
 8001130:	4a77      	ldr	r2, [pc, #476]	@ (8001310 <Motor_Control_Update+0x22c>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	6013      	str	r3, [r2, #0]
    if (dt <= 0.0f) dt = 0.001f;
 8001136:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800113a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	d801      	bhi.n	8001148 <Motor_Control_Update+0x64>
 8001144:	4b74      	ldr	r3, [pc, #464]	@ (8001318 <Motor_Control_Update+0x234>)
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24

    // Global safety check (NEW)
    if (system_in_safe_mode) {
 8001148:	4b74      	ldr	r3, [pc, #464]	@ (800131c <Motor_Control_Update+0x238>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00a      	beq.n	8001166 <Motor_Control_Update+0x82>
        Set_M2006_Current(0, 0, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff fcd1 	bl	8000afc <Set_M2006_Current>
        Set_GM6020_Current(0, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff fc72 	bl	8000a48 <Set_GM6020_Current>
        return;
 8001164:	e0d1      	b.n	800130a <Motor_Control_Update+0x226>
    }

    int16_t currents[NUM_MOTORS] = {0};
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]

    for (int i = 0; i < NUM_MOTORS; i++) {
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
 8001174:	e0b3      	b.n	80012de <Motor_Control_Update+0x1fa>
        if (!motor_pids[i].active) {
 8001176:	496a      	ldr	r1, [pc, #424]	@ (8001320 <Motor_Control_Update+0x23c>)
 8001178:	6a3a      	ldr	r2, [r7, #32]
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4413      	add	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	440b      	add	r3, r1
 8001184:	3344      	adds	r3, #68	@ 0x44
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	f083 0301 	eor.w	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <Motor_Control_Update+0xbe>
            currents[i] = 0;  // inactive motors always zero
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	3328      	adds	r3, #40	@ 0x28
 8001198:	443b      	add	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	f823 2c24 	strh.w	r2, [r3, #-36]
            continue;
 80011a0:	e09a      	b.n	80012d8 <Motor_Control_Update+0x1f4>
        }

        // Compute position error with shortest path (NEW: to handle wrapping)
        float pos_error = motor_pids[i].target_position - motor_pids[i].motor->angle_deg;
 80011a2:	495f      	ldr	r1, [pc, #380]	@ (8001320 <Motor_Control_Update+0x23c>)
 80011a4:	6a3a      	ldr	r2, [r7, #32]
 80011a6:	4613      	mov	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	4413      	add	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	440b      	add	r3, r1
 80011b0:	3338      	adds	r3, #56	@ 0x38
 80011b2:	ed93 7a00 	vldr	s14, [r3]
 80011b6:	495a      	ldr	r1, [pc, #360]	@ (8001320 <Motor_Control_Update+0x23c>)
 80011b8:	6a3a      	ldr	r2, [r7, #32]
 80011ba:	4613      	mov	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4413      	add	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	440b      	add	r3, r1
 80011c4:	333c      	adds	r3, #60	@ 0x3c
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80011cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d0:	edc7 7a05 	vstr	s15, [r7, #20]
        pos_error = fmodf(pos_error + 180.0f, 360.0f) - 180.0f;
 80011d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80011d8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001324 <Motor_Control_Update+0x240>
 80011dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011e0:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001328 <Motor_Control_Update+0x244>
 80011e4:	eeb0 0a67 	vmov.f32	s0, s15
 80011e8:	f002 faec 	bl	80037c4 <fmodf>
 80011ec:	eef0 7a40 	vmov.f32	s15, s0
 80011f0:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001324 <Motor_Control_Update+0x240>
 80011f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011f8:	edc7 7a05 	vstr	s15, [r7, #20]

        float vel_set = PIDController_Update(
 80011fc:	6a3a      	ldr	r2, [r7, #32]
 80011fe:	4613      	mov	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	4413      	add	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4a46      	ldr	r2, [pc, #280]	@ (8001320 <Motor_Control_Update+0x23c>)
 8001208:	1899      	adds	r1, r3, r2
 800120a:	4845      	ldr	r0, [pc, #276]	@ (8001320 <Motor_Control_Update+0x23c>)
 800120c:	6a3a      	ldr	r2, [r7, #32]
 800120e:	4613      	mov	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4403      	add	r3, r0
 8001218:	3338      	adds	r3, #56	@ 0x38
 800121a:	edd3 7a00 	vldr	s15, [r3]
            &motor_pids[i].pos_pid,
            motor_pids[i].target_position,
            motor_pids[i].motor->angle_deg,
 800121e:	4840      	ldr	r0, [pc, #256]	@ (8001320 <Motor_Control_Update+0x23c>)
 8001220:	6a3a      	ldr	r2, [r7, #32]
 8001222:	4613      	mov	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4403      	add	r3, r0
 800122c:	333c      	adds	r3, #60	@ 0x3c
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	ed93 7a03 	vldr	s14, [r3, #12]
        float vel_set = PIDController_Update(
 8001234:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8001238:	eef0 0a47 	vmov.f32	s1, s14
 800123c:	eeb0 0a67 	vmov.f32	s0, s15
 8001240:	4608      	mov	r0, r1
 8001242:	f7ff fd6f 	bl	8000d24 <PIDController_Update>
 8001246:	ed87 0a04 	vstr	s0, [r7, #16]
            dt
        );

        float current = PIDController_Update(
 800124a:	6a3a      	ldr	r2, [r7, #32]
 800124c:	4613      	mov	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4413      	add	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	3318      	adds	r3, #24
 8001256:	4a32      	ldr	r2, [pc, #200]	@ (8001320 <Motor_Control_Update+0x23c>)
 8001258:	4413      	add	r3, r2
 800125a:	1d19      	adds	r1, r3, #4
            &motor_pids[i].vel_pid,
            vel_set,
            (float)motor_pids[i].motor->speed_rpm,
 800125c:	4830      	ldr	r0, [pc, #192]	@ (8001320 <Motor_Control_Update+0x23c>)
 800125e:	6a3a      	ldr	r2, [r7, #32]
 8001260:	4613      	mov	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	4413      	add	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4403      	add	r3, r0
 800126a:	333c      	adds	r3, #60	@ 0x3c
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        float current = PIDController_Update(
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127a:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 800127e:	eef0 0a67 	vmov.f32	s1, s15
 8001282:	ed97 0a04 	vldr	s0, [r7, #16]
 8001286:	4608      	mov	r0, r1
 8001288:	f7ff fd4c 	bl	8000d24 <PIDController_Update>
 800128c:	ed87 0a07 	vstr	s0, [r7, #28]
            dt
        );

        // Explicit cast with bounds check (NEW: though clamps should prevent overflow)
        if (current > 32767.0f) current = 32767.0f;
 8001290:	edd7 7a07 	vldr	s15, [r7, #28]
 8001294:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800132c <Motor_Control_Update+0x248>
 8001298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800129c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a0:	dd01      	ble.n	80012a6 <Motor_Control_Update+0x1c2>
 80012a2:	4b23      	ldr	r3, [pc, #140]	@ (8001330 <Motor_Control_Update+0x24c>)
 80012a4:	61fb      	str	r3, [r7, #28]
        if (current < -32768.0f) current = -32768.0f;
 80012a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80012aa:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001334 <Motor_Control_Update+0x250>
 80012ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b6:	d502      	bpl.n	80012be <Motor_Control_Update+0x1da>
 80012b8:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 80012bc:	61fb      	str	r3, [r7, #28]
        currents[i] = (int16_t)current;
 80012be:	edd7 7a07 	vldr	s15, [r7, #28]
 80012c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c6:	ee17 3a90 	vmov	r3, s15
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	6a3b      	ldr	r3, [r7, #32]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	3328      	adds	r3, #40	@ 0x28
 80012d2:	443b      	add	r3, r7
 80012d4:	f823 2c24 	strh.w	r2, [r3, #-36]
    for (int i = 0; i < NUM_MOTORS; i++) {
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	3301      	adds	r3, #1
 80012dc:	623b      	str	r3, [r7, #32]
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	2b05      	cmp	r3, #5
 80012e2:	f77f af48 	ble.w	8001176 <Motor_Control_Update+0x92>
    }

    // Send to M2006 (indices 0,1,2)
    Set_M2006_Current(currents[0], currents[1], currents[2]);
 80012e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012ea:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80012ee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fc02 	bl	8000afc <Set_M2006_Current>

    // Send to GM6020 (indices 3,4,5)
    Set_GM6020_Current(currents[3], currents[4], currents[5]);
 80012f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012fc:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001300:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fb9f 	bl	8000a48 <Set_GM6020_Current>
}
 800130a:	3728      	adds	r7, #40	@ 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200002e0 	.word	0x200002e0
 8001314:	447a0000 	.word	0x447a0000
 8001318:	3a83126f 	.word	0x3a83126f
 800131c:	2000012c 	.word	0x2000012c
 8001320:	20000130 	.word	0x20000130
 8001324:	43340000 	.word	0x43340000
 8001328:	43b40000 	.word	0x43b40000
 800132c:	46fffe00 	.word	0x46fffe00
 8001330:	46fffe00 	.word	0x46fffe00
 8001334:	c7000000 	.word	0xc7000000

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	4a0f      	ldr	r2, [pc, #60]	@ (8001384 <HAL_MspInit+0x4c>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800134c:	6453      	str	r3, [r2, #68]	@ 0x44
 800134e:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <HAL_MspInit+0x4c>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	4a08      	ldr	r2, [pc, #32]	@ (8001384 <HAL_MspInit+0x4c>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001368:	6413      	str	r3, [r2, #64]	@ 0x40
 800136a:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <HAL_MspInit+0x4c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800

08001388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <NMI_Handler+0x4>

08001390 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <MemManage_Handler+0x4>

080013a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <UsageFault_Handler+0x4>

080013b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013de:	f000 f917 	bl	8001610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <CAN1_RX0_IRQHandler+0x10>)
 80013ee:	f000 fd89 	bl	8001f04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000078 	.word	0x20000078

080013fc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <CAN2_RX0_IRQHandler+0x10>)
 8001402:	f000 fd7f 	bl	8001f04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200000a0 	.word	0x200000a0

08001410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <SystemInit+0x20>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800141a:	4a05      	ldr	r2, [pc, #20]	@ (8001430 <SystemInit+0x20>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <MX_USART3_UART_Init+0x4c>)
 800143a:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <MX_USART3_UART_Init+0x50>)
 800143c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <MX_USART3_UART_Init+0x4c>)
 8001440:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001444:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <MX_USART3_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <MX_USART3_UART_Init+0x4c>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <MX_USART3_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001458:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <MX_USART3_UART_Init+0x4c>)
 800145a:	220c      	movs	r2, #12
 800145c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145e:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <MX_USART3_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <MX_USART3_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	@ (8001480 <MX_USART3_UART_Init+0x4c>)
 800146c:	f001 feb4 	bl	80031d8 <HAL_UART_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001476:	f7ff fa51 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200002e4 	.word	0x200002e4
 8001484:	40004800 	.word	0x40004800

08001488 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	@ 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a19      	ldr	r2, [pc, #100]	@ (800150c <HAL_UART_MspInit+0x84>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d12c      	bne.n	8001504 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <HAL_UART_MspInit+0x88>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	4a17      	ldr	r2, [pc, #92]	@ (8001510 <HAL_UART_MspInit+0x88>)
 80014b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ba:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <HAL_UART_MspInit+0x88>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <HAL_UART_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a10      	ldr	r2, [pc, #64]	@ (8001510 <HAL_UART_MspInit+0x88>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <HAL_UART_MspInit+0x88>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80014e2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014f4:	2307      	movs	r3, #7
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4805      	ldr	r0, [pc, #20]	@ (8001514 <HAL_UART_MspInit+0x8c>)
 8001500:	f001 f842 	bl	8002588 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	@ 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40004800 	.word	0x40004800
 8001510:	40023800 	.word	0x40023800
 8001514:	40020800 	.word	0x40020800

08001518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001518:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001550 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800151c:	f7ff ff78 	bl	8001410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001522:	490d      	ldr	r1, [pc, #52]	@ (8001558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001524:	4a0d      	ldr	r2, [pc, #52]	@ (800155c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001538:	4c0a      	ldr	r4, [pc, #40]	@ (8001564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001546:	f002 f919 	bl	800377c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154a:	f7ff f95d 	bl	8000808 <main>
  bx  lr    
 800154e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800155c:	08003950 	.word	0x08003950
  ldr r2, =_sbss
 8001560:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001564:	20000468 	.word	0x20000468

08001568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <HAL_Init+0x40>)
 8001576:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800157a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0a      	ldr	r2, [pc, #40]	@ (80015ac <HAL_Init+0x40>)
 8001582:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001586:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a07      	ldr	r2, [pc, #28]	@ (80015ac <HAL_Init+0x40>)
 800158e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001592:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001594:	2003      	movs	r0, #3
 8001596:	f000 ffb5 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159a:	200f      	movs	r0, #15
 800159c:	f000 f808 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a0:	f7ff feca 	bl	8001338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_InitTick+0x54>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_InitTick+0x58>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 ffcd 	bl	800256e <HAL_SYSTICK_Config>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e00e      	b.n	80015fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b0f      	cmp	r3, #15
 80015e2:	d80a      	bhi.n	80015fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e4:	2200      	movs	r2, #0
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f000 ff95 	bl	800251a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f0:	4a06      	ldr	r2, [pc, #24]	@ (800160c <HAL_InitTick+0x5c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000000 	.word	0x20000000
 8001608:	20000008 	.word	0x20000008
 800160c:	20000004 	.word	0x20000004

08001610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <HAL_IncTick+0x20>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <HAL_IncTick+0x24>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a04      	ldr	r2, [pc, #16]	@ (8001634 <HAL_IncTick+0x24>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000008 	.word	0x20000008
 8001634:	2000032c 	.word	0x2000032c

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <HAL_GetTick+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	2000032c 	.word	0x2000032c

08001650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff ffee 	bl	8001638 <HAL_GetTick>
 800165c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001668:	d005      	beq.n	8001676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166a:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <HAL_Delay+0x44>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001676:	bf00      	nop
 8001678:	f7ff ffde 	bl	8001638 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	429a      	cmp	r2, r3
 8001686:	d8f7      	bhi.n	8001678 <HAL_Delay+0x28>
  {
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000008 	.word	0x20000008

08001698 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e0ed      	b.n	8001886 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7fe ff88 	bl	80005cc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016cc:	f7ff ffb4 	bl	8001638 <HAL_GetTick>
 80016d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016d2:	e012      	b.n	80016fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016d4:	f7ff ffb0 	bl	8001638 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b0a      	cmp	r3, #10
 80016e0:	d90b      	bls.n	80016fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2205      	movs	r2, #5
 80016f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0c5      	b.n	8001886 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0e5      	beq.n	80016d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0202 	bic.w	r2, r2, #2
 8001716:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001718:	f7ff ff8e 	bl	8001638 <HAL_GetTick>
 800171c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800171e:	e012      	b.n	8001746 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001720:	f7ff ff8a 	bl	8001638 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b0a      	cmp	r3, #10
 800172c:	d90b      	bls.n	8001746 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001732:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2205      	movs	r2, #5
 800173e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e09f      	b.n	8001886 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1e5      	bne.n	8001720 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e1b      	ldrb	r3, [r3, #24]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d108      	bne.n	800176e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e007      	b.n	800177e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800177c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7e5b      	ldrb	r3, [r3, #25]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d108      	bne.n	8001798 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	e007      	b.n	80017a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80017a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7e9b      	ldrb	r3, [r3, #26]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d108      	bne.n	80017c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0220 	orr.w	r2, r2, #32
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e007      	b.n	80017d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0220 	bic.w	r2, r2, #32
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7edb      	ldrb	r3, [r3, #27]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d108      	bne.n	80017ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0210 	bic.w	r2, r2, #16
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	e007      	b.n	80017fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0210 	orr.w	r2, r2, #16
 80017fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7f1b      	ldrb	r3, [r3, #28]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d108      	bne.n	8001816 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0208 	orr.w	r2, r2, #8
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e007      	b.n	8001826 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0208 	bic.w	r2, r2, #8
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7f5b      	ldrb	r3, [r3, #29]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d108      	bne.n	8001840 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0204 	orr.w	r2, r2, #4
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e007      	b.n	8001850 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0204 	bic.w	r2, r2, #4
 800184e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	ea42 0103 	orr.w	r1, r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	1e5a      	subs	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80018a2:	7dfb      	ldrb	r3, [r7, #23]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d003      	beq.n	80018b0 <HAL_CAN_ConfigFilter+0x20>
 80018a8:	7dfb      	ldrb	r3, [r7, #23]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	f040 80be 	bne.w	8001a2c <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80018b0:	4b65      	ldr	r3, [pc, #404]	@ (8001a48 <HAL_CAN_ConfigFilter+0x1b8>)
 80018b2:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018ca:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431a      	orrs	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	f003 031f 	and.w	r3, r3, #31
 80018f0:	2201      	movs	r2, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	401a      	ands	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d123      	bne.n	800195a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43db      	mvns	r3, r3
 800191c:	401a      	ands	r2, r3
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001934:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	3248      	adds	r2, #72	@ 0x48
 800193a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800194e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001950:	6939      	ldr	r1, [r7, #16]
 8001952:	3348      	adds	r3, #72	@ 0x48
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d122      	bne.n	80019a8 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	431a      	orrs	r2, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001982:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	3248      	adds	r2, #72	@ 0x48
 8001988:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800199c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800199e:	6939      	ldr	r1, [r7, #16]
 80019a0:	3348      	adds	r3, #72	@ 0x48
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	440b      	add	r3, r1
 80019a6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d109      	bne.n	80019c4 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	401a      	ands	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80019c2:	e007      	b.n	80019d4 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d109      	bne.n	80019f0 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	401a      	ands	r2, r3
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80019ee:	e007      	b.n	8001a00 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	431a      	orrs	r2, r3
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d107      	bne.n	8001a18 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	431a      	orrs	r2, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a1e:	f023 0201 	bic.w	r2, r3, #1
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e006      	b.n	8001a3a <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a30:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
  }
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	371c      	adds	r7, #28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40006400 	.word	0x40006400

08001a4c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d12e      	bne.n	8001abe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2202      	movs	r2, #2
 8001a64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0201 	bic.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a78:	f7ff fdde 	bl	8001638 <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a7e:	e012      	b.n	8001aa6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a80:	f7ff fdda 	bl	8001638 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b0a      	cmp	r3, #10
 8001a8c:	d90b      	bls.n	8001aa6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2205      	movs	r2, #5
 8001a9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e012      	b.n	8001acc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1e5      	bne.n	8001a80 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e006      	b.n	8001acc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
  }
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	@ 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001af2:	7ffb      	ldrb	r3, [r7, #31]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d003      	beq.n	8001b00 <HAL_CAN_AddTxMessage+0x2c>
 8001af8:	7ffb      	ldrb	r3, [r7, #31]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	f040 80ad 	bne.w	8001c5a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10a      	bne.n	8001b20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d105      	bne.n	8001b20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8095 	beq.w	8001c4a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	0e1b      	lsrs	r3, r3, #24
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10d      	bne.n	8001b58 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b46:	68f9      	ldr	r1, [r7, #12]
 8001b48:	6809      	ldr	r1, [r1, #0]
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3318      	adds	r3, #24
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	440b      	add	r3, r1
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e00f      	b.n	8001b78 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b62:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b6c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3318      	adds	r3, #24
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	440b      	add	r3, r1
 8001b76:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6819      	ldr	r1, [r3, #0]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	3318      	adds	r3, #24
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	440b      	add	r3, r1
 8001b88:	3304      	adds	r3, #4
 8001b8a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	7d1b      	ldrb	r3, [r3, #20]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d111      	bne.n	8001bb8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	3318      	adds	r3, #24
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	6811      	ldr	r1, [r2, #0]
 8001ba8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3318      	adds	r3, #24
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3307      	adds	r3, #7
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	061a      	lsls	r2, r3, #24
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3306      	adds	r3, #6
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	041b      	lsls	r3, r3, #16
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3305      	adds	r3, #5
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	3204      	adds	r2, #4
 8001bd8:	7812      	ldrb	r2, [r2, #0]
 8001bda:	4610      	mov	r0, r2
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	6811      	ldr	r1, [r2, #0]
 8001be0:	ea43 0200 	orr.w	r2, r3, r0
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	440b      	add	r3, r1
 8001bea:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001bee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3303      	adds	r3, #3
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	061a      	lsls	r2, r3, #24
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	041b      	lsls	r3, r3, #16
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3301      	adds	r3, #1
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	4610      	mov	r0, r2
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	6811      	ldr	r1, [r2, #0]
 8001c16:	ea43 0200 	orr.w	r2, r3, r0
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	440b      	add	r3, r1
 8001c20:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001c24:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3318      	adds	r3, #24
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	4413      	add	r3, r2
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	6811      	ldr	r1, [r2, #0]
 8001c38:	f043 0201 	orr.w	r2, r3, #1
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	3318      	adds	r3, #24
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	440b      	add	r3, r1
 8001c44:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e00e      	b.n	8001c68 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e006      	b.n	8001c68 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
  }
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3724      	adds	r7, #36	@ 0x24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c88:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d003      	beq.n	8001c98 <HAL_CAN_GetRxMessage+0x24>
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	f040 8103 	bne.w	8001e9e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10e      	bne.n	8001cbc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d116      	bne.n	8001cda <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0f7      	b.n	8001eac <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d107      	bne.n	8001cda <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e0e8      	b.n	8001eac <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	331b      	adds	r3, #27
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	4413      	add	r3, r2
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0204 	and.w	r2, r3, #4
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10c      	bne.n	8001d12 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	331b      	adds	r3, #27
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	4413      	add	r3, r2
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0d5b      	lsrs	r3, r3, #21
 8001d08:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	e00b      	b.n	8001d2a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	331b      	adds	r3, #27
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	4413      	add	r3, r2
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	08db      	lsrs	r3, r3, #3
 8001d22:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	331b      	adds	r3, #27
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	4413      	add	r3, r2
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0202 	and.w	r2, r3, #2
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	331b      	adds	r3, #27
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2208      	movs	r2, #8
 8001d5c:	611a      	str	r2, [r3, #16]
 8001d5e:	e00b      	b.n	8001d78 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	331b      	adds	r3, #27
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 020f 	and.w	r2, r3, #15
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	331b      	adds	r3, #27
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	4413      	add	r3, r2
 8001d84:	3304      	adds	r3, #4
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	331b      	adds	r3, #27
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0c1b      	lsrs	r3, r3, #16
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0a1a      	lsrs	r2, r3, #8
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0c1a      	lsrs	r2, r3, #16
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	3302      	adds	r3, #2
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	0e1a      	lsrs	r2, r3, #24
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	3303      	adds	r3, #3
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0a1a      	lsrs	r2, r3, #8
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	3305      	adds	r3, #5
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	0c1a      	lsrs	r2, r3, #16
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	3306      	adds	r3, #6
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0e1a      	lsrs	r2, r3, #24
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	3307      	adds	r3, #7
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d108      	bne.n	8001e8a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0220 	orr.w	r2, r2, #32
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	e007      	b.n	8001e9a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0220 	orr.w	r2, r2, #32
 8001e98:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e006      	b.n	8001eac <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
  }
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	371c      	adds	r7, #28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d002      	beq.n	8001ed6 <HAL_CAN_ActivateNotification+0x1e>
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d109      	bne.n	8001eea <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6959      	ldr	r1, [r3, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e006      	b.n	8001ef8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
  }
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	@ 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d07c      	beq.n	8002044 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d023      	beq.n	8001f9c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f983 	bl	8002272 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f6c:	e016      	b.n	8001f9c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d004      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f80:	e00c      	b.n	8001f9c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d004      	beq.n	8001f96 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f94:	e002      	b.n	8001f9c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f989 	bl	80022ae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d024      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f963 	bl	8002286 <HAL_CAN_TxMailbox1CompleteCallback>
 8001fc0:	e016      	b.n	8001ff0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d004      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fd4:	e00c      	b.n	8001ff0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d004      	beq.n	8001fea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe8:	e002      	b.n	8001ff0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f969 	bl	80022c2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d024      	beq.n	8002044 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002002:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f943 	bl	800229a <HAL_CAN_TxMailbox2CompleteCallback>
 8002014:	e016      	b.n	8002044 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d004      	beq.n	800202a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
 8002028:	e00c      	b.n	8002044 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d004      	beq.n	800203e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800203a:	627b      	str	r3, [r7, #36]	@ 0x24
 800203c:	e002      	b.n	8002044 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f949 	bl	80022d6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00c      	beq.n	8002068 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2210      	movs	r2, #16
 8002066:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2208      	movs	r2, #8
 8002082:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f930 	bl	80022ea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d009      	beq.n	80020a8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fdbc 	bl	8000c20 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00c      	beq.n	80020cc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020c2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2210      	movs	r2, #16
 80020ca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d006      	beq.n	80020ee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2208      	movs	r2, #8
 80020e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f912 	bl	8002312 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f8f9 	bl	80022fe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00b      	beq.n	800212e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2210      	movs	r2, #16
 8002126:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f8fc 	bl	8002326 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00b      	beq.n	8002150 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d006      	beq.n	8002150 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2208      	movs	r2, #8
 8002148:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f8f5 	bl	800233a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d07b      	beq.n	8002252 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d072      	beq.n	800224a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d008      	beq.n	8002180 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	f043 0302 	orr.w	r3, r3, #2
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d008      	beq.n	80021b8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d043      	beq.n	800224a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d03e      	beq.n	800224a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021d2:	2b60      	cmp	r3, #96	@ 0x60
 80021d4:	d02b      	beq.n	800222e <HAL_CAN_IRQHandler+0x32a>
 80021d6:	2b60      	cmp	r3, #96	@ 0x60
 80021d8:	d82e      	bhi.n	8002238 <HAL_CAN_IRQHandler+0x334>
 80021da:	2b50      	cmp	r3, #80	@ 0x50
 80021dc:	d022      	beq.n	8002224 <HAL_CAN_IRQHandler+0x320>
 80021de:	2b50      	cmp	r3, #80	@ 0x50
 80021e0:	d82a      	bhi.n	8002238 <HAL_CAN_IRQHandler+0x334>
 80021e2:	2b40      	cmp	r3, #64	@ 0x40
 80021e4:	d019      	beq.n	800221a <HAL_CAN_IRQHandler+0x316>
 80021e6:	2b40      	cmp	r3, #64	@ 0x40
 80021e8:	d826      	bhi.n	8002238 <HAL_CAN_IRQHandler+0x334>
 80021ea:	2b30      	cmp	r3, #48	@ 0x30
 80021ec:	d010      	beq.n	8002210 <HAL_CAN_IRQHandler+0x30c>
 80021ee:	2b30      	cmp	r3, #48	@ 0x30
 80021f0:	d822      	bhi.n	8002238 <HAL_CAN_IRQHandler+0x334>
 80021f2:	2b10      	cmp	r3, #16
 80021f4:	d002      	beq.n	80021fc <HAL_CAN_IRQHandler+0x2f8>
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d005      	beq.n	8002206 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021fa:	e01d      	b.n	8002238 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	f043 0308 	orr.w	r3, r3, #8
 8002202:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002204:	e019      	b.n	800223a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002208:	f043 0310 	orr.w	r3, r3, #16
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800220e:	e014      	b.n	800223a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002212:	f043 0320 	orr.w	r3, r3, #32
 8002216:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002218:	e00f      	b.n	800223a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002220:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002222:	e00a      	b.n	800223a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800222c:	e005      	b.n	800223a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002236:	e000      	b.n	800223a <HAL_CAN_IRQHandler+0x336>
            break;
 8002238:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699a      	ldr	r2, [r3, #24]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002248:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2204      	movs	r2, #4
 8002250:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800225c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f872 	bl	800234e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800226a:	bf00      	nop
 800226c:	3728      	adds	r7, #40	@ 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800238c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002396:	4a04      	ldr	r2, [pc, #16]	@ (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60d3      	str	r3, [r2, #12]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4907      	ldr	r1, [pc, #28]	@ (8002400 <__NVIC_EnableIRQ+0x38>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	@ (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	@ (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	@ 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
         );
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	@ 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024d0:	d301      	bcc.n	80024d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00f      	b.n	80024f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <SysTick_Config+0x40>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024de:	210f      	movs	r1, #15
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f7ff ff8e 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e8:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <SysTick_Config+0x40>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ee:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <SysTick_Config+0x40>)
 80024f0:	2207      	movs	r2, #7
 80024f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff29 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800252c:	f7ff ff3e 	bl	80023ac <__NVIC_GetPriorityGrouping>
 8002530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7ff ff8e 	bl	8002458 <NVIC_EncodePriority>
 800253c:	4602      	mov	r2, r0
 800253e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff5d 	bl	8002404 <__NVIC_SetPriority>
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff31 	bl	80023c8 <__NVIC_EnableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ffa2 	bl	80024c0 <SysTick_Config>
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	@ 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	e16b      	b.n	800287c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a4:	2201      	movs	r2, #1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	429a      	cmp	r2, r3
 80025be:	f040 815a 	bne.w	8002876 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d005      	beq.n	80025da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d130      	bne.n	800263c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	2203      	movs	r2, #3
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002610:	2201      	movs	r2, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 0201 	and.w	r2, r3, #1
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b03      	cmp	r3, #3
 8002646:	d017      	beq.n	8002678 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	2203      	movs	r2, #3
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d123      	bne.n	80026cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	08da      	lsrs	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3208      	adds	r2, #8
 800268c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	220f      	movs	r2, #15
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	08da      	lsrs	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3208      	adds	r2, #8
 80026c6:	69b9      	ldr	r1, [r7, #24]
 80026c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0203 	and.w	r2, r3, #3
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80b4 	beq.w	8002876 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	4b60      	ldr	r3, [pc, #384]	@ (8002894 <HAL_GPIO_Init+0x30c>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002716:	4a5f      	ldr	r2, [pc, #380]	@ (8002894 <HAL_GPIO_Init+0x30c>)
 8002718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800271c:	6453      	str	r3, [r2, #68]	@ 0x44
 800271e:	4b5d      	ldr	r3, [pc, #372]	@ (8002894 <HAL_GPIO_Init+0x30c>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800272a:	4a5b      	ldr	r2, [pc, #364]	@ (8002898 <HAL_GPIO_Init+0x310>)
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	3302      	adds	r3, #2
 8002732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	220f      	movs	r2, #15
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a52      	ldr	r2, [pc, #328]	@ (800289c <HAL_GPIO_Init+0x314>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d02b      	beq.n	80027ae <HAL_GPIO_Init+0x226>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a51      	ldr	r2, [pc, #324]	@ (80028a0 <HAL_GPIO_Init+0x318>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d025      	beq.n	80027aa <HAL_GPIO_Init+0x222>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a50      	ldr	r2, [pc, #320]	@ (80028a4 <HAL_GPIO_Init+0x31c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d01f      	beq.n	80027a6 <HAL_GPIO_Init+0x21e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a4f      	ldr	r2, [pc, #316]	@ (80028a8 <HAL_GPIO_Init+0x320>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d019      	beq.n	80027a2 <HAL_GPIO_Init+0x21a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4e      	ldr	r2, [pc, #312]	@ (80028ac <HAL_GPIO_Init+0x324>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_GPIO_Init+0x216>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a4d      	ldr	r2, [pc, #308]	@ (80028b0 <HAL_GPIO_Init+0x328>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00d      	beq.n	800279a <HAL_GPIO_Init+0x212>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a4c      	ldr	r2, [pc, #304]	@ (80028b4 <HAL_GPIO_Init+0x32c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d007      	beq.n	8002796 <HAL_GPIO_Init+0x20e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a4b      	ldr	r2, [pc, #300]	@ (80028b8 <HAL_GPIO_Init+0x330>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d101      	bne.n	8002792 <HAL_GPIO_Init+0x20a>
 800278e:	2307      	movs	r3, #7
 8002790:	e00e      	b.n	80027b0 <HAL_GPIO_Init+0x228>
 8002792:	2308      	movs	r3, #8
 8002794:	e00c      	b.n	80027b0 <HAL_GPIO_Init+0x228>
 8002796:	2306      	movs	r3, #6
 8002798:	e00a      	b.n	80027b0 <HAL_GPIO_Init+0x228>
 800279a:	2305      	movs	r3, #5
 800279c:	e008      	b.n	80027b0 <HAL_GPIO_Init+0x228>
 800279e:	2304      	movs	r3, #4
 80027a0:	e006      	b.n	80027b0 <HAL_GPIO_Init+0x228>
 80027a2:	2303      	movs	r3, #3
 80027a4:	e004      	b.n	80027b0 <HAL_GPIO_Init+0x228>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e002      	b.n	80027b0 <HAL_GPIO_Init+0x228>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <HAL_GPIO_Init+0x228>
 80027ae:	2300      	movs	r3, #0
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	f002 0203 	and.w	r2, r2, #3
 80027b6:	0092      	lsls	r2, r2, #2
 80027b8:	4093      	lsls	r3, r2
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c0:	4935      	ldr	r1, [pc, #212]	@ (8002898 <HAL_GPIO_Init+0x310>)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	089b      	lsrs	r3, r3, #2
 80027c6:	3302      	adds	r3, #2
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ce:	4b3b      	ldr	r3, [pc, #236]	@ (80028bc <HAL_GPIO_Init+0x334>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027f2:	4a32      	ldr	r2, [pc, #200]	@ (80028bc <HAL_GPIO_Init+0x334>)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f8:	4b30      	ldr	r3, [pc, #192]	@ (80028bc <HAL_GPIO_Init+0x334>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800281c:	4a27      	ldr	r2, [pc, #156]	@ (80028bc <HAL_GPIO_Init+0x334>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002822:	4b26      	ldr	r3, [pc, #152]	@ (80028bc <HAL_GPIO_Init+0x334>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002846:	4a1d      	ldr	r2, [pc, #116]	@ (80028bc <HAL_GPIO_Init+0x334>)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800284c:	4b1b      	ldr	r3, [pc, #108]	@ (80028bc <HAL_GPIO_Init+0x334>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002870:	4a12      	ldr	r2, [pc, #72]	@ (80028bc <HAL_GPIO_Init+0x334>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3301      	adds	r3, #1
 800287a:	61fb      	str	r3, [r7, #28]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b0f      	cmp	r3, #15
 8002880:	f67f ae90 	bls.w	80025a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3724      	adds	r7, #36	@ 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	40013800 	.word	0x40013800
 800289c:	40020000 	.word	0x40020000
 80028a0:	40020400 	.word	0x40020400
 80028a4:	40020800 	.word	0x40020800
 80028a8:	40020c00 	.word	0x40020c00
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40021400 	.word	0x40021400
 80028b4:	40021800 	.word	0x40021800
 80028b8:	40021c00 	.word	0x40021c00
 80028bc:	40013c00 	.word	0x40013c00

080028c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
 80028cc:	4613      	mov	r3, r2
 80028ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d0:	787b      	ldrb	r3, [r7, #1]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d6:	887a      	ldrh	r2, [r7, #2]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028dc:	e003      	b.n	80028e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	041a      	lsls	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	619a      	str	r2, [r3, #24]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002904:	887a      	ldrh	r2, [r7, #2]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4013      	ands	r3, r2
 800290a:	041a      	lsls	r2, r3, #16
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	43d9      	mvns	r1, r3
 8002910:	887b      	ldrh	r3, [r7, #2]
 8002912:	400b      	ands	r3, r1
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	619a      	str	r2, [r3, #24]
}
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e267      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d075      	beq.n	8002a32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002946:	4b88      	ldr	r3, [pc, #544]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b04      	cmp	r3, #4
 8002950:	d00c      	beq.n	800296c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002952:	4b85      	ldr	r3, [pc, #532]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800295a:	2b08      	cmp	r3, #8
 800295c:	d112      	bne.n	8002984 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295e:	4b82      	ldr	r3, [pc, #520]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002966:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800296a:	d10b      	bne.n	8002984 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d05b      	beq.n	8002a30 <HAL_RCC_OscConfig+0x108>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d157      	bne.n	8002a30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e242      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800298c:	d106      	bne.n	800299c <HAL_RCC_OscConfig+0x74>
 800298e:	4b76      	ldr	r3, [pc, #472]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a75      	ldr	r2, [pc, #468]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e01d      	b.n	80029d8 <HAL_RCC_OscConfig+0xb0>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x98>
 80029a6:	4b70      	ldr	r3, [pc, #448]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a6f      	ldr	r2, [pc, #444]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a6c      	ldr	r2, [pc, #432]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e00b      	b.n	80029d8 <HAL_RCC_OscConfig+0xb0>
 80029c0:	4b69      	ldr	r3, [pc, #420]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a68      	ldr	r2, [pc, #416]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b66      	ldr	r3, [pc, #408]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a65      	ldr	r2, [pc, #404]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d013      	beq.n	8002a08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe fe2a 	bl	8001638 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e8:	f7fe fe26 	bl	8001638 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	@ 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e207      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0xc0>
 8002a06:	e014      	b.n	8002a32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fe fe16 	bl	8001638 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a10:	f7fe fe12 	bl	8001638 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	@ 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e1f3      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a22:	4b51      	ldr	r3, [pc, #324]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0xe8>
 8002a2e:	e000      	b.n	8002a32 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d063      	beq.n	8002b06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00b      	beq.n	8002a62 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4a:	4b47      	ldr	r3, [pc, #284]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d11c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a56:	4b44      	ldr	r3, [pc, #272]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d116      	bne.n	8002a90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a62:	4b41      	ldr	r3, [pc, #260]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_RCC_OscConfig+0x152>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e1c7      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4937      	ldr	r1, [pc, #220]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8e:	e03a      	b.n	8002b06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d020      	beq.n	8002ada <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a98:	4b34      	ldr	r3, [pc, #208]	@ (8002b6c <HAL_RCC_OscConfig+0x244>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9e:	f7fe fdcb 	bl	8001638 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa6:	f7fe fdc7 	bl	8001638 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e1a8      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac4:	4b28      	ldr	r3, [pc, #160]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4925      	ldr	r1, [pc, #148]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	600b      	str	r3, [r1, #0]
 8002ad8:	e015      	b.n	8002b06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ada:	4b24      	ldr	r3, [pc, #144]	@ (8002b6c <HAL_RCC_OscConfig+0x244>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fdaa 	bl	8001638 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae8:	f7fe fda6 	bl	8001638 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e187      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afa:	4b1b      	ldr	r3, [pc, #108]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d036      	beq.n	8002b80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d016      	beq.n	8002b48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1a:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <HAL_RCC_OscConfig+0x248>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7fe fd8a 	bl	8001638 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b28:	f7fe fd86 	bl	8001638 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e167      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x200>
 8002b46:	e01b      	b.n	8002b80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b48:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <HAL_RCC_OscConfig+0x248>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fd73 	bl	8001638 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	e00e      	b.n	8002b74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b56:	f7fe fd6f 	bl	8001638 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d907      	bls.n	8002b74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e150      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	42470000 	.word	0x42470000
 8002b70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b74:	4b88      	ldr	r3, [pc, #544]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1ea      	bne.n	8002b56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8097 	beq.w	8002cbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b92:	4b81      	ldr	r3, [pc, #516]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10f      	bne.n	8002bbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	4b7d      	ldr	r3, [pc, #500]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	4a7c      	ldr	r2, [pc, #496]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bae:	4b7a      	ldr	r3, [pc, #488]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbe:	4b77      	ldr	r3, [pc, #476]	@ (8002d9c <HAL_RCC_OscConfig+0x474>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d118      	bne.n	8002bfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bca:	4b74      	ldr	r3, [pc, #464]	@ (8002d9c <HAL_RCC_OscConfig+0x474>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a73      	ldr	r2, [pc, #460]	@ (8002d9c <HAL_RCC_OscConfig+0x474>)
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fd2f 	bl	8001638 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bde:	f7fe fd2b 	bl	8001638 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e10c      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8002d9c <HAL_RCC_OscConfig+0x474>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d106      	bne.n	8002c12 <HAL_RCC_OscConfig+0x2ea>
 8002c04:	4b64      	ldr	r3, [pc, #400]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c08:	4a63      	ldr	r2, [pc, #396]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c10:	e01c      	b.n	8002c4c <HAL_RCC_OscConfig+0x324>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b05      	cmp	r3, #5
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x30c>
 8002c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c20:	f043 0304 	orr.w	r3, r3, #4
 8002c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c26:	4b5c      	ldr	r3, [pc, #368]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0x324>
 8002c34:	4b58      	ldr	r3, [pc, #352]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c38:	4a57      	ldr	r2, [pc, #348]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c3a:	f023 0301 	bic.w	r3, r3, #1
 8002c3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c40:	4b55      	ldr	r3, [pc, #340]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c44:	4a54      	ldr	r2, [pc, #336]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c46:	f023 0304 	bic.w	r3, r3, #4
 8002c4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d015      	beq.n	8002c80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fe fcf0 	bl	8001638 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5c:	f7fe fcec 	bl	8001638 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e0cb      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c72:	4b49      	ldr	r3, [pc, #292]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0ee      	beq.n	8002c5c <HAL_RCC_OscConfig+0x334>
 8002c7e:	e014      	b.n	8002caa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c80:	f7fe fcda 	bl	8001638 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c88:	f7fe fcd6 	bl	8001638 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e0b5      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1ee      	bne.n	8002c88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d105      	bne.n	8002cbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb0:	4b39      	ldr	r3, [pc, #228]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb4:	4a38      	ldr	r2, [pc, #224]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002cb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80a1 	beq.w	8002e08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cc6:	4b34      	ldr	r3, [pc, #208]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d05c      	beq.n	8002d8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d141      	bne.n	8002d5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cda:	4b31      	ldr	r3, [pc, #196]	@ (8002da0 <HAL_RCC_OscConfig+0x478>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fcaa 	bl	8001638 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fe fca6 	bl	8001638 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e087      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfa:	4b27      	ldr	r3, [pc, #156]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69da      	ldr	r2, [r3, #28]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	019b      	lsls	r3, r3, #6
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1c:	085b      	lsrs	r3, r3, #1
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d28:	061b      	lsls	r3, r3, #24
 8002d2a:	491b      	ldr	r1, [pc, #108]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d30:	4b1b      	ldr	r3, [pc, #108]	@ (8002da0 <HAL_RCC_OscConfig+0x478>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fe fc7f 	bl	8001638 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7fe fc7b 	bl	8001638 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e05c      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d50:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x416>
 8002d5c:	e054      	b.n	8002e08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5e:	4b10      	ldr	r3, [pc, #64]	@ (8002da0 <HAL_RCC_OscConfig+0x478>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fc68 	bl	8001638 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fe fc64 	bl	8001638 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e045      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x444>
 8002d8a:	e03d      	b.n	8002e08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e038      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40007000 	.word	0x40007000
 8002da0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002da4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e14 <HAL_RCC_OscConfig+0x4ec>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d028      	beq.n	8002e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d121      	bne.n	8002e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d11a      	bne.n	8002e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d111      	bne.n	8002e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dea:	085b      	lsrs	r3, r3, #1
 8002dec:	3b01      	subs	r3, #1
 8002dee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d107      	bne.n	8002e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800

08002e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0cc      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b68      	ldr	r3, [pc, #416]	@ (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d90c      	bls.n	8002e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b65      	ldr	r3, [pc, #404]	@ (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e42:	4b63      	ldr	r3, [pc, #396]	@ (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0b8      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e6c:	4b59      	ldr	r3, [pc, #356]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4a58      	ldr	r2, [pc, #352]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e84:	4b53      	ldr	r3, [pc, #332]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a52      	ldr	r2, [pc, #328]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e90:	4b50      	ldr	r3, [pc, #320]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	494d      	ldr	r1, [pc, #308]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d044      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	4b47      	ldr	r3, [pc, #284]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d119      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e07f      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d003      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e06f      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e067      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ef6:	4b37      	ldr	r3, [pc, #220]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f023 0203 	bic.w	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4934      	ldr	r1, [pc, #208]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f08:	f7fe fb96 	bl	8001638 <HAL_GetTick>
 8002f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f10:	f7fe fb92 	bl	8001638 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e04f      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 020c 	and.w	r2, r3, #12
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d1eb      	bne.n	8002f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f38:	4b25      	ldr	r3, [pc, #148]	@ (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d20c      	bcs.n	8002f60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b22      	ldr	r3, [pc, #136]	@ (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b20      	ldr	r3, [pc, #128]	@ (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e032      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f6c:	4b19      	ldr	r3, [pc, #100]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4916      	ldr	r1, [pc, #88]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f8a:	4b12      	ldr	r3, [pc, #72]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	490e      	ldr	r1, [pc, #56]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f9e:	f000 f821 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	490a      	ldr	r1, [pc, #40]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb0:	5ccb      	ldrb	r3, [r1, r3]
 8002fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb6:	4a09      	ldr	r2, [pc, #36]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002fba:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe faf6 	bl	80015b0 <HAL_InitTick>

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023c00 	.word	0x40023c00
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	08003920 	.word	0x08003920
 8002fdc:	20000000 	.word	0x20000000
 8002fe0:	20000004 	.word	0x20000004

08002fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe8:	b090      	sub	sp, #64	@ 0x40
 8002fea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ffc:	4b59      	ldr	r3, [pc, #356]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b08      	cmp	r3, #8
 8003006:	d00d      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x40>
 8003008:	2b08      	cmp	r3, #8
 800300a:	f200 80a1 	bhi.w	8003150 <HAL_RCC_GetSysClockFreq+0x16c>
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0x34>
 8003012:	2b04      	cmp	r3, #4
 8003014:	d003      	beq.n	800301e <HAL_RCC_GetSysClockFreq+0x3a>
 8003016:	e09b      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b53      	ldr	r3, [pc, #332]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x184>)
 800301a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800301c:	e09b      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800301e:	4b53      	ldr	r3, [pc, #332]	@ (800316c <HAL_RCC_GetSysClockFreq+0x188>)
 8003020:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003022:	e098      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003024:	4b4f      	ldr	r3, [pc, #316]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x180>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800302c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800302e:	4b4d      	ldr	r3, [pc, #308]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x180>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d028      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303a:	4b4a      	ldr	r3, [pc, #296]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x180>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	099b      	lsrs	r3, r3, #6
 8003040:	2200      	movs	r2, #0
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	627a      	str	r2, [r7, #36]	@ 0x24
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800304c:	2100      	movs	r1, #0
 800304e:	4b47      	ldr	r3, [pc, #284]	@ (800316c <HAL_RCC_GetSysClockFreq+0x188>)
 8003050:	fb03 f201 	mul.w	r2, r3, r1
 8003054:	2300      	movs	r3, #0
 8003056:	fb00 f303 	mul.w	r3, r0, r3
 800305a:	4413      	add	r3, r2
 800305c:	4a43      	ldr	r2, [pc, #268]	@ (800316c <HAL_RCC_GetSysClockFreq+0x188>)
 800305e:	fba0 1202 	umull	r1, r2, r0, r2
 8003062:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003064:	460a      	mov	r2, r1
 8003066:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003068:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800306a:	4413      	add	r3, r2
 800306c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800306e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003070:	2200      	movs	r2, #0
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	61fa      	str	r2, [r7, #28]
 8003076:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800307a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800307e:	f7fd f8a3 	bl	80001c8 <__aeabi_uldivmod>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4613      	mov	r3, r2
 8003088:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800308a:	e053      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308c:	4b35      	ldr	r3, [pc, #212]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x180>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	2200      	movs	r2, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	617a      	str	r2, [r7, #20]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800309e:	f04f 0b00 	mov.w	fp, #0
 80030a2:	4652      	mov	r2, sl
 80030a4:	465b      	mov	r3, fp
 80030a6:	f04f 0000 	mov.w	r0, #0
 80030aa:	f04f 0100 	mov.w	r1, #0
 80030ae:	0159      	lsls	r1, r3, #5
 80030b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b4:	0150      	lsls	r0, r2, #5
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	ebb2 080a 	subs.w	r8, r2, sl
 80030be:	eb63 090b 	sbc.w	r9, r3, fp
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030d6:	ebb2 0408 	subs.w	r4, r2, r8
 80030da:	eb63 0509 	sbc.w	r5, r3, r9
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	00eb      	lsls	r3, r5, #3
 80030e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ec:	00e2      	lsls	r2, r4, #3
 80030ee:	4614      	mov	r4, r2
 80030f0:	461d      	mov	r5, r3
 80030f2:	eb14 030a 	adds.w	r3, r4, sl
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	eb45 030b 	adc.w	r3, r5, fp
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800310a:	4629      	mov	r1, r5
 800310c:	028b      	lsls	r3, r1, #10
 800310e:	4621      	mov	r1, r4
 8003110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003114:	4621      	mov	r1, r4
 8003116:	028a      	lsls	r2, r1, #10
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311e:	2200      	movs	r2, #0
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	60fa      	str	r2, [r7, #12]
 8003124:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003128:	f7fd f84e 	bl	80001c8 <__aeabi_uldivmod>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4613      	mov	r3, r2
 8003132:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003134:	4b0b      	ldr	r3, [pc, #44]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x180>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	3301      	adds	r3, #1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003144:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800314e:	e002      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003150:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x184>)
 8003152:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003158:	4618      	mov	r0, r3
 800315a:	3740      	adds	r7, #64	@ 0x40
 800315c:	46bd      	mov	sp, r7
 800315e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
 8003168:	00f42400 	.word	0x00f42400
 800316c:	00b71b00 	.word	0x00b71b00

08003170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003174:	4b03      	ldr	r3, [pc, #12]	@ (8003184 <HAL_RCC_GetHCLKFreq+0x14>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000000 	.word	0x20000000

08003188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800318c:	f7ff fff0 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 8003190:	4602      	mov	r2, r0
 8003192:	4b05      	ldr	r3, [pc, #20]	@ (80031a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	0a9b      	lsrs	r3, r3, #10
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	4903      	ldr	r1, [pc, #12]	@ (80031ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800319e:	5ccb      	ldrb	r3, [r1, r3]
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40023800 	.word	0x40023800
 80031ac:	08003930 	.word	0x08003930

080031b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031b4:	f7ff ffdc 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	0b5b      	lsrs	r3, r3, #13
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	4903      	ldr	r1, [pc, #12]	@ (80031d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	08003930 	.word	0x08003930

080031d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e042      	b.n	8003270 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fe f942 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	@ 0x24
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800321a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f82b 	bl	8003278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800327c:	b0c0      	sub	sp, #256	@ 0x100
 800327e:	af00      	add	r7, sp, #0
 8003280:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003294:	68d9      	ldr	r1, [r3, #12]
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	ea40 0301 	orr.w	r3, r0, r1
 80032a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80032d0:	f021 010c 	bic.w	r1, r1, #12
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032de:	430b      	orrs	r3, r1
 80032e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f2:	6999      	ldr	r1, [r3, #24]
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	ea40 0301 	orr.w	r3, r0, r1
 80032fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4b8f      	ldr	r3, [pc, #572]	@ (8003544 <UART_SetConfig+0x2cc>)
 8003308:	429a      	cmp	r2, r3
 800330a:	d005      	beq.n	8003318 <UART_SetConfig+0xa0>
 800330c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4b8d      	ldr	r3, [pc, #564]	@ (8003548 <UART_SetConfig+0x2d0>)
 8003314:	429a      	cmp	r2, r3
 8003316:	d104      	bne.n	8003322 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003318:	f7ff ff4a 	bl	80031b0 <HAL_RCC_GetPCLK2Freq>
 800331c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003320:	e003      	b.n	800332a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003322:	f7ff ff31 	bl	8003188 <HAL_RCC_GetPCLK1Freq>
 8003326:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800332a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003334:	f040 810c 	bne.w	8003550 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800333c:	2200      	movs	r2, #0
 800333e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003342:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003346:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800334a:	4622      	mov	r2, r4
 800334c:	462b      	mov	r3, r5
 800334e:	1891      	adds	r1, r2, r2
 8003350:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003352:	415b      	adcs	r3, r3
 8003354:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003356:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800335a:	4621      	mov	r1, r4
 800335c:	eb12 0801 	adds.w	r8, r2, r1
 8003360:	4629      	mov	r1, r5
 8003362:	eb43 0901 	adc.w	r9, r3, r1
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800337a:	4690      	mov	r8, r2
 800337c:	4699      	mov	r9, r3
 800337e:	4623      	mov	r3, r4
 8003380:	eb18 0303 	adds.w	r3, r8, r3
 8003384:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003388:	462b      	mov	r3, r5
 800338a:	eb49 0303 	adc.w	r3, r9, r3
 800338e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800339e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80033a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033a6:	460b      	mov	r3, r1
 80033a8:	18db      	adds	r3, r3, r3
 80033aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80033ac:	4613      	mov	r3, r2
 80033ae:	eb42 0303 	adc.w	r3, r2, r3
 80033b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80033b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80033b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80033bc:	f7fc ff04 	bl	80001c8 <__aeabi_uldivmod>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4b61      	ldr	r3, [pc, #388]	@ (800354c <UART_SetConfig+0x2d4>)
 80033c6:	fba3 2302 	umull	r2, r3, r3, r2
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	011c      	lsls	r4, r3, #4
 80033ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80033e0:	4642      	mov	r2, r8
 80033e2:	464b      	mov	r3, r9
 80033e4:	1891      	adds	r1, r2, r2
 80033e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80033e8:	415b      	adcs	r3, r3
 80033ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033f0:	4641      	mov	r1, r8
 80033f2:	eb12 0a01 	adds.w	sl, r2, r1
 80033f6:	4649      	mov	r1, r9
 80033f8:	eb43 0b01 	adc.w	fp, r3, r1
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003408:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800340c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003410:	4692      	mov	sl, r2
 8003412:	469b      	mov	fp, r3
 8003414:	4643      	mov	r3, r8
 8003416:	eb1a 0303 	adds.w	r3, sl, r3
 800341a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800341e:	464b      	mov	r3, r9
 8003420:	eb4b 0303 	adc.w	r3, fp, r3
 8003424:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003434:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003438:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800343c:	460b      	mov	r3, r1
 800343e:	18db      	adds	r3, r3, r3
 8003440:	643b      	str	r3, [r7, #64]	@ 0x40
 8003442:	4613      	mov	r3, r2
 8003444:	eb42 0303 	adc.w	r3, r2, r3
 8003448:	647b      	str	r3, [r7, #68]	@ 0x44
 800344a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800344e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003452:	f7fc feb9 	bl	80001c8 <__aeabi_uldivmod>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4611      	mov	r1, r2
 800345c:	4b3b      	ldr	r3, [pc, #236]	@ (800354c <UART_SetConfig+0x2d4>)
 800345e:	fba3 2301 	umull	r2, r3, r3, r1
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2264      	movs	r2, #100	@ 0x64
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	1acb      	subs	r3, r1, r3
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003472:	4b36      	ldr	r3, [pc, #216]	@ (800354c <UART_SetConfig+0x2d4>)
 8003474:	fba3 2302 	umull	r2, r3, r3, r2
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003480:	441c      	add	r4, r3
 8003482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003486:	2200      	movs	r2, #0
 8003488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800348c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003490:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003494:	4642      	mov	r2, r8
 8003496:	464b      	mov	r3, r9
 8003498:	1891      	adds	r1, r2, r2
 800349a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800349c:	415b      	adcs	r3, r3
 800349e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80034a4:	4641      	mov	r1, r8
 80034a6:	1851      	adds	r1, r2, r1
 80034a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80034aa:	4649      	mov	r1, r9
 80034ac:	414b      	adcs	r3, r1
 80034ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80034bc:	4659      	mov	r1, fp
 80034be:	00cb      	lsls	r3, r1, #3
 80034c0:	4651      	mov	r1, sl
 80034c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034c6:	4651      	mov	r1, sl
 80034c8:	00ca      	lsls	r2, r1, #3
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	4603      	mov	r3, r0
 80034d0:	4642      	mov	r2, r8
 80034d2:	189b      	adds	r3, r3, r2
 80034d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034d8:	464b      	mov	r3, r9
 80034da:	460a      	mov	r2, r1
 80034dc:	eb42 0303 	adc.w	r3, r2, r3
 80034e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80034f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034f8:	460b      	mov	r3, r1
 80034fa:	18db      	adds	r3, r3, r3
 80034fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034fe:	4613      	mov	r3, r2
 8003500:	eb42 0303 	adc.w	r3, r2, r3
 8003504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003506:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800350a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800350e:	f7fc fe5b 	bl	80001c8 <__aeabi_uldivmod>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4b0d      	ldr	r3, [pc, #52]	@ (800354c <UART_SetConfig+0x2d4>)
 8003518:	fba3 1302 	umull	r1, r3, r3, r2
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	2164      	movs	r1, #100	@ 0x64
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	3332      	adds	r3, #50	@ 0x32
 800352a:	4a08      	ldr	r2, [pc, #32]	@ (800354c <UART_SetConfig+0x2d4>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	f003 0207 	and.w	r2, r3, #7
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4422      	add	r2, r4
 800353e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003540:	e106      	b.n	8003750 <UART_SetConfig+0x4d8>
 8003542:	bf00      	nop
 8003544:	40011000 	.word	0x40011000
 8003548:	40011400 	.word	0x40011400
 800354c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003554:	2200      	movs	r2, #0
 8003556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800355a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800355e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003562:	4642      	mov	r2, r8
 8003564:	464b      	mov	r3, r9
 8003566:	1891      	adds	r1, r2, r2
 8003568:	6239      	str	r1, [r7, #32]
 800356a:	415b      	adcs	r3, r3
 800356c:	627b      	str	r3, [r7, #36]	@ 0x24
 800356e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003572:	4641      	mov	r1, r8
 8003574:	1854      	adds	r4, r2, r1
 8003576:	4649      	mov	r1, r9
 8003578:	eb43 0501 	adc.w	r5, r3, r1
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	00eb      	lsls	r3, r5, #3
 8003586:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800358a:	00e2      	lsls	r2, r4, #3
 800358c:	4614      	mov	r4, r2
 800358e:	461d      	mov	r5, r3
 8003590:	4643      	mov	r3, r8
 8003592:	18e3      	adds	r3, r4, r3
 8003594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003598:	464b      	mov	r3, r9
 800359a:	eb45 0303 	adc.w	r3, r5, r3
 800359e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035be:	4629      	mov	r1, r5
 80035c0:	008b      	lsls	r3, r1, #2
 80035c2:	4621      	mov	r1, r4
 80035c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035c8:	4621      	mov	r1, r4
 80035ca:	008a      	lsls	r2, r1, #2
 80035cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80035d0:	f7fc fdfa 	bl	80001c8 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4b60      	ldr	r3, [pc, #384]	@ (800375c <UART_SetConfig+0x4e4>)
 80035da:	fba3 2302 	umull	r2, r3, r3, r2
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	011c      	lsls	r4, r3, #4
 80035e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035e6:	2200      	movs	r2, #0
 80035e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80035f4:	4642      	mov	r2, r8
 80035f6:	464b      	mov	r3, r9
 80035f8:	1891      	adds	r1, r2, r2
 80035fa:	61b9      	str	r1, [r7, #24]
 80035fc:	415b      	adcs	r3, r3
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003604:	4641      	mov	r1, r8
 8003606:	1851      	adds	r1, r2, r1
 8003608:	6139      	str	r1, [r7, #16]
 800360a:	4649      	mov	r1, r9
 800360c:	414b      	adcs	r3, r1
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800361c:	4659      	mov	r1, fp
 800361e:	00cb      	lsls	r3, r1, #3
 8003620:	4651      	mov	r1, sl
 8003622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003626:	4651      	mov	r1, sl
 8003628:	00ca      	lsls	r2, r1, #3
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	4603      	mov	r3, r0
 8003630:	4642      	mov	r2, r8
 8003632:	189b      	adds	r3, r3, r2
 8003634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003638:	464b      	mov	r3, r9
 800363a:	460a      	mov	r2, r1
 800363c:	eb42 0303 	adc.w	r3, r2, r3
 8003640:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800364e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800365c:	4649      	mov	r1, r9
 800365e:	008b      	lsls	r3, r1, #2
 8003660:	4641      	mov	r1, r8
 8003662:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003666:	4641      	mov	r1, r8
 8003668:	008a      	lsls	r2, r1, #2
 800366a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800366e:	f7fc fdab 	bl	80001c8 <__aeabi_uldivmod>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4611      	mov	r1, r2
 8003678:	4b38      	ldr	r3, [pc, #224]	@ (800375c <UART_SetConfig+0x4e4>)
 800367a:	fba3 2301 	umull	r2, r3, r3, r1
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	2264      	movs	r2, #100	@ 0x64
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	1acb      	subs	r3, r1, r3
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	3332      	adds	r3, #50	@ 0x32
 800368c:	4a33      	ldr	r2, [pc, #204]	@ (800375c <UART_SetConfig+0x4e4>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003698:	441c      	add	r4, r3
 800369a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800369e:	2200      	movs	r2, #0
 80036a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80036a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80036a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80036a8:	4642      	mov	r2, r8
 80036aa:	464b      	mov	r3, r9
 80036ac:	1891      	adds	r1, r2, r2
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	415b      	adcs	r3, r3
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036b8:	4641      	mov	r1, r8
 80036ba:	1851      	adds	r1, r2, r1
 80036bc:	6039      	str	r1, [r7, #0]
 80036be:	4649      	mov	r1, r9
 80036c0:	414b      	adcs	r3, r1
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036d0:	4659      	mov	r1, fp
 80036d2:	00cb      	lsls	r3, r1, #3
 80036d4:	4651      	mov	r1, sl
 80036d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036da:	4651      	mov	r1, sl
 80036dc:	00ca      	lsls	r2, r1, #3
 80036de:	4610      	mov	r0, r2
 80036e0:	4619      	mov	r1, r3
 80036e2:	4603      	mov	r3, r0
 80036e4:	4642      	mov	r2, r8
 80036e6:	189b      	adds	r3, r3, r2
 80036e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036ea:	464b      	mov	r3, r9
 80036ec:	460a      	mov	r2, r1
 80036ee:	eb42 0303 	adc.w	r3, r2, r3
 80036f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80036fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800370c:	4649      	mov	r1, r9
 800370e:	008b      	lsls	r3, r1, #2
 8003710:	4641      	mov	r1, r8
 8003712:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003716:	4641      	mov	r1, r8
 8003718:	008a      	lsls	r2, r1, #2
 800371a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800371e:	f7fc fd53 	bl	80001c8 <__aeabi_uldivmod>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4b0d      	ldr	r3, [pc, #52]	@ (800375c <UART_SetConfig+0x4e4>)
 8003728:	fba3 1302 	umull	r1, r3, r3, r2
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	2164      	movs	r1, #100	@ 0x64
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	3332      	adds	r3, #50	@ 0x32
 800373a:	4a08      	ldr	r2, [pc, #32]	@ (800375c <UART_SetConfig+0x4e4>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	f003 020f 	and.w	r2, r3, #15
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4422      	add	r2, r4
 800374e:	609a      	str	r2, [r3, #8]
}
 8003750:	bf00      	nop
 8003752:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003756:	46bd      	mov	sp, r7
 8003758:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800375c:	51eb851f 	.word	0x51eb851f

08003760 <memset>:
 8003760:	4402      	add	r2, r0
 8003762:	4603      	mov	r3, r0
 8003764:	4293      	cmp	r3, r2
 8003766:	d100      	bne.n	800376a <memset+0xa>
 8003768:	4770      	bx	lr
 800376a:	f803 1b01 	strb.w	r1, [r3], #1
 800376e:	e7f9      	b.n	8003764 <memset+0x4>

08003770 <__errno>:
 8003770:	4b01      	ldr	r3, [pc, #4]	@ (8003778 <__errno+0x8>)
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	2000000c 	.word	0x2000000c

0800377c <__libc_init_array>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d0d      	ldr	r5, [pc, #52]	@ (80037b4 <__libc_init_array+0x38>)
 8003780:	4c0d      	ldr	r4, [pc, #52]	@ (80037b8 <__libc_init_array+0x3c>)
 8003782:	1b64      	subs	r4, r4, r5
 8003784:	10a4      	asrs	r4, r4, #2
 8003786:	2600      	movs	r6, #0
 8003788:	42a6      	cmp	r6, r4
 800378a:	d109      	bne.n	80037a0 <__libc_init_array+0x24>
 800378c:	4d0b      	ldr	r5, [pc, #44]	@ (80037bc <__libc_init_array+0x40>)
 800378e:	4c0c      	ldr	r4, [pc, #48]	@ (80037c0 <__libc_init_array+0x44>)
 8003790:	f000 f8ba 	bl	8003908 <_init>
 8003794:	1b64      	subs	r4, r4, r5
 8003796:	10a4      	asrs	r4, r4, #2
 8003798:	2600      	movs	r6, #0
 800379a:	42a6      	cmp	r6, r4
 800379c:	d105      	bne.n	80037aa <__libc_init_array+0x2e>
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a4:	4798      	blx	r3
 80037a6:	3601      	adds	r6, #1
 80037a8:	e7ee      	b.n	8003788 <__libc_init_array+0xc>
 80037aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ae:	4798      	blx	r3
 80037b0:	3601      	adds	r6, #1
 80037b2:	e7f2      	b.n	800379a <__libc_init_array+0x1e>
 80037b4:	08003948 	.word	0x08003948
 80037b8:	08003948 	.word	0x08003948
 80037bc:	08003948 	.word	0x08003948
 80037c0:	0800394c 	.word	0x0800394c

080037c4 <fmodf>:
 80037c4:	b508      	push	{r3, lr}
 80037c6:	ed2d 8b02 	vpush	{d8}
 80037ca:	eef0 8a40 	vmov.f32	s17, s0
 80037ce:	eeb0 8a60 	vmov.f32	s16, s1
 80037d2:	f000 f817 	bl	8003804 <__ieee754_fmodf>
 80037d6:	eef4 8a48 	vcmp.f32	s17, s16
 80037da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037de:	d60c      	bvs.n	80037fa <fmodf+0x36>
 80037e0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8003800 <fmodf+0x3c>
 80037e4:	eeb4 8a68 	vcmp.f32	s16, s17
 80037e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ec:	d105      	bne.n	80037fa <fmodf+0x36>
 80037ee:	f7ff ffbf 	bl	8003770 <__errno>
 80037f2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80037f6:	2321      	movs	r3, #33	@ 0x21
 80037f8:	6003      	str	r3, [r0, #0]
 80037fa:	ecbd 8b02 	vpop	{d8}
 80037fe:	bd08      	pop	{r3, pc}
 8003800:	00000000 	.word	0x00000000

08003804 <__ieee754_fmodf>:
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	ee10 6a90 	vmov	r6, s1
 800380a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800380e:	1e5a      	subs	r2, r3, #1
 8003810:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8003814:	d206      	bcs.n	8003824 <__ieee754_fmodf+0x20>
 8003816:	ee10 4a10 	vmov	r4, s0
 800381a:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800381e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8003822:	d304      	bcc.n	800382e <__ieee754_fmodf+0x2a>
 8003824:	ee60 0a20 	vmul.f32	s1, s0, s1
 8003828:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800382c:	bd70      	pop	{r4, r5, r6, pc}
 800382e:	4299      	cmp	r1, r3
 8003830:	dbfc      	blt.n	800382c <__ieee754_fmodf+0x28>
 8003832:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 8003836:	d105      	bne.n	8003844 <__ieee754_fmodf+0x40>
 8003838:	4b32      	ldr	r3, [pc, #200]	@ (8003904 <__ieee754_fmodf+0x100>)
 800383a:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800383e:	ed93 0a00 	vldr	s0, [r3]
 8003842:	e7f3      	b.n	800382c <__ieee754_fmodf+0x28>
 8003844:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8003848:	d146      	bne.n	80038d8 <__ieee754_fmodf+0xd4>
 800384a:	020a      	lsls	r2, r1, #8
 800384c:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8003850:	2a00      	cmp	r2, #0
 8003852:	dc3e      	bgt.n	80038d2 <__ieee754_fmodf+0xce>
 8003854:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8003858:	bf01      	itttt	eq
 800385a:	021a      	lsleq	r2, r3, #8
 800385c:	fab2 f282 	clzeq	r2, r2
 8003860:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8003864:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 8003868:	bf16      	itet	ne
 800386a:	15da      	asrne	r2, r3, #23
 800386c:	3282      	addeq	r2, #130	@ 0x82
 800386e:	3a7f      	subne	r2, #127	@ 0x7f
 8003870:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8003874:	bfbb      	ittet	lt
 8003876:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800387a:	1a24      	sublt	r4, r4, r0
 800387c:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8003880:	40a1      	lsllt	r1, r4
 8003882:	bfa8      	it	ge
 8003884:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 8003888:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800388c:	bfb5      	itete	lt
 800388e:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8003892:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8003896:	1aa4      	sublt	r4, r4, r2
 8003898:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800389c:	bfb8      	it	lt
 800389e:	fa03 f404 	lsllt.w	r4, r3, r4
 80038a2:	1a80      	subs	r0, r0, r2
 80038a4:	1b0b      	subs	r3, r1, r4
 80038a6:	b9d0      	cbnz	r0, 80038de <__ieee754_fmodf+0xda>
 80038a8:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 80038ac:	bf28      	it	cs
 80038ae:	460b      	movcs	r3, r1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0c1      	beq.n	8003838 <__ieee754_fmodf+0x34>
 80038b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038b8:	db19      	blt.n	80038ee <__ieee754_fmodf+0xea>
 80038ba:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 80038be:	db19      	blt.n	80038f4 <__ieee754_fmodf+0xf0>
 80038c0:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80038c4:	327f      	adds	r2, #127	@ 0x7f
 80038c6:	432b      	orrs	r3, r5
 80038c8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80038cc:	ee00 3a10 	vmov	s0, r3
 80038d0:	e7ac      	b.n	800382c <__ieee754_fmodf+0x28>
 80038d2:	3801      	subs	r0, #1
 80038d4:	0052      	lsls	r2, r2, #1
 80038d6:	e7bb      	b.n	8003850 <__ieee754_fmodf+0x4c>
 80038d8:	15c8      	asrs	r0, r1, #23
 80038da:	387f      	subs	r0, #127	@ 0x7f
 80038dc:	e7ba      	b.n	8003854 <__ieee754_fmodf+0x50>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	da02      	bge.n	80038e8 <__ieee754_fmodf+0xe4>
 80038e2:	0049      	lsls	r1, r1, #1
 80038e4:	3801      	subs	r0, #1
 80038e6:	e7dd      	b.n	80038a4 <__ieee754_fmodf+0xa0>
 80038e8:	d0a6      	beq.n	8003838 <__ieee754_fmodf+0x34>
 80038ea:	0059      	lsls	r1, r3, #1
 80038ec:	e7fa      	b.n	80038e4 <__ieee754_fmodf+0xe0>
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	3a01      	subs	r2, #1
 80038f2:	e7df      	b.n	80038b4 <__ieee754_fmodf+0xb0>
 80038f4:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 80038f8:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80038fc:	3282      	adds	r2, #130	@ 0x82
 80038fe:	4113      	asrs	r3, r2
 8003900:	432b      	orrs	r3, r5
 8003902:	e7e3      	b.n	80038cc <__ieee754_fmodf+0xc8>
 8003904:	08003938 	.word	0x08003938

08003908 <_init>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	bf00      	nop
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr

08003914 <_fini>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	bf00      	nop
 8003918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391a:	bc08      	pop	{r3}
 800391c:	469e      	mov	lr, r3
 800391e:	4770      	bx	lr
